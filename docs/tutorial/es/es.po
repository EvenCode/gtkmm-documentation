# translation of gtkmm-documentation.tutorial.master.po to Español
# Spanish translation for gtkmm-documentation.
# Copyright (C) 2010 gtkmm-documentation's COPYRIGHT HOLDER
# This file is distributed under the same license as the gtkmm-documentation package.
#
#
#
#
#
#
# Jorge González <jorgegonz@svn.gnome.org>, 2010.
# Fidel Sanchez-Bueno <axl456@axl456.com.ve>, 2011.
# José Zambrano <jozaol@gmail.com>, 2011.
# Rafael Angel <rafo424@gmail.com>, 2011.
# Rafael Chunga <rafo424@gmail.com>, 2012.
# Nicolás Satragno <nsatragno@gmail.com>, 2012.
# Daniel Mustieles <daniel.mustieles@gmail.com>, 2011, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: gtkmm-documentation.tutorial.master\n"
"POT-Creation-Date: 2012-04-02 09:42+0000\n"
"PO-Revision-Date: 2012-04-11 13:42+0200\n"
"Last-Translator: Daniel Mustieles <daniel.mustieles@gmail.com>\n"
"Language-Team: Español <gnome-es-list@gnome.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Lokalize 1.4\n"
"Language: es\n"

#: C/gtkmm-tutorial-in.xml:34(title)
msgid "Programming with <application>gtkmm</application> 3"
msgstr "Programar con <application>gtkmm</application> 3"

#: C/gtkmm-tutorial-in.xml:38(firstname)
msgid "Murray"
msgstr "Murray"

#: C/gtkmm-tutorial-in.xml:39(surname)
msgid "Cumming"
msgstr "Cumming"

#: C/gtkmm-tutorial-in.xml:42(firstname)
msgid "Bernhard"
msgstr "Bernhard"

#: C/gtkmm-tutorial-in.xml:43(surname)
msgid "Rieder"
msgstr "Rieder"

#: C/gtkmm-tutorial-in.xml:44(contrib)
msgid "Chapter on \"Timeouts\"."
msgstr "Capítulo acerca de «Tiempos de espera»."

#: C/gtkmm-tutorial-in.xml:47(firstname)
msgid "Jonathon"
msgstr "Jonathon"

#: C/gtkmm-tutorial-in.xml:48(surname)
msgid "Jongsma"
msgstr "Jongsma"

#: C/gtkmm-tutorial-in.xml:49(contrib)
msgid "Chapter on \"Drawing with Cairo\"."
msgstr "Capítulo acerca de «Dibujar con Cairo»."

#: C/gtkmm-tutorial-in.xml:50(contrib)
msgid "Chapter on \"Working with gtkmm's Source Code\"."
msgstr "Capítulo acerca de «Trabajar con el código fuente de gtkmm»."

#: C/gtkmm-tutorial-in.xml:51(contrib)
msgid "Chapter on \"Recent Files\"."
msgstr "Capítulo acerca de «Archivos recientes»."

#: C/gtkmm-tutorial-in.xml:54(firstname)
msgid "Ole"
msgstr "Ole"

#: C/gtkmm-tutorial-in.xml:55(surname)
msgid "Laursen"
msgstr "Laursen"

#: C/gtkmm-tutorial-in.xml:56(contrib) C/gtkmm-tutorial-in.xml:62(contrib)
msgid "Parts of chapter on \"Internationalization\"."
msgstr "Partes del capítulo acerca de «Internacionalización»."

#: C/gtkmm-tutorial-in.xml:59(firstname)
msgid "Marko"
msgstr "Marko"

#: C/gtkmm-tutorial-in.xml:60(surname)
msgid "Anastasov"
msgstr "Anastasov"

#: C/gtkmm-tutorial-in.xml:61(contrib)
msgid "Chapter on \"Printing\"."
msgstr "Capítulo acerca de «Imprimir»."

#: C/gtkmm-tutorial-in.xml:65(firstname)
msgid "Daniel"
msgstr "Daniel"

#: C/gtkmm-tutorial-in.xml:66(surname)
msgid "Elstner"
msgstr "Elstner"

#: C/gtkmm-tutorial-in.xml:67(contrib)
msgid ""
"Section \"Build Structure\" of chapter on \"Wrapping C Libraries with gmmproc"
"\"."
msgstr ""
"Sección «Construir la estructura» del capítulo acerca de «Envolver "
"bibliotecas de C con gmmproc»."

#: C/gtkmm-tutorial-in.xml:71(firstname)
msgid "David"
msgstr "David"

#: C/gtkmm-tutorial-in.xml:72(surname)
msgid "King"
msgstr "King"

#: C/gtkmm-tutorial-in.xml:73(contrib)
msgid "Section on Gtk::Grid."
msgstr "Sección acerca de Gtk::Grid."

#: C/gtkmm-tutorial-in.xml:76(firstname)
msgid "Pedro"
msgstr "Pedro"

#: C/gtkmm-tutorial-in.xml:77(surname)
msgid "Ferreira"
msgstr "Ferreira"

#: C/gtkmm-tutorial-in.xml:78(contrib)
msgid "Chapter on Keyboard Events."
msgstr "Capítulo acerca de «Eventos del teclado»."

#: C/gtkmm-tutorial-in.xml:81(firstname)
msgid "Kjell"
msgstr "Kjell"

#: C/gtkmm-tutorial-in.xml:82(surname)
msgid "Ahlstedt"
msgstr "Ahlstedt"

#: C/gtkmm-tutorial-in.xml:83(contrib)
msgid "Parts of the update from gtkmm 2 to gtkmm 3."
msgstr "Partes de la actualización de gtkmm 2 a gtkmm 3."

#. This text is copied from the introduction.
#: C/gtkmm-tutorial-in.xml:90(para)
msgid ""
"This book explains key concepts of the <application>gtkmm</application> C++ "
"API for creating user interfaces. It also introduces the main user interface "
"elements (\"widgets\")."
msgstr ""
"Este libro explica conceptos clave sobre la API <application>gtkmm</"
"application> de C++ para la creación de interfaces de usuario. También "
"introduce los elementos principales de la interfaz de usuario («widgets»)."

#: C/gtkmm-tutorial-in.xml:96(year)
msgid "2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010"
msgstr "2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010"

#: C/gtkmm-tutorial-in.xml:97(holder)
msgid "Murray Cumming"
msgstr "Murray Cumming"

#: C/gtkmm-tutorial-in.xml:101(para)
msgid ""
"Permission is granted to copy, distribute and/or modify this document under "
"the terms of the GNU Free Documentation License, Version 1.2 or any later "
"version published by the Free Software Foundation; with no Invariant "
"Sections, no Front-Cover Texts, and no Back-Cover Texts. You may obtain a "
"copy of the GNU Free Documentation License from the Free Software Foundation "
"by visiting their Web site or by writing to: Free Software Foundation, Inc., "
"59 Temple Place - Suite 330, Boston, MA 02111-1307, USA."
msgstr ""
"Se otorga permiso para copiar, distribuir y/o modificar este documento en "
"virtud de los términos de la Versión 1.2 de la Licencia de Documentación "
"Libre de GNU o de cualquier versión posterior publicada por la Fundación "
"para el Software Libre; sin Secciones Invariantes, sin Textos de Portada y "
"sin Textos de Contraportada. Puede conseguir una copia de la Licencia de "
"Documentación Libre de GNU, visitando la página oficial o escribiendo a: "
"Free Software Fundation, Inc., 59 Temple Place - Suite 330, Boston, MA "
"02111-1307, EE. UU."

#: C/gtkmm-tutorial-in.xml:113(title)
msgid "Introduction"
msgstr "Introducción"

#: C/gtkmm-tutorial-in.xml:116(title)
msgid "This book"
msgstr "Este libro"

#: C/gtkmm-tutorial-in.xml:118(para)
msgid ""
"This book explains key concepts of the <application>gtkmm</application> C++ "
"API for creating user interfaces. It also introduces the main user interface "
"elements (\"widgets\"). Although it mentions classes, constructors, and "
"methods, it does not go into great detail. Therefore, for full API "
"information you should follow the links into the reference documentation."
msgstr ""
"Este libro explica conceptos clave sobre la API <application>gtkmm</"
"application> de C++ para la creación de interfaces de usuario. También "
"introduce los elementos principales de la interfaz de usuario («widgets»). A "
"pesar de que se hace mención a las clases, constructores y métodos, estas no "
"se explican en gran detalle. Por lo tanto, para obtener información completa "
"sobre la API, diríjase a los enlaces en la documentación de referencia."

#: C/gtkmm-tutorial-in.xml:120(para)
msgid ""
"This book assumes a good understanding of C++, and how to create C++ "
"programs."
msgstr ""
"Este libro asume un buen entendimiento sobre C++, y cómo crear programas en C"
"++."

#: C/gtkmm-tutorial-in.xml:122(para)
msgid ""
"We would very much like to hear of any problems you have learning "
"<application>gtkmm</application> with this document, and would appreciate "
"input regarding improvements. Please see the <link linkend=\"chapter-"
"contributing\">Contributing</link> section for further information."
msgstr ""
"Nos encantaría que nos informara sobre cualquier problema que encuentre "
"aprendiendo <application>gtkmm</application> con este documento, y "
"apreciaríamos cualquier información sobre mejoras en el mismo. Consulte la "
"sección <link linkend=\"chapter-contributing\">contribuir</link> para "
"obtener más información."

#: C/gtkmm-tutorial-in.xml:129(title)
msgid "gtkmm"
msgstr "gtkmm"

#: C/gtkmm-tutorial-in.xml:130(para)
msgid ""
"<application>gtkmm</application> is a C++ wrapper for <ulink url=\"http://"
"www.gtk.org/\">GTK+</ulink>, a library used to create graphical user "
"interfaces. It is licensed using the LGPL license, so you can develop open "
"software, free software, or even commercial non-free software using "
"<application>gtkmm</application> without purchasing licenses."
msgstr ""
"<application>gtkmm</application> es un envoltorio de C++ para <ulink url="
"\"http://www.gtk.org/\">GTK+</ulink>, una biblioteca usada para crear "
"interfaces gráficas de usuario. Esta liberado bajo la licencia LGPL, para "
"que pueda desarrollar software abierto, software gratuito o software "
"comercial usando <application>gtkmm</application> sin comprar ninguna "
"licencia."

#: C/gtkmm-tutorial-in.xml:138(para)
msgid ""
"<application>gtkmm</application> was originally named gtk-- because GTK+ "
"already has a + in the name. However, as -- is not easily indexed by search "
"engines the package generally went by the name <application>gtkmm</"
"application>, and that's what we stuck with."
msgstr ""
"<application>gtkmm</application> fue originalmente llamado gtk-- debido a "
"que GTK+ ya tenía el signo + en el nombre. Sin embargo, debido a que -- no "
"puede ser indexado fácilmente en los motores de búsqueda, el paquete fue "
"generalmente llamado <application>gtkmm</application>, y eso fue con lo que "
"nos quedamos."

#: C/gtkmm-tutorial-in.xml:141(title)
msgid "Why use <application>gtkmm</application> instead of GTK+?"
msgstr "¿Por qué usar <application>gtkmm</application> en vez de GTK+?"

#: C/gtkmm-tutorial-in.xml:142(para)
msgid ""
"<application>gtkmm</application> allows you to write code using normal C++ "
"techniques such as encapsulation, derivation, and polymorphism. As a C++ "
"programmer you probably already realise that this leads to clearer and "
"better organized code."
msgstr ""
"<application>gtkmm</application> le permite escribir código usando técnicas "
"normales de C++ tales como encapsulación, derivación y polimorfismo. Como "
"programador de C++, probablemente ya se habrá dado cuenta de que esto "
"conlleva a un código mas limpio y mejor organizado."

#: C/gtkmm-tutorial-in.xml:143(para)
msgid ""
"<application>gtkmm</application> is more type-safe, so the compiler can "
"detect errors that would only be detected at run time when using C. This use "
"of specific types also makes the API clearer because you can see what types "
"should be used just by looking at a method's declaration."
msgstr ""
"<application>gtkmm</application> es más seguro, por lo que el compilador "
"puede detectar errores que sólo pudieran detectarse durante ejecución al "
"usar C. Este uso de tipos específicos también hace la API más limpia debido "
"a que puede ver qué tipos deberían usarse con sólo mirar la declaración de "
"un método."

#: C/gtkmm-tutorial-in.xml:144(para)
msgid ""
"Inheritance can be used to derive new widgets. The derivation of new widgets "
"in GTK+ C code is so complicated and error prone that almost no C coders do "
"it. As a C++ developer you know that derivation is an essential Object "
"Orientated technique."
msgstr ""
"Se puede hacer uso de herencia para derivar nuevos widgets. Derivar nuevos "
"widgets en código C GTK+ es tan complicado y propenso a errores que casi "
"ningún codificador de C lo hace. Como programador en C++ usted sabe que la "
"derivación es una técnica orientada a objetos esencial."

#: C/gtkmm-tutorial-in.xml:145(para)
msgid ""
"Member instances can be used, simplifying memory management. All GTK+ C "
"widgets are dealt with by use of pointers. As a C++ coder you know that "
"pointers should be avoided where possible."
msgstr ""
"Pueden usarse instancias de miembros, simplificando la gestión de memoria. "
"Todos los widgets C GTK+ son tratados usando punteros. Como programador en C+"
"+ usted sabe que los punteros deben evitarse siempre que sea posible."

#: C/gtkmm-tutorial-in.xml:146(para)
msgid ""
"<application>gtkmm</application> involves less code compared to GTK+, which "
"uses prefixed function names and lots of cast macros."
msgstr ""
"<application>gtkmm</application> implica menos código en comparación con GTK"
"+, el cual usa nombres de funciones prefijadas y muchos macros."

#: C/gtkmm-tutorial-in.xml:150(title)
msgid "<application>gtkmm</application> compared to Qt"
msgstr "<application>gtkmm</application> comparado con Qt"

#: C/gtkmm-tutorial-in.xml:151(para)
msgid ""
"Trolltech's Qt is the closest competition to <application>gtkmm</"
"application>, so it deserves discussion."
msgstr ""
"Qt de Trolltech es el competidor más cercano de <application>gtkmm</"
"application>, por lo que merece discusión."

#: C/gtkmm-tutorial-in.xml:153(para)
msgid ""
"<application>gtkmm</application> developers tend to prefer "
"<application>gtkmm</application> to Qt because <application>gtkmm</"
"application> does things in a more C++ way. Qt originates from a time when C+"
"+ and the standard library were not standardised or well supported by "
"compilers. It therefore duplicates a lot of stuff that is now in the "
"standard library, such as containers and type information. Most "
"significantly, Trolltech modified the C++ language to provide signals, so "
"that Qt classes cannot be used easily with non-Qt classes. "
"<application>gtkmm</application> was able to use standard C++ to provide "
"signals without changing the C++ language. See the FAQ for more detailed "
"differences."
msgstr ""
"Los desarrolladores de <application>gtkmm</application> tienden a preferir "
"<application>gtkmm</application> antes que a Qt porque <application>gtkmm</"
"application> es funcionalmente similar a C++. Qt se originó en un momento en "
"que C++ y la biblioteca estándar no estaban estandarizados o bien no "
"contaban con un buen soporte de los compiladores. Es por ello que en la "
"actualidad se encuentran mucho material duplicado en la biblioteca estándar, "
"tales como contenedores e información de tipo. Lo más relevante es que "
"Trolltech ha modificado el lenguaje C + + para proporcionar señales, por lo "
"que las clases de Qt no se pueden utilizar fácilmente con clases de otras "
"bibliotecas. <application> gtkmm </application> fue capaz de utilizar C++ "
"estándar para proporcionar señales sin necesidad de cambiar el lenguaje C++. "
"Consulte las preguntas frecuentes para conocer las diferencias de manera "
"detallada."

#: C/gtkmm-tutorial-in.xml:157(title)
msgid "<application>gtkmm</application> is a wrapper"
msgstr "<application>gtkmm</application> es un envoltorio"

#: C/gtkmm-tutorial-in.xml:158(para)
msgid ""
"<application>gtkmm</application> is not a native C++ toolkit, but a C++ "
"wrapper of a C toolkit. This separation of interface and implementation has "
"advantages. The <application>gtkmm</application> developers spend most of "
"their time talking about how <application>gtkmm</application> can present "
"the clearest API, without awkward compromises due to obscure technical "
"details. We contribute a little to the underlying GTK+ code base, but so do "
"the C coders, and the Perl coders and the Python coders, etc. Therefore GTK+ "
"benefits from a broader user base than language-specific toolkits - there "
"are more implementers, more developers, more testers, and more users."
msgstr ""
"<application>gtkmm</application> no es un kit de herramientas nativo de C++, "
"pero si es un envoltorio C++ de un conjunto de herramientas de C. Esta "
"separación de la interfaz e implementación tiene sus ventajas. Los "
"desarrolladores de <application>gtkmm</application> pasan la mayor parte de "
"su tiempo hablando sobre cómo <application>gtkmm</application> puede "
"presentar una API lo mas clara posible, sin compromisos incómodos debido a "
"oscuros detalles técnicos. Nosotros contribuimos un poco a al código fuente "
"subyacente de GTK+, pero también lo hacen los programadores de C, los "
"programadores de Perl, los programadores de Python, etc. Por ello, GTK+ se "
"beneficia de una base de usuarios de mayor proporción que el lenguaje de "
"herramientas específicas; hay más desarrolladores, más personas que prueban "
"software en desarrollo, y más usuarios."

#: C/gtkmm-tutorial-in.xml:166(title)
msgid "Installation"
msgstr "Instalación"

#: C/gtkmm-tutorial-in.xml:168(title)
msgid "Dependencies"
msgstr "Dependecias"

#: C/gtkmm-tutorial-in.xml:169(para)
msgid ""
"Before attempting to install <application>gtkmm</application> 3.0, you might "
"first need to install these other packages."
msgstr ""
"Antes de intentar instalar <application>gtkmm</application> 3.0, "
"probablemente deba instalar primero estos otros paquetes."

#: C/gtkmm-tutorial-in.xml:174(application)
msgid "libsigc++ 2.0"
msgstr "libsigc++ 2.0"

#: C/gtkmm-tutorial-in.xml:175(application)
msgid "GTK+ 3.0"
msgstr "GTK+ 3.0"

#: C/gtkmm-tutorial-in.xml:176(application)
msgid "cairomm"
msgstr "cairomm"

#: C/gtkmm-tutorial-in.xml:177(application)
msgid "pangomm"
msgstr "pangomm"

#: C/gtkmm-tutorial-in.xml:178(application)
msgid "atkmm"
msgstr "atkmm"

#: C/gtkmm-tutorial-in.xml:180(para)
msgid ""
"These dependencies have their own dependencies, including the following "
"applications and libraries:"
msgstr ""
"Estas dependencias tienen sus propias dependencias, incluyendo las "
"siguientes aplicaciones y bibliotecas:"

#: C/gtkmm-tutorial-in.xml:185(application)
msgid "pkg-config"
msgstr "pkg-config"

#: C/gtkmm-tutorial-in.xml:186(application)
msgid "glib"
msgstr "glib"

#: C/gtkmm-tutorial-in.xml:187(application)
msgid "ATK"
msgstr "ATK"

#: C/gtkmm-tutorial-in.xml:188(application)
msgid "Pango"
msgstr "Pango"

#: C/gtkmm-tutorial-in.xml:189(application)
msgid "cairo"
msgstr "cairo"

#: C/gtkmm-tutorial-in.xml:190(application)
msgid "gdk-pixbuf"
msgstr "gdk-pixbuf"

#: C/gtkmm-tutorial-in.xml:195(title)
msgid "Unix and Linux"
msgstr "Unix y Linux"

#: C/gtkmm-tutorial-in.xml:198(title)
msgid "Prebuilt Packages"
msgstr "Paquetes preconstruidos"

#: C/gtkmm-tutorial-in.xml:200(para)
msgid ""
"Recent versions of <application>gtkmm</application> are packaged by nearly "
"every major Linux distribution these days. So, if you use Linux, you can "
"probably get started with <application>gtkmm</application> by installing the "
"package from the official repository for your distribution. Distributions "
"that include <application>gtkmm</application> in their repositories include "
"Debian, Ubuntu, Red Hat, Fedora, Mandriva, Suse, and many others."
msgstr ""
"Las versiones recientes de <application>gtkmm</application> se empaquetan en "
"casi todas las distribuciones principales de Linux actualmente. Si usted "
"utiliza Linux, es probable que pueda empezar a trabajar con <application> "
"gtkmm </application> instalando el paquete desde el repositorio oficial para "
"su distribución Linux. Las distribuciones que cuentan con "
"<application>gtkmm</application> en sus repositorios son Debian, Ubuntu, Red "
"Hat, Fedora, Mandriva, Suse, y muchas otras."

#: C/gtkmm-tutorial-in.xml:208(para)
msgid ""
"The names of the <application>gtkmm</application> packages vary from "
"distribution to distribution (e.g. <application>libgtkmm3.0-dev</"
"application> on Debian and Ubuntu or <application>gtkmm30-devel</"
"application> on Red Hat Fedora), so check with your distribution's package "
"management program for the correct package name and install it like you "
"would any other package."
msgstr ""
"Los nombres de los paquetes de <application>gtkmm</application> varían de "
"distribución en distribución (por ejemplo, <application>libgtkmm3.0-dev</"
"application> en Debian y en Ubuntu o <application>gtkmm30-devel</"
"application> en Red Hat Fedora), por lo que se recomienda consultar el "
"nombre del paquete correcto en el gestor de paquetes de su distribución para "
"instalarlo como lo haría con cualquier otro paquete."

#: C/gtkmm-tutorial-in.xml:216(para)
msgid ""
"The package names will not change when new API/ABI-compatible versions of "
"<application>gtkmm</application> are released. Otherwise they would not be "
"API/ABI-compatible. So don't be surprised, for instance, to find "
"<application>gtkmm</application> 3.2 supplied by Debian's "
"<application>libgtkmm3.0-dev</application> package."
msgstr ""
"Los nombres de los paquetes no cambiarán cuando se libere la nueva API/ABI "
"compatible con versiones de <application>gtkmm</application>. De lo "
"contrario, no sería una API/ABI compatible. Así que no se sorprenda, por "
"ejemplo, de encontrar <application>gtkmm</application> 3.2 suministrado por "
"el paquete <application>libgtkmm3.0-dev</application> de Debian."

#: C/gtkmm-tutorial-in.xml:226(title)
msgid "Installing From Source"
msgstr "Instalar desde las fuentes"

#: C/gtkmm-tutorial-in.xml:228(para)
msgid ""
"If your distribution does not provide a pre-built <application>gtkmm</"
"application> package, or if you want to install a different version than the "
"one provided by your distribution, you can also install <application>gtkmm</"
"application> from source. The source code for <application>gtkmm</"
"application> can be downloaded from <ulink url=\"http://www.gtkmm.org/\"/>."
msgstr ""
"Si su distribución no proporciona un paquete <application>gtkmm</"
"application> pre-construido, o si desea instalar una versión diferente a la "
"proporcionada por su distribución, también puede instalar "
"<application>gtkmm</application> desde las fuentes. El código fuente para "
"<application>gtkmm</application> se puede descargar desde <ulink url="
"\"http://www.gtkmm.org/\"/>."

#: C/gtkmm-tutorial-in.xml:234(para)
msgid ""
"After you've installed all of the dependencies, download the "
"<application>gtkmm</application> source code, unpack it, and change to the "
"newly created directory. <application>gtkmm</application> can be built and "
"installed with the following sequence of commands:"
msgstr ""
"Después de haber instalado todas las dependencias, descargue el código "
"fuente de <application>gtkmm</application>, descomprímalo y cámbiese a la "
"carpeta creada. <application>gtkmm</application> se puede construir e "
"instalar con la siguiente secuencia de comandos:"

#: C/gtkmm-tutorial-in.xml:239(screen)
#, no-wrap
msgid ""
"\n"
"# ./configure\n"
"# make\n"
"# make install\n"
msgstr ""
"\n"
"# ./configure\n"
"# make\n"
"# make install\n"

#: C/gtkmm-tutorial-in.xml:245(para)
msgid ""
"Remember that on a Unix or Linux operating system, you will probably need to "
"be <literal>root</literal> to install software. The <command>su</command> "
"command will allow you to enter the <literal>root</literal> password and "
"have <literal>root</literal> status temporarily."
msgstr ""
"Recuerde que en un sistema Unix o Linux, probablemente tendrá que ser "
"<literal>root</literal> para instalar el software. El comando <command>su</"
"command> le permitirá introducir la contraseña de <literal>root</"
"literal>para tener el acceso de <literal>root</literal> temporalmente."

#: C/gtkmm-tutorial-in.xml:252(para)
msgid ""
"The <filename>configure</filename> script will check to make sure all of the "
"required dependencies are already installed. If you are missing any "
"dependencies, it will exit and display an error."
msgstr ""
"El script <filename>configure</filename> hará comprobaciones para asegurarse "
"de que todas las dependencias necesarias ya están instaladas. Si le falta "
"alguna dependencia, terminará y mostrará un error."

#: C/gtkmm-tutorial-in.xml:257(para)
msgid ""
"By default, <application>gtkmm</application> will be installed under the "
"<filename>/usr/local</filename> directory. On some systems you may need to "
"install to a different location. For instance, on Red Hat Linux systems you "
"might use the <literal>--prefix</literal> option with configure, like so: "
"<screen>\n"
"# ./configure --prefix=/usr\n"
"</screen>"
msgstr ""
"De manera predeterminada, <application>gtkmm</application> se instalará en "
"la carpeta <filename>/usr/local</filename>, En algunos sistemas es posible "
"que necesite instalar en una ubicación diferente. Por ejemplo, en sitemas "
"Red Hat Linux puede utilizar la opción <literal>--prefix </literal>, de este "
"modo: <screen># ./configure --prefix=/usr</screen>"

#: C/gtkmm-tutorial-in.xml:268(para)
msgid ""
"You should be very careful when installing to standard system prefixes such "
"as <filename>/usr</filename>. Linux distributions install software packages "
"to <filename>/usr</filename>, so installing a source package to this prefix "
"could corrupt or conflict with software installed using your distribution's "
"package-management system. Ideally, you should use a separate prefix for all "
"software you install from source."
msgstr ""
"Debe tener mucho cuidado al instalar en prefijos estándar del sistema, como "
"<filename>/usr</filename>. Las distribuciones de Linux instalan paquetes de "
"software en <filename>/usr</filename>, por lo que instalar un paquete de "
"fuentes en este prefijo puede corromper o crear un conflicto con el software "
"instalado usando el sistema de gestión de paquetes de su distribución. De "
"manera ideal, debería usar un prefijo separado para todo el software que "
"instale desde las fuentes."

#: C/gtkmm-tutorial-in.xml:277(para)
msgid ""
"If you want to help develop <application>gtkmm</application> or experiment "
"with new features, you can also install <application>gtkmm</application> "
"from git. Most users will never need to do this, but if you're interested in "
"helping with <application>gtkmm</application> development, see the <link "
"linkend=\"chapter-working-with-source\">Working with gtkmm's Source Code</"
"link> appendix."
msgstr ""
"Si quiere ayudar al desarrollo de <application>gtkmm</application> o "
"experimentar con nuevas características, puede instalar <application>gtkmm</"
"application> desde git. La mayoría de los usuarios nunca tendrán que hacer "
"esto, pero si está interesado en involucrarse directamente con el desarrollo "
"de <application>gtkmm</application>, consulte el apéndice <link linkend="
"\"chapter-working-with-source\">Trabajando con el código fuente de gtkmm</"
"link>."

#: C/gtkmm-tutorial-in.xml:288(title)
msgid "Microsoft Windows"
msgstr "Microsoft Windows"

#: C/gtkmm-tutorial-in.xml:289(para)
msgid ""
"GTK+ and <application>gtkmm</application> were designed to work well with "
"Microsoft Windows, and the developers encourage its use on the win32 "
"platform. However, Windows has no standard installation system for "
"development libraries. Please see the <ulink url=\"http://live.gnome.org/"
"gtkmm/MSWindows\">Windows Installation</ulink> page for Windows-specific "
"installation instructions and notes."
msgstr ""
"GTK+ y <application>gtkmm</application> están diseñados para funcionar "
"correctamente con Microsoft Windows, y los desarrolladores fomentan su uso "
"en la plataforma win32. Sin embargo, Windows no tiene un sistema de "
"instalación estándar para las bibliotecas de desarrollo. Si quiere obtener "
"instrucciones y notas para una instalación específica de Windows consulte la "
"página <ulink url=\"http://live.gnome.org/gtkmm/MSWindows\">Instalación en "
"Windows</ulink>."

#: C/gtkmm-tutorial-in.xml:296(title)
msgid "Basics"
msgstr "Conceptos básicos"

#: C/gtkmm-tutorial-in.xml:298(para)
msgid ""
"This chapter will introduce some of the most important aspects of "
"<application>gtkmm</application> coding. These will be demonstrated with "
"simple working example code. However, this is just a taster, so you need to "
"look at the other chapters for more substantial information."
msgstr ""
"En este capítulo se presentan algunos de los aspectos más importantes de la "
"codificación <application>gtkmm</application>. Que se validarán con un "
"ejemplo de trabajo de código. Sin embargo, esta es sólo una pequeña muestra, "
"por lo que es necesario leer otros capítulos para obtener más información "
"importante."

#: C/gtkmm-tutorial-in.xml:301(para)
msgid ""
"Your existing knowledge of C++ will help you with <application>gtkmm</"
"application> as it would with any library. Unless we state otherwise, you "
"can expect <application>gtkmm</application> classes to behave like any other "
"C++ class, and you can expect to use your existing C++ techniques with "
"<application>gtkmm</application> classes."
msgstr ""
"Conocer C++ le ayudará con <application>gtkmm</application> como lo haría "
"con cualquier otra biblioteca. A menos que se indique lo contrario, el "
"comportamiento de las clases de <application>gtkmm</application> será como "
"el de cualquier otra clase C++, de manera que podrá utilizar sus actuales "
"técnicas de C++ con las clases de <application>gtkmm</application>."

#: C/gtkmm-tutorial-in.xml:306(title) C/gtkmm-tutorial-in.xml:3382(title)
msgid "Simple Example"
msgstr "Ejemplo simple"

#: C/gtkmm-tutorial-in.xml:308(para)
msgid ""
"To begin our introduction to <application>gtkmm</application>, we'll start "
"with the simplest program possible. This program will create an empty 200 x "
"200 pixel window."
msgstr ""
"Para iniciar nuestra introducción a <application>gtkmm</application>, vamos "
"a empezar con el programa más simple posible. Este programa va a crear una "
"ventana vacía de 200 x 200 píxeles."

#: C/gtkmm-tutorial-in.xml:313(ulink) C/gtkmm-tutorial-in.xml:491(ulink)
#: C/gtkmm-tutorial-in.xml:759(ulink) C/gtkmm-tutorial-in.xml:867(ulink)
#: C/gtkmm-tutorial-in.xml:976(ulink) C/gtkmm-tutorial-in.xml:1139(ulink)
#: C/gtkmm-tutorial-in.xml:1193(ulink) C/gtkmm-tutorial-in.xml:1267(ulink)
#: C/gtkmm-tutorial-in.xml:1314(ulink) C/gtkmm-tutorial-in.xml:1341(ulink)
#: C/gtkmm-tutorial-in.xml:1366(ulink) C/gtkmm-tutorial-in.xml:1514(ulink)
#: C/gtkmm-tutorial-in.xml:1580(ulink) C/gtkmm-tutorial-in.xml:1604(ulink)
#: C/gtkmm-tutorial-in.xml:1635(ulink) C/gtkmm-tutorial-in.xml:1692(ulink)
#: C/gtkmm-tutorial-in.xml:1732(ulink) C/gtkmm-tutorial-in.xml:1777(ulink)
#: C/gtkmm-tutorial-in.xml:1812(ulink) C/gtkmm-tutorial-in.xml:1851(ulink)
#: C/gtkmm-tutorial-in.xml:1980(ulink) C/gtkmm-tutorial-in.xml:2107(ulink)
#: C/gtkmm-tutorial-in.xml:2148(ulink) C/gtkmm-tutorial-in.xml:2190(ulink)
#: C/gtkmm-tutorial-in.xml:2251(ulink) C/gtkmm-tutorial-in.xml:2291(ulink)
#: C/gtkmm-tutorial-in.xml:2887(ulink) C/gtkmm-tutorial-in.xml:2906(ulink)
#: C/gtkmm-tutorial-in.xml:2925(ulink) C/gtkmm-tutorial-in.xml:2947(ulink)
#: C/gtkmm-tutorial-in.xml:2969(ulink) C/gtkmm-tutorial-in.xml:3042(ulink)
#: C/gtkmm-tutorial-in.xml:3055(ulink) C/gtkmm-tutorial-in.xml:3147(ulink)
#: C/gtkmm-tutorial-in.xml:3160(ulink) C/gtkmm-tutorial-in.xml:3391(ulink)
#: C/gtkmm-tutorial-in.xml:3566(ulink) C/gtkmm-tutorial-in.xml:3579(ulink)
#: C/gtkmm-tutorial-in.xml:3635(ulink) C/gtkmm-tutorial-in.xml:3888(ulink)
#: C/gtkmm-tutorial-in.xml:3950(ulink) C/gtkmm-tutorial-in.xml:3977(ulink)
#: C/gtkmm-tutorial-in.xml:4000(ulink) C/gtkmm-tutorial-in.xml:4024(ulink)
#: C/gtkmm-tutorial-in.xml:4226(ulink) C/gtkmm-tutorial-in.xml:4316(ulink)
#: C/gtkmm-tutorial-in.xml:4344(ulink) C/gtkmm-tutorial-in.xml:4420(ulink)
#: C/gtkmm-tutorial-in.xml:4492(ulink) C/gtkmm-tutorial-in.xml:4555(ulink)
#: C/gtkmm-tutorial-in.xml:4581(ulink) C/gtkmm-tutorial-in.xml:4794(ulink)
#: C/gtkmm-tutorial-in.xml:4954(ulink) C/gtkmm-tutorial-in.xml:4974(ulink)
#: C/gtkmm-tutorial-in.xml:5348(ulink) C/gtkmm-tutorial-in.xml:5569(ulink)
#: C/gtkmm-tutorial-in.xml:5703(ulink) C/gtkmm-tutorial-in.xml:5827(ulink)
#: C/gtkmm-tutorial-in.xml:5895(ulink) C/gtkmm-tutorial-in.xml:5956(ulink)
#: C/gtkmm-tutorial-in.xml:6053(ulink) C/gtkmm-tutorial-in.xml:6090(ulink)
#: C/gtkmm-tutorial-in.xml:6443(ulink) C/gtkmm-tutorial-in.xml:6511(ulink)
#: C/gtkmm-tutorial-in.xml:7156(ulink) C/gtkmm-tutorial-in.xml:7213(ulink)
#: C/gtkmm-tutorial-in.xml:7969(ulink)
msgid "Source Code"
msgstr "Código fuente"

#: C/gtkmm-tutorial-in.xml:315(para)
msgid "We will now explain each line of the example"
msgstr "Ahora se explicará cada línea del ejemplo"

#: C/gtkmm-tutorial-in.xml:316(programlisting)
#, no-wrap
msgid "#include &lt;gtkmm.h&gt;"
msgstr "#include &lt;gtkmm.h&gt;"

#: C/gtkmm-tutorial-in.xml:317(para)
msgid ""
"All <application>gtkmm</application> programs must include certain "
"<application>gtkmm</application> headers; <literal>gtkmm.h</literal> "
"includes the entire <application>gtkmm</application> kit. This is usually "
"not a good idea, because it includes a megabyte or so of headers, but for "
"simple programs, it suffices."
msgstr ""
"Todos los programas <application>gtkmm</application> deben incluir ciertas "
"cabeceras <application>gtkmm</application>: <literal>gtkmm.h</literal> "
"incluye el kit completo de <application>gtkmm</application>. Esto no suele "
"ser una buena idea, ya que incluye casi un megabyte de cabeceras, pero para "
"programas sencillos, basta."

#: C/gtkmm-tutorial-in.xml:327(programlisting)
#, no-wrap
msgid "Glib::RefPtr&lt;Gtk::Application&gt; app = Gtk::Application::create(argc, argv, \"org.gtkmm.examples.base\");"
msgstr "Glib::RefPtr&lt;Gtk::Application&gt; app = Gtk::Application::create(argc, argv, \"org.gtkmm.examples.base\");"

#: C/gtkmm-tutorial-in.xml:324(para)
msgid ""
"The next line: <placeholder-1/> creates a <classname>Gtk::Application</"
"classname> object, stored in a <classname>RefPtr</classname> smartpointer. "
"This is needed in all <application>gtkmm</application> applications. The "
"create() method for this object initializes <application>gtkmm</"
"application>, and checks the arguments passed to your application on the "
"command line, looking for standard options such as <literal>-display</"
"literal>. It takes these from the argument list, leaving anything it does "
"not recognize for your application to parse or ignore. This ensures that all "
"<application>gtkmm</application> applications accept the same set of "
"standard arguments."
msgstr ""
"La siguiente línea: <placeholder-1/> crea un objeto <classname>Gtk::"
"Application</classname>, almacenado en un puntero inteligente "
"<classname>RefPtr</classname>. Esto es necesario en todas las aplicaciones "
"<application>gtkmm</application>. El método «create()» de este objeto "
"inicializa <application>gtkmm</application> y verifica los argumentos "
"pasados a su aplicación en la línea de comandos, buscando opciones estándar "
"tales como <literal>-display</literal>. Toma estos argumentos de la lista, "
"dejándole cualquier cosa que no reconozca para que su aplicación la procese "
"o la ignore. Esto asegura que todas las aplicaciones <application>gtkmm</"
"application> acepten el mismo conjunto de argumentos estándar."

#: C/gtkmm-tutorial-in.xml:337(para)
msgid "The next two lines of code create and display a window:"
msgstr "Las dos siguientes líneas de código crean y muestran una ventana:"

#: C/gtkmm-tutorial-in.xml:340(programlisting)
#, no-wrap
msgid "Gtk::Window window;"
msgstr "Gtk::Window window;"

#: C/gtkmm-tutorial-in.xml:341(para)
msgid ""
"The last line shows the window and enters the <application>gtkmm</"
"application> main processing loop, which will finish when the window is "
"closed. Your main() function will then return with an appropriate success or "
"error code."
msgstr ""
"La última línea muestra la ventana y entra al bucle principal de "
"<application>gtkmm</application>, que terminará cuando la ventana se cierre. "
"Su función «main()» entonces retornará con un éxito apropiado o un código de "
"error."

#: C/gtkmm-tutorial-in.xml:345(programlisting)
#, no-wrap
msgid "return app-&gt;run(window);"
msgstr "return app-&gt;run(window);"

#: C/gtkmm-tutorial-in.xml:349(programlisting)
#, no-wrap
msgid "g++ simple.cc -o simple `pkg-config gtkmm-3.0 --cflags --libs`"
msgstr "g++ simple.cc -o simple `pkg-config gtkmm-3.0 --cflags --libs`"

#: C/gtkmm-tutorial-in.xml:347(para)
msgid ""
"After putting the source code in <literal>simple.cc</literal> you can "
"compile the above program with gcc using: <placeholder-1/> Note that you "
"must surround the <literal>pkg-config</literal> invocation with backquotes. "
"Backquotes cause the shell to execute the command inside them, and to use "
"the command's output as part of the command line."
msgstr ""
"Después de poner el código fuente en <literal>simple.cc</literal> puede "
"compilar el programa anterior con gcc usando: <placeholder-1/> Tenga en "
"cuenta que debe poner la invocación <literal>pkg-config</literal> entre "
"apóstrofes. Los apóstrofes permite a la shell ejecutar el comando dentro de "
"ellos, y utilizar la salida de comando como parte de la línea de comando."

#: C/gtkmm-tutorial-in.xml:358(title)
msgid "Headers and Linking"
msgstr "Cabeceras y enlazado"

#: C/gtkmm-tutorial-in.xml:359(para)
msgid ""
"Although we have shown the compilation command for the simple example, you "
"really should use the automake and autoconf tools, as described in "
"\"Autoconf, Automake, Libtool\", by G. V. Vaughan et al. The examples used "
"in this book are included in the <application>gtkmm</application> package, "
"with appropriate build files, so we won't show the build commands in future. "
"You'll just need to find the appropriate directory and type <literal>make</"
"literal>."
msgstr ""
"A pesar de que hemos mostrado el comando de compilación para el ejemplo "
"simple, en realidad debería usar las herramientas automake y autoconf, como "
"se describe en «Autoconf, Automake, Libtool», por G. V. Vaughan y otros. Los "
"ejemplos utilizados en este libro se incluyen en el paquete "
"<application>gtkmm</application>, con archivos de construcción apropiados, "
"por lo que no mostraremos los comandos de construcción en el futuro. Sólo "
"tendrá que encontrar la carpeta adecuada e introducir <literal>make</"
"literal>."

#: C/gtkmm-tutorial-in.xml:362(para)
msgid ""
"To simplify compilation, we use <literal>pkg-config</literal>, which is "
"present in all (properly installed) <application>gtkmm</application> "
"installations. This program 'knows' what compiler switches are needed to "
"compile programs that use <application>gtkmm</application>. The <literal>--"
"cflags</literal> option causes <literal>pkg-config</literal> to output a "
"list of include directories for the compiler to look in; the <literal>--"
"libs</literal> option requests the list of libraries for the compiler to "
"link with and the directories to find them in. Try running it from your "
"shell-prompt to see the results on your system."
msgstr ""
"Para simplificar la compilación, se usa <literal>pkg-config</literal>, que "
"está presente en todas las instalaciones correctas de <application>gtkmm</"
"application>. Este programa «sabe» qué opciones de compilación son "
"necesarias para compilar los programas que usan <application>gtkmm</"
"application>. La opción <literal>--cflags</literal> hace que <literal>pkg-"
"config</literal> devuelva la lista de carpetas en las que el compilador "
"buscará los archivos de cabecera; la opción <literal>--libs</literal> "
"solicita la lista de bibliotecas a las que el compilador enlazará y las "
"carpetas en las que encontrarlas. Intente ejecutarlo desde su intérprete de "
"comandos para ver los resultados en su sistema."

#: C/gtkmm-tutorial-in.xml:375(programlisting)
#, no-wrap
msgid "PKG_CHECK_MODULES([MYAPP], [gtkmm-3.0 &gt;= 3.0.0])"
msgstr "PKG_CHECK_MODULES([MYAPP], [gtkmm-3.0 &gt;= 3.0.0])"

#: C/gtkmm-tutorial-in.xml:372(para)
msgid ""
"However, this is even simpler when using the <function>PKG_CHECK_MODULES()</"
"function> macro in a standard configure.ac file with autoconf and automake. "
"For instance: <placeholder-1/> This checks for the presence of gtkmm and "
"defines MYAPP_LIBS and MYAPP_CFLAGS for use in your Makefile.am files."
msgstr ""
"Sin embargo, es aún más simple cuando se utiliza la macro "
"<function>PKG_CHECK_MODULES()</function> en un archivo estándar configure.ac "
"con autoconf y automake. Por ejemplo: <placeholder-1/> Esto comprueba la "
"presencia de gtkmm y define MYAPP_LIBS y MYAPP_CFLAGS para su uso en los "
"archivos Makefile.am."

#: C/gtkmm-tutorial-in.xml:378(para)
msgid ""
"gtkmm-3.0 is the name of the current stable API. There was an older API "
"called gtkmm-2-4 which installs in parallel when it is available. There were "
"several versions of gtkmm-2.4, such as gtkmm 2.10 and there will be several "
"versions of the gtkmm-3.0 API. Note that the API name does not change for "
"every version because that would be an incompatible API and ABI break. "
"Theoretically, there might be a future gtkmm-4.0 API which would install in "
"parallel with gtkmm-3.0 without affecting existing applications."
msgstr ""
"gtkmm-3.0 es el nombre de la API estable actual. Hubo una API más antigua "
"llamada gtkmm-2-4 que se instalará en paralelo cuando está disponible. Hubo "
"varias versiones de gtkmm-2.4, tales como gtkmm 2.10 y habrá varias "
"versiones de la API gtkmm-3.0. Tenga en cuenta que el nombre de la API no "
"cambia para todas las versiones, porque esto implicaría una API incompatible "
"y una ABI rota. Teóricamente, podría haber un futura API gtkmm-4.0 que se "
"instalaría en paralelo con gtkmm-3.0 sin afectar las aplicaciones existentes."

#: C/gtkmm-tutorial-in.xml:381(para)
msgid ""
"Note that if you mention extra modules in addition to gtkmm-3.0, they should "
"be separated by spaces, not commas."
msgstr ""
"Tenga en cuenta que si menciona módulos adicionales, además de gtkmm-3.0, "
"deben estar separados por espacios, no por comas."

#: C/gtkmm-tutorial-in.xml:383(para)
msgid ""
"Openismus has more <ulink url=\"http://www.openismus.com/documents/linux/"
"automake/automake.shtml\">basic help with automake and autoconf</ulink>."
msgstr ""
"Openismus tiene más <ulink url=\"http://www.openismus.com/documents/linux/"
"automake/automake.shtml\">ayuda básica con automake y autoconf</ulink>"

#: C/gtkmm-tutorial-in.xml:390(title) C/gtkmm-tutorial-in.xml:6113(title)
msgid "Widgets"
msgstr "Widgets"

#: C/gtkmm-tutorial-in.xml:391(para)
msgid ""
"<application>gtkmm</application> applications consist of windows containing "
"widgets, such as buttons and text boxes. In some other systems, widgets are "
"called \"controls\". For each widget in your application's windows, there is "
"a C++ object in your application's code. So you just need to call a method "
"of the widget's class to affect the visible widget."
msgstr ""
"Las aplicaciones <application>gtkmm</application> están compuestas por "
"ventanas, estas a su vez contienen widgets, tales como botones y cuadros de "
"texto. En algunos otros sistemas, los widgets se llaman «controles». Hay un "
"objeto C++ en el código de la aplicación para cada widget contenido en las "
"ventanas de una aplicación. Sólo debe llamar a un método de la clase widget "
"para afectar al widget visible."

#: C/gtkmm-tutorial-in.xml:393(programlisting)
#, no-wrap
msgid ""
"m_box.pack_start(m_Button1);\n"
"m_box.pack_start(m_Button2);"
msgstr ""
"m_box.pack_start(m_Button1);\n"
"m_box.pack_start(m_Button2);"

#: C/gtkmm-tutorial-in.xml:396(programlisting)
#, no-wrap
msgid "m_frame.add(m_box);"
msgstr "m_frame.add(m_box);"

#: C/gtkmm-tutorial-in.xml:392(para)
msgid ""
"Widgets are arranged inside container widgets such as frames and notebooks, "
"in a hierarchy of widgets within widgets. Some of these container widgets, "
"such as <classname>Gtk::Grid</classname>, are not visible - they exist only "
"to arrange other widgets. Here is some example code that adds 2 "
"<classname>Gtk::Button</classname> widgets to a <classname>Gtk::Box</"
"classname> container widget: <placeholder-1/> and here is how to add the "
"<classname>Gtk::Box</classname>, containing those buttons, to a "
"<classname>Gtk::Frame</classname>, which has a visible frame and title: "
"<placeholder-2/>"
msgstr ""
"Los widgets se ordenan dentro de widgets contenedores como marcos y "
"cuardenos de notas, en una jerarquía de widgets dentro de widgets. Algunos "
"de estos widgets contenedores, como <classname>Gtk::Grid</classname> no son "
"visibles: sólo existen para ordenar otros widgets. Aquí hay un código de "
"ejemplo que añade dos widgets <classname>Gtk::Button</classname> a un widget "
"contenedor <classname>Gtk::Box</classname>: <placeholder-1/> y aquí se "
"muestra cómo agregar el <classname>Gtk::Box</classname>, conteniendo esos "
"botones, a un <classname>Gtk::Frame</classname>, que tiene un cuadro y "
"título visibles: <placeholder-2/>"

#: C/gtkmm-tutorial-in.xml:398(para)
msgid ""
"Most of the chapters in this book deal with specific widgets. See the <link "
"linkend=\"chapter-container-widgets\">Container Widgets</link> section for "
"more details about adding widgets to container widgets."
msgstr ""
"La mayoría de los capítulos de este libro tratan de widgets específicos. "
"Consulte la sección <link linkend=\"chapter-container-widgets\">Widgets "
"contenedores</link> para obtener más detalles sobre de cómo agregar widgets "
"a widgets contenedores."

#: C/gtkmm-tutorial-in.xml:402(para)
msgid ""
"Although you can specify the layout and appearance of windows and widgets "
"with C++ code, you will probably find it more convenient to design your user "
"interfaces with <literal>Glade</literal> and load them at runtime with "
"<literal>Gtk::Builder</literal>. See the <link linkend=\"chapter-builder"
"\">Glade and Gtk::Builder</link> chapter."
msgstr ""
"Aunque se puede especificar el diseño y apariencia de las ventanas y widgets "
"con código C++, es probable que resulte más conveniente usar <literal>Glade</"
"literal> para el diseño de la interfaz de usuario y cargarlos en tiempo de "
"ejecución con <literal>Gtk::Builder</literal>. Consulte el capítulo <link "
"linkend=\"chapter-builder\">Glade y Gtk::Builder</link>."

#: C/gtkmm-tutorial-in.xml:405(para)
msgid ""
"Although <application>gtkmm</application> widget instances have lifetimes "
"and scopes just like those of other C++ classes, <application>gtkmm</"
"application> has an optional time-saving feature that you will see in some "
"of the examples. <function>Gtk::manage()</function> allows you to say that a "
"child widget is owned by the container into which you place it. This allows "
"you to <function>new</function> the widget, add it to the container and "
"forget about deleting it. You can learn more about <application>gtkmm</"
"application> memory management techniques in the <link linkend=\"chapter-"
"memory\">Memory Management chapter</link>."
msgstr ""
"A pesar de que las instancias de widgets <application>gtkmm</application> "
"tienen ámbito y duración de la misma manera que otras clases de C++, "
"<application>gtkmm</application> tiene una característica opcional para "
"ahorrar tiempo que verá en algunos de los ejemplos. <function>Gtk::manage()</"
"function> le permite decir que un widget hijo es propiedad del contenedor en "
"el que lo ubica. Esto le permite utilizar <function>new</function> en el "
"widget, añadirlo al contenedor, y olvidarse de eliminarlo. Puede aprender "
"más de las técnicas de gestión de memoria de <application>gtkmm</"
"application> en el <link linkend=\"chapter-memory\">capítulo de gestión de "
"memoria</link>."

#: C/gtkmm-tutorial-in.xml:411(title) C/gtkmm-tutorial-in.xml:763(title)
#: C/gtkmm-tutorial-in.xml:4712(title) C/gtkmm-tutorial-in.xml:5003(title)
#: C/gtkmm-tutorial-in.xml:7494(title)
msgid "Signals"
msgstr "Señales"

#
#: C/gtkmm-tutorial-in.xml:413(para)
msgid ""
"<application>gtkmm</application>, like most GUI toolkits, is <emphasis>event-"
"driven</emphasis>. When an event occurs, such as the press of a mouse "
"button, the appropriate signal will be <emphasis>emitted</emphasis> by the "
"Widget that was pressed. Each Widget has a different set of signals that it "
"can emit. To make a button click result in an action, we set up a "
"<emphasis>signal handler</emphasis> to catch the button's \"clicked\" signal."
msgstr ""
"<application>gtkmm</application>, como la mayoría de kits de herramientas de "
"la IGU, está <emphasis>dirigido por eventos</emphasis>. Cuando ocurre un "
"evento, como la pulsación de un botón del ratón sobre un widget, éste "
"emitirá la señal apropiada. Cada widget puede emitir un conjunto de señales "
"diferente. Para hacer que la pulsación de un botón resulte en una acción, "
"establecemos un <emphasis>manejador de señales</emphasis> para atrapar la "
"señal «clicked» del botón."

#: C/gtkmm-tutorial-in.xml:421(programlisting)
#, no-wrap
msgid ""
"m_button1.signal_clicked().connect( sigc::mem_fun(*this,\n"
"  &amp;HelloWorld::on_button_clicked) );"
msgstr ""
"m_button1.signal_clicked().connect( sigc::mem_fun(*this,\n"
"  &amp;HelloWorld::on_button_clicked) );"

#: C/gtkmm-tutorial-in.xml:420(para)
msgid ""
"<application>gtkmm</application> uses the libsigc++ library to implement "
"signals. Here is an example line of code that connects a Gtk::Button's "
"\"clicked\" signal with a signal handler called \"on_button_clicked\": "
"<placeholder-1/>"
msgstr ""
"<application>gtkmm</application> usa la biblioteca libsigc++ para "
"implementar señales. Aquí hay una línea de código de ejemplo que conecta una "
"señal «clicked» de Gtk::Button a un manejador de señales llamado "
"«on_button_clicked»: <placeholder-1/>"

#: C/gtkmm-tutorial-in.xml:425(para)
msgid ""
"For more detailed information about signals, see the <link linkend=\"chapter-"
"signals\">appendix</link>."
msgstr ""
"Para obtener información más detallada acerca de señales, consulte el <link "
"linkend=\"chapter-signals\">apéndice</link>."

#: C/gtkmm-tutorial-in.xml:426(para)
msgid ""
"For information about implementing your own signals rather than just "
"connecting to the existing <application>gtkmm</application> signals, see the "
"<link linkend=\"chapter-custom-signals\">appendix</link>."
msgstr ""
"Para obtener información acerca de la implementación de sus propias señales "
"en vez de sólo conectar a las señales existentes de <application>gtkmm</"
"application>, consulte el <link linkend=\"chapter-custom-signals\">apéndice</"
"link>."

#: C/gtkmm-tutorial-in.xml:432(title) C/gtkmm-tutorial-in.xml:9336(classname)
msgid "Glib::ustring"
msgstr "Glib::ustring"

#: C/gtkmm-tutorial-in.xml:433(para)
msgid ""
"You might be surprised to learn that <application>gtkmm</application> "
"doesn't use <classname>std::string</classname> in it its interfaces. Instead "
"it uses <classname>Glib::ustring</classname>, which is so similar and "
"unobtrusive that you could actually pretend that each Glib::ustring is a "
"<classname>std::string</classname> and ignore the rest of this section. But "
"read on if you want to use languages other than English in your application."
msgstr ""
"Puede sorprenderle aprender que <application>gtkmm</application> no utiliza "
"<classname>std::string</classname> en sus interfaces. En cambio, usa "
"<classname>Glib::ustring</classname>, que es tan similar y discreto que en "
"realidad puede pretender que cada Glib::ustring es un <classname>std::"
"string</classname> e ignorar el resto de esta sección. Pero siga leyendo si "
"quiere aplicar otros lenguajes además del inglés en su aplicación."

#
#: C/gtkmm-tutorial-in.xml:434(para)
msgid ""
"std::string uses 8 bit per character, but 8 bits aren't enough to encode "
"languages such as Arabic, Chinese, and Japanese. Although the encodings for "
"these languages have now been specified by the Unicode Consortium, the C and "
"C++ languages do not yet provide any standardised Unicode support. GTK+ and "
"GNOME chose to implement Unicode using UTF-8, and that's what is wrapped by "
"Glib::ustring. It provides almost exactly the same interface as std::string, "
"along with automatic conversions to and from std::string."
msgstr ""
"std::string utiliza 8 bits por carácter, pero 8 bits no son suficientes para "
"codificar lenguajes como árabe, chino y japonés. A pesar de que las "
"codificaciones de estos lenguajes ahora las ha especificado el Consorcio "
"Unicode, los lenguajes C y C++ todavía no proporcionan ningún soporte "
"Unicode estándar. GTK+ y GNOME eligen implementar Unicode usando UTF-8, y "
"eso es lo que está envuelto en Glib::ustring. Proporciona casi exactamente "
"la misma interfaz que std::string, además de conversiones automáticas desde "
"y hacia std::string."

#: C/gtkmm-tutorial-in.xml:435(para)
msgid ""
"One of the benefits of UTF-8 is that you don't need to use it unless you "
"want to, so you don't need to retrofit all of your code at once. "
"<classname>std::string</classname> will still work for 7-bit ASCII strings. "
"But when you try to localize your application for languages like Chinese, "
"for instance, you will start to see strange errors, and possible crashes. "
"Then all you need to do is start using <classname>Glib::ustring</classname> "
"instead."
msgstr ""
"Uno de los beneficios de UTF-8 es que no necesita usarlo a menos que quiera, "
"por lo que no necesita reconvertir todo su código de una vez. "
"<classname>std::string</classname> todavía funcionará para cadenas de 7 bits "
"ASCII. Pero cuando intente localizar su aplicación para lenguajes como "
"chino, por ejemplo, empezará a ver errores extraños y posibles fallos. "
"Entonces, todo lo que necesitará hacer es empezar a utilizar "
"<classname>Glib::ustring</classname> en su lugar."

#: C/gtkmm-tutorial-in.xml:436(para)
msgid ""
"Note that UTF-8 isn't compatible with 8-bit encodings like ISO-8859-1. For "
"instance, German umlauts are not in the ASCII range and need more than 1 "
"byte in the UTF-8 encoding. If your code contains 8-bit string literals, you "
"have to convert them to UTF-8 (e.g. the Bavarian greeting \"Grüß Gott\" "
"would be \"Gr\\xC3\\xBC\\xC3\\x9F Gott\")."
msgstr ""
"tenga en cuenta que UTF-8 no es compatible con codificaciones de 8 bits como "
"ISO-8859-1. Por ejemplo, las diéresis alemanas no están en el rango ASCII y "
"necesitan más de un byte en la codificación UTF-8. Si su código contiene "
"cadenas literales de 8 bits, debe convertirlas a UTF-8 (por ejemplo, el "
"saludo bávaro «Grüß Gott» sería «Gr\\xC3\\xBC\\xC3\\x9F Gott»)."

#: C/gtkmm-tutorial-in.xml:437(para)
msgid ""
"You should avoid C-style pointer arithmetic, and functions such as strlen(). "
"In UTF-8, each character might need anywhere from 1 to 6 bytes, so it's not "
"possible to assume that the next byte is another character. <classname>Glib::"
"ustring</classname> worries about the details of this for you so you can use "
"methods such as Glib::ustring::substr() while still thinking in terms of "
"characters instead of bytes."
msgstr ""
"Evite la aritmética de punteros al estilo C, y funciones como strlen(). En "
"UTF-8, cada carácter podría necesitar entre 1 y 6 bytes, por lo que no es "
"posible asumir que el próximo byte es otro carácter. <classname>Glib::"
"ustring</classname> se ocupa de estos detalles, por lo que puede usar "
"métodos como Glib::ustring::substr() y seguir pensando en términos de "
"caracteres en vez de bytes."

#: C/gtkmm-tutorial-in.xml:439(para)
msgid ""
"Unlike the Windows UCS-2 Unicode solution, this does not require any special "
"compiler options to process string literals, and it does not result in "
"Unicode executables and libraries which are incompatible with ASCII ones."
msgstr ""
"A diferencia de la solución Unicode de Windows UCS-2, esto no requiere "
"ninguna opción especial de compilación para procesar cadenas literales, y no "
"resulta en que los ejecutables y bibliotecas Unicode sean incompatibles con "
"las ASCII."

#: C/gtkmm-tutorial-in.xml:441(ulink) C/gtkmm-tutorial-in.xml:743(ulink)
#: C/gtkmm-tutorial-in.xml:841(ulink) C/gtkmm-tutorial-in.xml:856(ulink)
#: C/gtkmm-tutorial-in.xml:959(ulink) C/gtkmm-tutorial-in.xml:1013(ulink)
#: C/gtkmm-tutorial-in.xml:1030(ulink) C/gtkmm-tutorial-in.xml:1075(ulink)
#: C/gtkmm-tutorial-in.xml:1177(ulink) C/gtkmm-tutorial-in.xml:1251(ulink)
#: C/gtkmm-tutorial-in.xml:1297(ulink) C/gtkmm-tutorial-in.xml:1497(ulink)
#: C/gtkmm-tutorial-in.xml:1545(ulink) C/gtkmm-tutorial-in.xml:1593(ulink)
#: C/gtkmm-tutorial-in.xml:1681(ulink) C/gtkmm-tutorial-in.xml:1721(ulink)
#: C/gtkmm-tutorial-in.xml:1762(ulink) C/gtkmm-tutorial-in.xml:1795(ulink)
#: C/gtkmm-tutorial-in.xml:1835(ulink) C/gtkmm-tutorial-in.xml:2071(ulink)
#: C/gtkmm-tutorial-in.xml:2136(ulink) C/gtkmm-tutorial-in.xml:2173(ulink)
#: C/gtkmm-tutorial-in.xml:2240(ulink) C/gtkmm-tutorial-in.xml:2280(ulink)
#: C/gtkmm-tutorial-in.xml:2327(ulink) C/gtkmm-tutorial-in.xml:2343(ulink)
#: C/gtkmm-tutorial-in.xml:2361(ulink) C/gtkmm-tutorial-in.xml:2469(ulink)
#: C/gtkmm-tutorial-in.xml:2988(ulink) C/gtkmm-tutorial-in.xml:3199(ulink)
#: C/gtkmm-tutorial-in.xml:3227(ulink) C/gtkmm-tutorial-in.xml:3256(ulink)
#: C/gtkmm-tutorial-in.xml:3308(ulink) C/gtkmm-tutorial-in.xml:3328(ulink)
#: C/gtkmm-tutorial-in.xml:3376(ulink) C/gtkmm-tutorial-in.xml:3870(ulink)
#: C/gtkmm-tutorial-in.xml:3927(ulink) C/gtkmm-tutorial-in.xml:3938(ulink)
#: C/gtkmm-tutorial-in.xml:3965(ulink) C/gtkmm-tutorial-in.xml:3988(ulink)
#: C/gtkmm-tutorial-in.xml:4012(ulink) C/gtkmm-tutorial-in.xml:4822(ulink)
#: C/gtkmm-tutorial-in.xml:5093(ulink) C/gtkmm-tutorial-in.xml:5125(ulink)
#: C/gtkmm-tutorial-in.xml:7366(ulink)
msgid "Reference"
msgstr "Referencia"

#: C/gtkmm-tutorial-in.xml:443(para)
msgid ""
"See the <link linkend=\"chapter-internationalization\">Internationalization</"
"link> section for information about providing the UTF-8 string literals."
msgstr ""
"Para obtener más información acerca de cómo proporcionar cadenas literales "
"UTF-8, consulte la sección <link linkend=\"chapter-internationalization"
"\">Internacionalización</link>."

#: C/gtkmm-tutorial-in.xml:448(title)
msgid "Intermediate types"
msgstr "Tipos intermedios"

#: C/gtkmm-tutorial-in.xml:449(para)
msgid ""
"Some API related to gtkmm uses intermediate data containers, such as "
"<classname>Glib::StringArrayHandle</classname>, instead of a specific "
"Standard C++ container such as <classname>std::vector</classname> or "
"<classname>std::list</classname>, though <application>gtkmm</application> "
"itself now uses just <classname>std::vector</classname> since "
"<application>gtkmm</application> 3.0."
msgstr ""
"Algunas API relacionadas con gtkmm utilizan contenedores de datos "
"intermedios, como <classname>Glib::StringArrayHandle</classname>, en vez de "
"un contenedor específico estándar de C++ como <classname>std::vector</"
"classname> o <classname>std::list</classname>, a pesar de que "
"<application>gtkmm</application> en sí mismo ahora sólo usa <classname>std::"
"vector</classname> desde <application>gtkmm</application> 3.0."

#: C/gtkmm-tutorial-in.xml:452(para)
msgid ""
"<classname>Glib::StringArrayHandle</classname> or <classname>Glib::"
"ArrayHandle&lt;Glib::ustring&gt;</classname>: Use <classname>std::vector&lt;"
"Glib::ustring&gt;</classname>, <classname>std::list&lt;Glib::ustring&gt;</"
"classname>, <type>const char*[]</type>, etc."
msgstr ""
"<classname>Glib::StringArrayHandle</classname> o <classname>Glib::"
"ArrayHandle&lt;Glib::ustring&gt;</classname>: usan <classname>std::vector&lt;"
"Glib::ustring&gt;</classname>, <classname>std::list&lt;Glib::ustring&gt;</"
"classname>, <type>const char*[]</type>, etc."

#: C/gtkmm-tutorial-in.xml:453(para)
msgid ""
"<classname>Glib::ListHandle&lt;Gtk::Widget*&gt;</classname>: Use "
"<classname>std::vector&lt;Gtk::Widget*&gt;</classname>, <classname>std::"
"list&lt;Gtk::Widget*&gt;</classname>, etc."
msgstr ""
"<classname>Glib::ListHandle&lt;Gtk::Widget*&gt;</classname>: usa "
"<classname>std::vector&lt;Gtk::Widget*&gt;</classname>, <classname>std::"
"list&lt;Gtk::Widget*&gt;</classname>, etc."

#: C/gtkmm-tutorial-in.xml:454(para)
msgid ""
"<classname>Glib::SListHandle&lt;Gtk::Widget*&gt;</classname>: Use "
"<classname>std::vector&lt;Gtk::Widget*&gt;</classname>, <classname>std::"
"list&lt;Gtk::Widget*&gt;</classname>, etc."
msgstr ""
"<classname>Glib::SListHandle&lt;Gtk::Widget*&gt;</classname>: usa "
"<classname>std::vector&lt;Gtk::Widget*&gt;</classname>, <classname>std::"
"list&lt;Gtk::Widget*&gt;</classname>, etc."

#: C/gtkmm-tutorial-in.xml:450(para)
msgid ""
"You should not declare these types yourself. You should instead use whatever "
"Standard C++ container you prefer. glibmm will do the conversion for you. "
"Here are some of these intermediate types: <placeholder-1/>"
msgstr ""
"No declare estos tipos usted mismo. Utilice, en cambio, el contenedor "
"estándar C++ que prefiera. glibmm hará la conversión. Aquí hay algunos de "
"estos tipos intermedios: <placeholder-1/>"

#: C/gtkmm-tutorial-in.xml:462(title)
msgid "Mixing C and C++ APIs"
msgstr "Mezclando las API de C y C++"

#: C/gtkmm-tutorial-in.xml:463(para)
msgid ""
"You can use C APIs which do not yet have convenient C++ interfaces. It is "
"generally not a problem to use C APIs from C++, and <application>gtkmm</"
"application> helps by providing access to the underlying C object, and "
"providing an easy way to create a C++ wrapper object from a C object, "
"provided that the C API is also based on the GObject system."
msgstr ""
"Puede usar las API de C que no tengan todavía interfaces C++ convenientes. "
"Generalmente no es un problema usar las API de C desde C++, y "
"<application>gtkmm</application> le ayuda proporcionándole acceso al objeto "
"C subyacente y una forma fácil de crear un objeto C++ envoltorio desde un "
"objeto C, si la API de C también está basada en el sistema GObject."

#: C/gtkmm-tutorial-in.xml:465(para)
msgid ""
"To use a <application>gtkmm</application> instance with a C function that "
"requires a C GObject instance, use the <function>gobj()</function> function "
"to obtain a pointer to the underlying GObject instance. For instance"
msgstr ""
"Para usar una instancia de <application>gtkmm</application> con una función "
"C que requiere una instancia GObject C, use la función <function>gobj()</"
"function> para obtener un puntero a la instancia GObject subyacente. Por "
"ejemplo"

#: C/gtkmm-tutorial-in.xml:468(programlisting)
#, no-wrap
msgid ""
"\n"
"Gtk::Button* button = new Gtk::Button(\"example\");\n"
"gtk_button_do_something_new(button-&gt;gobj());\n"
msgstr ""
"\n"
"Gtk::Button* button = new Gtk::Button(\"example\");\n"
"gtk_button_do_something_new(button-&gt;gobj());\n"

#: C/gtkmm-tutorial-in.xml:474(para)
msgid ""
"To obtain a <application>gtkmm</application> instance from a C GObject "
"instance, use the Glib::wrap() function. For instance"
msgstr ""
"Para obtener una instancia <application>gtkmm</application> desde una "
"instancia C GObject, use la función Glib::wrap(). Por ejemplo"

#: C/gtkmm-tutorial-in.xml:476(programlisting)
#, no-wrap
msgid ""
"\n"
"GtkButton* cbutton = get_a_button();\n"
"Gtk::Button* button = Glib::wrap(cbutton);\n"
msgstr ""
"\n"
"GtkButton* cbutton = get_a_button();\n"
"Gtk::Button* button = Glib::wrap(cbutton);\n"

#: C/gtkmm-tutorial-in.xml:484(title)
msgid "Hello World in <application>gtkmm</application>"
msgstr "«Hola mundo» en <application>gtkmm</application>"

#: C/gtkmm-tutorial-in.xml:486(para)
msgid ""
"We've now learned enough to look at a real example. In accordance with an "
"ancient tradition of computer science, we now introduce Hello World, a la "
"<application>gtkmm</application>:"
msgstr ""
"Ahora ha aprendido lo suficiente para ver un ejemplo real. De acuerdo con "
"una antigua tradición de la informática, se introducirá la aplicación Hola "
"Mundo en <application>gtkmm</application>:"

#: C/gtkmm-tutorial-in.xml:493(para)
msgid ""
"Try to compile and run it before going on. You should see something like "
"this:"
msgstr ""
"Intente compilarla y ejecutarla antes de continuar. Debería ver algo así:"

#: C/gtkmm-tutorial-in.xml:498(title)
msgid "Hello World"
msgstr "Hello World"

#: C/gtkmm-tutorial-in.xml:504(para)
msgid ""
"Pretty thrilling, eh? Let's examine the code. First, the "
"<classname>HelloWorld</classname> class:"
msgstr ""
"Fascinante, ¿verdad? Examinemos el código. Primero, la clase "
"<classname>HelloWorld</classname>:"

#: C/gtkmm-tutorial-in.xml:509(programlisting)
#, no-wrap
msgid ""
"class HelloWorld : public Gtk::Window\n"
"{\n"
"\n"
"public:\n"
"  HelloWorld();\n"
"  virtual ~HelloWorld();\n"
"\n"
"protected:\n"
"  //Signal handlers:\n"
"  virtual void on_button_clicked();\n"
"\n"
"  //Member widgets:\n"
"  Gtk::Button m_button;\n"
"};"
msgstr ""
"class HelloWorld : public Gtk::Window\n"
"{\n"
"\n"
"public:\n"
"  HelloWorld();\n"
"  virtual ~HelloWorld();\n"
"\n"
"protected:\n"
"  //Signal handlers:\n"
"  virtual void on_button_clicked();\n"
"\n"
"  //Member widgets:\n"
"  Gtk::Button m_button;\n"
"};"

#: C/gtkmm-tutorial-in.xml:524(para)
msgid ""
"This class implements the \"Hello World\" window. It's derived from "
"<classname>Gtk::Window</classname>, and has a single <classname>Gtk::Button</"
"classname> as a member. We've chosen to use the constructor to do all of the "
"initialisation work for the window, including setting up the signals. Here "
"it is, with the comments omitted:"
msgstr ""
"Esta clase implementa la ventana «Hello World». Deriva de <classname>Gtk::"
"Window</classname> y tiene un único <classname>Gtk::Button</classname> como "
"miembro. Se eligió usar el constructor para realizar todo el trabajo de "
"inicialización de la ventana, incluyendo establecer las señales. Aquí está, "
"sin los comentarios:"

#: C/gtkmm-tutorial-in.xml:533(programlisting)
#, no-wrap
msgid ""
"HelloWorld::HelloWorld()\n"
":\n"
"  m_button (\"Hello World\")\n"
"{\n"
"  set_border_width(10);\n"
"  m_button.signal_clicked().connect(sigc::mem_fun(*this,\n"
"    &amp;HelloWorld::on_button_clicked));\n"
"  add(m_button);.\n"
"  m_button.show();\n"
"}"
msgstr ""
"HelloWorld::HelloWorld()\n"
":\n"
"  m_button (\"Hello World\")\n"
"{\n"
"  set_border_width(10);\n"
"  m_button.signal_clicked().connect(sigc::mem_fun(*this,\n"
"    &amp;HelloWorld::on_button_clicked));\n"
"  add(m_button);.\n"
"  m_button.show();\n"
"}"

#: C/gtkmm-tutorial-in.xml:544(para)
msgid ""
"Notice that we've used an initialiser statement to give the "
"<literal>m_button</literal> object the label \"Hello World\"."
msgstr ""
"Tenga en cuenta que se ha usado una declaración de inicialización para darle "
"al objeto <literal>m_button</literal> la etiqueta «Hello World»."

#: C/gtkmm-tutorial-in.xml:549(para)
msgid ""
"Next we call the Window's <methodname>set_border_width()</methodname> "
"method. This sets the amount of space between the sides of the window and "
"the widget it contains."
msgstr ""
"A continuación, llamamos al método <methodname>set_border_width()</"
"methodname> de la ventana. Esto establece el tamaño del espacio entre los "
"lados de la ventana y el widget que contiene."

#: C/gtkmm-tutorial-in.xml:555(para)
msgid ""
"We then hook up a signal handler to <literal>m_button</literal>'s "
"<literal>clicked</literal> signal. This prints our friendly greeting to "
"<literal>stdout</literal>."
msgstr ""
"Luego, se le engancha un manejador de señales a la señal <literal>clicked</"
"literal> de <literal>m_button</literal>. Esto imprime nuestro amigable "
"saludo a <literal>stdout</literal>."

#: C/gtkmm-tutorial-in.xml:560(para)
msgid ""
"Next, we use the Window's <methodname>add()</methodname> method to put "
"<literal>m_button</literal> in the Window. (<methodname>add()</methodname> "
"comes from <classname>Gtk::Container</classname>, which is described in the "
"chapter on container widgets.) The <methodname>add()</methodname> method "
"places the Widget in the Window, but it doesn't display the widget. "
"<application>gtkmm</application> widgets are always invisible when you "
"create them - to display them, you must call their <methodname>show()</"
"methodname> method, which is what we do in the next line."
msgstr ""
"A continuación usamos el método <methodname>add()</methodname> de la ventana "
"para situar el <literal>m_button</literal> en ella. (<methodname>add()</"
"methodname> deriva de <classname>Gtk::Container</classname>, que se describe "
"en el capítulo sobre widgets contenedores). El método <methodname>add()</"
"methodname> ubica al widget en la ventana, pero no lo muestra. Los widgets "
"de <application>gtkmm</application> siempre son invisibles cuando se crean: "
"para mostrarlos, debe llamar a su método <methodname>show()</methodname>, "
"que es lo que se hace en la siguiente línea."

#: C/gtkmm-tutorial-in.xml:570(para)
msgid ""
"Now let's look at our program's <function>main()</function> function. Here "
"it is, without comments:"
msgstr ""
"Ahora eche un vistazo a la función <function>main()</function> del programa. "
"Aquí está, sin comentarios:"

#: C/gtkmm-tutorial-in.xml:575(programlisting)
#, no-wrap
msgid ""
"int main(int argc, char** argv)\n"
"{\n"
"  Glib::RefPtr&lt;Gtk::Application&gt; app = Gtk::Application::create(argc, argv, \"org.gtkmm.example\");\n"
"\n"
"  HelloWorld helloworld;\n"
"  return app-&gt;run(helloworld);\n"
"}"
msgstr ""
"int main(int argc, char** argv)\n"
"{\n"
"  Glib::RefPtr&lt;Gtk::Application&gt; app = Gtk::Application::create(argc, argv, \"org.gtkmm.example\");\n"
"\n"
"  HelloWorld helloworld;\n"
"  return app-&gt;run(helloworld);\n"
"}"

#: C/gtkmm-tutorial-in.xml:583(para)
msgid ""
"First we instantiate an object stored in a <classname>RefPtr</classname> "
"smartpointer called <literal>app</literal>. This is of type <classname>Gtk::"
"Application</classname>. Every <application>gtkmm</application> program must "
"have one of these. We pass our command-line arguments to its create() "
"method. It takes the arguments it wants, and leaves you the rest, as we "
"described earlier."
msgstr ""
"Primero, se instancia un objeto almacenado en un puntero inteligente "
"<classname>RefPtr</classname> llamado <literal>app</literal>. Éste es del "
"tipo <classname>Gtk::Application</classname>. Cada programa de "
"<application>gtkmm</application> debe tener uno de estos. Le pasamos "
"nuestros argumentos de línea de comandos a su método «create()». Toma los "
"argumentos que quiere, y le deja el resto, como se ha descrito anteriormente."

#: C/gtkmm-tutorial-in.xml:590(para)
msgid ""
"Next we make an object of our <classname>HelloWorld</classname> class, whose "
"constructor takes no arguments, but it isn't visible yet. When we "
"call<methodname>Gtk::Application::run()</methodname>, giving it the "
"helloworld Window, it shows the Window and starts the <application>gtkmm</"
"application><emphasis>event loop</emphasis>. During the event loop "
"<application>gtkmm</application> idles, waiting for actions from the user, "
"and responding appropriately. When the user closes the Window, run() will "
"return, causing the final line of our main() function be to executed. The "
"application will then finish."
msgstr ""
"A continuación, se crea un objeto de la clase <classname>HelloWorld</"
"classname>, cuyo constructor no toma argumentos, pero todavía no es visible. "
"Cuando se llama a Gtk::Application::run(), pasándole la ventana "
"«helloworld», la muestra y comienza el <emphasis>bucle de eventos</emphasis> "
"de <application>gtkmm</application>. Durante el bucle, <application>gtkmm</"
"application> espera las acciones del usuario, y responde apropiadamente. "
"Cuando el usuario cierre la ventana, «run()» retornará, haciendo que la "
"última línea de nuestra función «main()» se ejecute. Entonces, la aplicación "
"finalizará."

#: C/gtkmm-tutorial-in.xml:599(title)
msgid "Changes in <application>gtkmm</application> 3"
msgstr "Cambios en <application>gtkmm</application> 3"

#: C/gtkmm-tutorial-in.xml:601(para)
msgid ""
"<application>gtkmm</application>-3.0 is a new version of the "
"<application>gtkmm</application> API that installs in parallel with the "
"older <application>gtkmm</application>-2.4 API. The last version of the "
"<application>gtkmm</application>-2.4 API was <application>gtkmm</"
"application> 2.24. <application>gtkmm</application> 3 has no major "
"fundamental differences to <application>gtkmm</application> 2 but does make "
"several small changes that were not possible while maintaining binary "
"compatibility. If you never used the <application>gtkmm</application>-2.4 "
"API then you can safely ignore this chapter."
msgstr ""
"<application>gtkmm</application>-3.0 es una versión nueva de la API "
"<application>gtkmm</application> que se instala en paralelo con la API "
"<application>gtkmm</application>-2.4, más vieja. La última versión de la API "
"<application>gtkmm</application>-2.4 fue <application>gtkmm</application> "
"2.24. <application>gtkmm</application> 3 no tiene diferencias fundamentales "
"importantes con respecto a <application>gtkmm</application> 2, pero hace "
"varios cambios pequeños que no fueron posibles mientras se mantenía la "
"compatibilidad de los binarios. Si nunca ha usado la API <application>gtkmm</"
"application>-2.4, entonces puede ignorar con seguridad este capítulo."

#: C/gtkmm-tutorial-in.xml:603(para)
msgid ""
"<application>gtkmm</application> 3's library is called "
"<literal>libgtkmm-3.0</literal> rather than <literal>libgtkmm-2.4</literal> "
"and installs its headers in a similarly-versioned directory, so your pkg-"
"config check should ask for <literal>gtkmm-3.0</literal> rather than "
"<literal>gtkmm-2.4</literal>."
msgstr ""
"La biblioteca de <application>gtkmm</application> 3 se llama "
"<literal>libgtkmm-3.0</literal>, en vez de <literal>libgtkmm-2.4</literal> e "
"instala sus archivos de cabecera en una carpeta versionada similarmente, por "
"lo que su verificación pkg-config debería buscar <literal>gtkmm-3.0</"
"literal> en vez de <literal>gtkmm-2.4</literal>."

#: C/gtkmm-tutorial-in.xml:606(para)
msgid "<application>gtkmm</application> 3 added some new classes:"
msgstr "<application>gtkmm</application> 3 añadió algunas clases nuevas:"

#: C/gtkmm-tutorial-in.xml:610(simpara)
msgid ""
"<classname>Gtk::AppChooser</classname>, <classname>Gtk::AppChooserButton</"
"classname>, <classname>Gtk::AppChooserDialog</classname> allow the user to "
"select an installed application to open a particular type of content."
msgstr ""
"<classname>Gtk::AppChooser</classname>, <classname>Gtk::AppChooserButton</"
"classname>, <classname>Gtk::AppChooserDialog</classname> permiten al usuario "
"seleccionar una aplicación instalada para abrir un determinado tipo de "
"contenido."

#: C/gtkmm-tutorial-in.xml:612(simpara)
msgid ""
"<classname>Gtk::Grid</classname> is a new container widget that will "
"eventually replace <classname>Gtk::Box</classname>. It arranges its children "
"according to properties of those children rather than its own layout details."
msgstr ""
"<classname>Gtk::Grid</classname> es un widget contenedor nuevo que "
"eventualmente remplazará a <classname>Gtk::Box</classname>. Ordena a sus "
"hijos de acuerdo a sus propiedades en lugar de sus propios detalles de "
"disposición."

#: C/gtkmm-tutorial-in.xml:613(simpara)
msgid ""
"<classname>Gtk::Switch</classname> displays On/Off states more explictly "
"than <classname>Gtk::CheckBox</classname>. It may be useful, for instance, "
"when allowing users to activate hardware."
msgstr ""
"<classname>Gtk::Switch</classname> muestra los estados Encendido/Apagado más "
"explícitamente que <classname>Gtk::CheckBox</classname>. Puede ser útil, por "
"ejemplo, al permitir a los usuarios activar hardware."

#: C/gtkmm-tutorial-in.xml:616(para)
msgid ""
"<application>gtkmm</application> 3 also made several small changes to the "
"API, which you will probably encounter when porting code that used "
"<application>gtkmm</application>-2.4. Here is a short list:"
msgstr ""
"<application>gtkmm</application> 3 también hizo varios cambios pequeños a la "
"API, que probablemente encontrará cuando porte código que usaba "
"<application>gtkmm</application>-2.4. Aquí hay una lista corta:"

#: C/gtkmm-tutorial-in.xml:621(simpara)
msgid ""
"<classname>Gtk::CellLayout</classname>, used by <classname>Gtk::IconView</"
"classname>, <classname>Gtk::TreeView::Column</classname> and <classname>Gtk::"
"ComboBox</classname>, now has a <classname>Gtk::CellArea</classname> which "
"can be used to specify more details of how the <classname>CellRenderer</"
"classname>s are arranged and aligned."
msgstr ""
"<classname>Gtk::CellLayout</classname>, usada por <classname>Gtk::IconView</"
"classname>, <classname>Gtk::TreeView::Column</classname> y <classname>Gtk::"
"ComboBox</classname> ahora tiene una <classname>Gtk::CellArea</classname>, "
"que puede usarse para especificar más detalles acerca de cómo las "
"<classname>CellRenderer</classname> se ordenan y alinean."

#: C/gtkmm-tutorial-in.xml:623(simpara)
msgid ""
"Gtk::ComboBox now derives from CellLayout, allowing easier layout and "
"alignment of its <classname>Gtk::CellRenderer</classname>s."
msgstr ""
"Gtk::ComboBox ahora deriva de CellLayout, permitiendo una disposición y "
"alineación más fácil de sus <classname>Gtk::CellRenderer</classname>."

#: C/gtkmm-tutorial-in.xml:625(simpara)
msgid ""
"<classname>Gtk::Adjustment</classname> and <classname>IconSet</classname> "
"and <classname>Gdk::Cursor</classname> are now used via <classname>Glib::"
"RefPtr</classname>."
msgstr ""
"<classname>Gtk::Adjustment</classname>, <classname>IconSet</classname> y "
"<classname>Gdk::Cursor</classname> se usan ahora a través de "
"<classname>Glib::RefPtr</classname>."

#: C/gtkmm-tutorial-in.xml:627(simpara)
msgid ""
"<classname>Gtk::Box</classname>, <classname>Gtk::ButtonBox</classname>, "
"<classname>Gtk::IconView</classname>, <classname>Gtk::Paned</classname>, "
"<classname>Gtk::ProgressBar</classname>, <classname>Gtk::ScaleButton</"
"classname>, <classname>Gtk::Scrollbar</classname> and <classname>Gtk::"
"Separator</classname> now derive from <classname>Gtk::Orientable</"
"classname>, allowing their orientation (vertical or horizontal) to be "
"specified without requiring the use of a derived class such as "
"<classname>Gtk::HBox</classname>."
msgstr ""
"<classname>Gtk::Box</classname>, <classname>Gtk::ButtonBox</classname>, "
"<classname>Gtk::IconView</classname>, <classname>Gtk::Paned</classname>, "
"<classname>Gtk::ProgressBar</classname>, <classname>Gtk::ScaleButton</"
"classname>, <classname>Gtk::Scrollbar</classname> y <classname>Gtk::"
"Separator</classname> ahora derivan de <classname>Gtk::Orientable</"
"classname>, permitiendo especificar su orientación (vertical u horizontal) "
"sin requerir el uso de una clase derivada como <classname>Gtk::HBox</"
"classname>."

# Esta mal el inglés, «instead of having their won...» debería ser «their own...».
# Nicolás.
#: C/gtkmm-tutorial-in.xml:630(simpara)
msgid ""
"<classname>Gtk::IconView</classname>, <classname>Gtk::TextView</classname>, "
"<classname>Gtk::TreeView</classname> and other widgets derive from "
"Scrollable instead of having their own methods such as "
"<methodname>get_vadjustment()</methodname> and instead of having their own "
"set_scroll_adjustments signal."
msgstr ""
"<classname>Gtk::IconView</classname>, <classname>Gtk::TextView</classname>, "
"<classname>Gtk::TreeView</classname> y otros widgets derivan de Scrollable "
"en vez de tener sus propios métodos como <methodname>get_vadjustment()</"
"methodname> y su propia señal set_scroll_adjustments."

#: C/gtkmm-tutorial-in.xml:632(simpara)
msgid ""
"<classname>Gtk::Style</classname> and <classname>Gtk::Rc</classname> were "
"removed, replaced by <classname>Gtk::StyleContext</classname>, and "
"<classname>Gtk::StyleProvider</classname>s, such as <classname>Gtk::"
"CssProvider</classname>."
msgstr ""
"<classname>Gtk::Style</classname> y <classname>Gtk::Rc</classname> se "
"quitaron y se reemplazaron por <classname>Gtk::StyleContext</classname>, y "
"<classname>Gtk::StyleProvider</classname>, así como <classname>Gtk::"
"CssProvider</classname>."

#: C/gtkmm-tutorial-in.xml:634(simpara)
msgid ""
"Widget::on_expose_event() was replaced by Widget::on_draw(), which assumes "
"that cairomm is used for drawing, via the provided <classname>Cairo::"
"Context</classname> and does not require you to call <methodname>Cairo::"
"Context::clip()</methodname>."
msgstr ""
"Widget::on_expose_event() se reemplazó por Widget::on_draw(), que asume que "
"cairomm se usa para dibujar, a través del <classname>Cairo::Context</"
"classname> provisto y no requiere que llame a <methodname>Cairo::Context::"
"clip()</methodname>."

#: C/gtkmm-tutorial-in.xml:636(simpara)
msgid ""
"<classname>Gdk::RGBA</classname> replaces <classname>Color</classname>, "
"adding an alpha component for opacity. <classname>Colormap</classname> was "
"removed, along with its awkward use to allocate colors."
msgstr ""
"<classname>Gdk::RGBA</classname> reemplaza a <classname>Color</classname>, "
"añadiendo un componente alfa para la opacidad. <classname>Colormap</"
"classname> se eliminó, junto con su molesto uso para asignar colores."

#: C/gtkmm-tutorial-in.xml:638(simpara)
msgid ""
"<classname>Gdk::Pixmap</classname> and <classname>Gdk::Bitmap</classname> "
"were removed in favour of <classname>Gdk::Pixbuf</classname>."
msgstr ""
"<classname>Gdk::Pixmap</classname> y <classname>Gdk::Bitmap</classname> se "
"eliminaron en favor de <classname>Gdk::Pixbuf</classname>."

#: C/gtkmm-tutorial-in.xml:640(simpara)
msgid ""
"<classname>Gdk::Drawable</classname> was removed, with its methods moving "
"into <classname>Gdk::Window</classname>."
msgstr ""
"<classname>Gdk::Drawable</classname> se quitó, y sus métodos se movieron a "
"<classname>Gdk::Window</classname>."

#: C/gtkmm-tutorial-in.xml:642(simpara)
msgid ""
"We now use std::vector in several methods instead of the intermediate "
"*Handle types to make the API clearer."
msgstr ""
"Ahora se usa std::vector en muchos métodos en vez de los tipos intermedios "
"*Handle para hacer a la API más clara."

#: C/gtkmm-tutorial-in.xml:647(para)
msgid ""
"All deprecated API was removed in <application>gtkmm</application> 3.0, "
"though there will be new deprecations in future versions."
msgstr ""
"Toda la API obsoleta se quitó en <application>gtkmm</application> 3.0, sin "
"embargo, se marcarán más partes como obsoletas en versiones futuras."

#: C/gtkmm-tutorial-in.xml:649(para)
msgid ""
"As a first step to porting your source code to <application>gtkmm</"
"application>-3.0; you should probably ensure that your application builds "
"with the deprecated <application>gtkmm</application>-2.4; API disabled, by "
"defining macro such as GTK_DISABLE_DEPRECATED. There are some autotools "
"macros that can help with this by defining them optionally at build time. "
"See the <ulink url=\"https://live.gnome.org/gtkmm/PortingToGtkmm3\">gtkmm 3 "
"porting wiki page</ulink> for more details."
msgstr ""
"Como un primer paso para portar su código fuente a <application>gtkmm</"
"application>-3.0, probablemente deba asegurarse de que su aplicación se "
"construye con la API obsoleta <application>gtkmm</application>-2.4 "
"desactivada, definiendo una macro como GTK_DISABLE_DEPRECATED. Hay algunas "
"macros de autotools que le pueden ayudar con esto mediante su definición "
"opcional en tiempo de construcción. Consulte la <ulink url=\"https://live."
"gnome.org/gtkmm/PortingToGtkmm3\">página de la wiki de portar de gtkmm 3</"
"ulink> para obtener más detalles."

#: C/gtkmm-tutorial-in.xml:654(title)
msgid "Buttons"
msgstr "Botones"

#: C/gtkmm-tutorial-in.xml:656(para)
msgid "<application>gtkmm</application> provides four basic types of buttons:"
msgstr ""
"<application>gtkmm</application> proporciona cuatro tipos básicos de botones:"

#: C/gtkmm-tutorial-in.xml:663(term)
msgid "Push-Buttons"
msgstr "Pulsadores"

#: C/gtkmm-tutorial-in.xml:665(para)
msgid ""
"<ulink url=\"http://developer.gnome.org/gtkmm/unstable/classGtk_1_1Button."
"html\"><classname>Gtk::Button</classname></ulink>. Standard buttons, usually "
"marked with a label or picture. Pushing one triggers an action. See the "
"<link linkend=\"sec-pushbuttons\">Button</link> section."
msgstr ""
"<ulink url=\"http://developer.gnome.org/gtkmm/unstable/classGtk_1_1Button."
"html\"><classname>Gtk::Button</classname></ulink>. Botones estándar, "
"normalmente marcados con una etiqueta o imagen. Presionar uno desencadena "
"una acción. Consulte la sección <link linkend=\"sec-pushbuttons\">botón</"
"link>."

#: C/gtkmm-tutorial-in.xml:672(term)
msgid "Toggle buttons"
msgstr "Botones conmutables"

#: C/gtkmm-tutorial-in.xml:674(para)
msgid ""
"<ulink url=\"http://developer.gnome.org/gtkmm/unstable/"
"classGtk_1_1ToggleButton.html\"><classname>Gtk::ToggleButton</classname></"
"ulink>. Unlike a normal Button, which springs back up, a ToggleButton stays "
"down until you press it again. It might be useful as an on/off switch. See "
"the <link linkend=\"sec-toggle-buttons\">ToggleButton</link> section."
msgstr ""
"<ulink url=\"http://developer.gnome.org/gtkmm/unstable/"
"classGtk_1_1ToggleButton.html\"><classname>Gtk::ToggleButton</classname></"
"ulink>. A diferencia de un botón normal, que baja y sube en la misma "
"pulsación, un botón conmutable se queda abajo hasta que lo vuelve a "
"presionar. Puede ser útil como conmutador de encendido/apagado. Consulte la "
"sección <link linkend=\"sec-toggle-buttons\">botón conmutador</link>."

#: C/gtkmm-tutorial-in.xml:682(term)
msgid "Checkboxes"
msgstr "Casillas de verificación"

#: C/gtkmm-tutorial-in.xml:684(para)
msgid ""
"<ulink url=\"http://developer.gnome.org/gtkmm/unstable/"
"classGtk_1_1CheckButton.html\"><classname>Gtk::CheckButton</classname></"
"ulink>. These act like ToggleButtons, but show their state in small squares, "
"with their label at the side. They should be used in most situations which "
"require an on/off setting. See the <link linkend=\"sec-checkboxes"
"\">CheckBox</link> section."
msgstr ""
"<ulink url=\"http://developer.gnome.org/gtkmm/unstable/"
"classGtk_1_1CheckButton.html\"><classname>Gtk::CheckButton</classname></"
"ulink>. Estos actúan como botones conmutadores, pero muestran su estado en "
"pequeños cuadrados, con su etiqueta a un lado. Los puede usar en la mayoría "
"de las situaciones que requieren una configuración de encendido/apagado. "
"Consulte la sección<link linkend=\"sec-checkboxes\">casilla de verificación</"
"link>."

#: C/gtkmm-tutorial-in.xml:694(term)
msgid "Radio buttons"
msgstr "Botones de radio"

#: C/gtkmm-tutorial-in.xml:696(para)
msgid ""
"<ulink url=\"http://developer.gnome.org/gtkmm/unstable/"
"classGtk_1_1RadioButton.html\"><classname>Gtk::RadioButton</classname></"
"ulink>. Named after the station selectors on old car radios, these buttons "
"are used in groups for options which are mutually exclusive. Pressing one "
"causes all the others in its group to turn off. They are similar to "
"CheckBoxes (a small widget with a label at the side), but usually look "
"different. See the <link linkend=\"sec-radio-buttons\">RadioButton</link> "
"section."
msgstr ""
"<ulink url=\"http://developer.gnome.org/gtkmm/unstable/"
"classGtk_1_1RadioButton.html\"><classname>Gtk::RadioButton</classname></"
"ulink>. Su nombre proviene de los selectores de estación en las antiguas "
"radios de coches. Estos botones se usan en grupos para opciones que se "
"excluyen mutuamente. Pulsar uno de ellos hace que los otros botones de su "
"grupo se apaguen. Son similares a las casillas de verificación (un pequeño "
"widget con una etiqueta a un lado), pero normalmente se ven diferentes. "
"Consulte la sección <link linkend=\"sec-radio-buttons\">botón de radio</"
"link>."

#: C/gtkmm-tutorial-in.xml:710(para)
msgid ""
"Note that, due to GTK+'s theming system, the appearance of these widgets "
"will vary. In the case of checkboxes and radio buttons, they may vary "
"considerably."
msgstr ""
"Tenga en cuenta que, debido a sistema de tema de GTK+, las apariencia de "
"estos widgets variará. En el caso de las casillas y de los botones de radio, "
"variará considerablemente."

#: C/gtkmm-tutorial-in.xml:717(title)
msgid "Button"
msgstr "Botón"

#: C/gtkmm-tutorial-in.xml:719(title)
msgid "Constructors"
msgstr "Constructores"

#: C/gtkmm-tutorial-in.xml:721(para)
msgid ""
"There are two ways to create a Button. You can specify a label string in the "
"<classname>Gtk::Button</classname> constructor, or set it later with "
"<methodname>set_label()</methodname>."
msgstr ""
"Hay dos maneras de crear un botón. Puede especificar una etiqueta en el "
"constructor de <classname>Gtk::Button</classname>, o establecerla más tarde "
"con <methodname>set_label()</methodname>."

#: C/gtkmm-tutorial-in.xml:727(para)
msgid ""
"To define an accelerator key for keyboard navigation, place an underscore "
"before one of the label's characters and specify <literal>true</literal> for "
"the optional <literal>mnemonic</literal> parameter. For instance:"
msgstr ""
"Para definir un atajo para la navegación por teclado, ponga un guión bajo "
"antes de uno de los caracteres y especifique <literal>true</literal> para el "
"parámetro opcional <literal>mnemonic</literal>. Por ejemplo:"

#: C/gtkmm-tutorial-in.xml:729(programlisting)
#, no-wrap
msgid "Gtk::Button* pButton = new Gtk::Button(\"_Something\", true);"
msgstr "Gtk::Button* pButton = new Gtk::Button(\"_Something\", true);"

#: C/gtkmm-tutorial-in.xml:733(programlisting)
#, no-wrap
msgid "Gtk::Button* pButton = new Gtk::Button(Gtk::Stock::OK);"
msgstr "Gtk::Button* pButton = new Gtk::Button(Gtk::Stock::OK);"

#: C/gtkmm-tutorial-in.xml:731(para)
msgid ""
"Wherever possible you should use Stock items, to ensure consistency with "
"other applications, and to improve the appearance of your applications by "
"using icons. For instance, <placeholder-1/> This will use standard text, in "
"all languages, with standard keyboard accelerators, with a standard icon."
msgstr ""
"Siempre que sea posible, debe usar elementos del almacén («stock»), para "
"asegurar la consistencia con otras aplicaciones, y mejorar la apariencia de "
"sus aplicaciones mediante los iconos. Por ejemplo, <placeholder-1/>. Esto "
"usará texto estándar, en todos los lenguajes, con atajos estándar, con un "
"icono estándar."

#: C/gtkmm-tutorial-in.xml:737(para)
msgid ""
"<classname>Gtk::Button</classname> is also a container so you could put any "
"other widget, such as a <classname>Gtk::Image</classname> into it."
msgstr ""
"<classname>Gtk::Button</classname> también es un contenedor, por lo que "
"puede poner otro widget, como un <classname>Gtk::Image</classname> dentro de "
"él."

#: C/gtkmm-tutorial-in.xml:746(title) C/gtkmm-tutorial-in.xml:858(title)
#: C/gtkmm-tutorial-in.xml:963(title) C/gtkmm-tutorial-in.xml:1122(title)
#: C/gtkmm-tutorial-in.xml:1179(title) C/gtkmm-tutorial-in.xml:1501(title)
#: C/gtkmm-tutorial-in.xml:1571(title) C/gtkmm-tutorial-in.xml:1595(title)
#: C/gtkmm-tutorial-in.xml:1626(title) C/gtkmm-tutorial-in.xml:1683(title)
#: C/gtkmm-tutorial-in.xml:1723(title) C/gtkmm-tutorial-in.xml:1764(title)
#: C/gtkmm-tutorial-in.xml:1798(title) C/gtkmm-tutorial-in.xml:1838(title)
#: C/gtkmm-tutorial-in.xml:2103(title) C/gtkmm-tutorial-in.xml:2139(title)
#: C/gtkmm-tutorial-in.xml:2175(title) C/gtkmm-tutorial-in.xml:2242(title)
#: C/gtkmm-tutorial-in.xml:2282(title) C/gtkmm-tutorial-in.xml:3873(title)
#: C/gtkmm-tutorial-in.xml:3941(title) C/gtkmm-tutorial-in.xml:3968(title)
#: C/gtkmm-tutorial-in.xml:3991(title) C/gtkmm-tutorial-in.xml:4015(title)
#: C/gtkmm-tutorial-in.xml:4188(title) C/gtkmm-tutorial-in.xml:4332(title)
#: C/gtkmm-tutorial-in.xml:4407(title) C/gtkmm-tutorial-in.xml:4479(title)
#: C/gtkmm-tutorial-in.xml:4544(title) C/gtkmm-tutorial-in.xml:4784(title)
#: C/gtkmm-tutorial-in.xml:5329(title) C/gtkmm-tutorial-in.xml:5809(title)
#: C/gtkmm-tutorial-in.xml:5858(title) C/gtkmm-tutorial-in.xml:6437(title)
#: C/gtkmm-tutorial-in.xml:6506(title) C/gtkmm-tutorial-in.xml:7143(title)
#: C/gtkmm-tutorial-in.xml:7202(title) C/gtkmm-tutorial-in.xml:7963(title)
msgid "Example"
msgstr "Ejemplo"

#: C/gtkmm-tutorial-in.xml:748(para)
msgid "This example creates a button with a picture and a label."
msgstr "Este ejemplo crea un botón con una imagen y una etiqueta."

#: C/gtkmm-tutorial-in.xml:753(title)
msgid "buttons example"
msgstr "ejemplo de botones"

#: C/gtkmm-tutorial-in.xml:765(para)
msgid ""
"The <classname>Gtk::Button</classname> widget has the following signals, but "
"most of the time you will just handle the <literal>clicked</literal> signal:"
msgstr ""
"El widget <classname>Gtk::Button</classname> tiene las siguientes señales, "
"pero la mayor parte del tiempo sólo manejara la señal <literal>clicked</"
"literal>:"

#: C/gtkmm-tutorial-in.xml:773(literal)
msgid "pressed"
msgstr "pressed"

#: C/gtkmm-tutorial-in.xml:775(para)
msgid "Emitted when the button is pressed."
msgstr "Emitida cuando se pulsa el botón."

#: C/gtkmm-tutorial-in.xml:781(literal)
msgid "released"
msgstr "released"

#: C/gtkmm-tutorial-in.xml:783(para)
msgid "Emitted when the button is released."
msgstr "Emitida cuando se suelta el botón."

#: C/gtkmm-tutorial-in.xml:789(literal)
msgid "clicked"
msgstr "clicked"

#: C/gtkmm-tutorial-in.xml:791(para)
msgid "Emitted when the button is pressed and released."
msgstr "Emitida cuando el botón se pulsa y se suelta."

#: C/gtkmm-tutorial-in.xml:797(literal)
msgid "enter"
msgstr "enter"

#: C/gtkmm-tutorial-in.xml:799(para)
msgid "Emitted when the mouse pointer moves over the button's window."
msgstr ""
"Emitida cuando se mueve el puntero del ratón sobre el botón de la ventana."

#: C/gtkmm-tutorial-in.xml:805(literal)
msgid "leave"
msgstr "leave"

#: C/gtkmm-tutorial-in.xml:807(para)
msgid "Emitted when the mouse pointer leaves the button's window."
msgstr "Emitida cuando el puntero del ratón sale del botón de la ventana."

#: C/gtkmm-tutorial-in.xml:819(title)
msgid "ToggleButton"
msgstr "Botón Conmutable"

#: C/gtkmm-tutorial-in.xml:821(para)
msgid ""
"<classname>ToggleButton</classname>s are like normal <classname>Button</"
"classname>s, but when clicked they remain activated, or pressed, until "
"clicked again."
msgstr ""
"Los <classname>ToggleButton</classname> son como los <classname>Button</"
"classname> normales, pero cuando se pulsan quedan activados, o presionados, "
"hasta que se vuelvan a pulsar."

#: C/gtkmm-tutorial-in.xml:823(para)
msgid ""
"To retrieve the state of the <classname>ToggleButton</classname>, you can "
"use the <methodname>get_active()</methodname> method. This returns "
"<literal>true</literal> if the button is \"down\". You can also set the "
"toggle button's state, with <methodname>set_active()</methodname>. Note "
"that, if you do this, and the state actually changes, it causes the \"clicked"
"\" signal to be emitted. This is usually what you want."
msgstr ""
"Para recuperar el estado de un <classname>ToggleButton</classname>, puede "
"usar el método <methodname>get_active()</methodname>. Esto devuelve "
"<literal>true</literal> si el botón está «abajo». También puede establecer "
"el estado del botón conmutador con <methodname>set_active()</methodname>. "
"Tenga en cuenta que, si hace esto, y el estado efectivamente cambia, hace "
"que se emita la señal «clicked». Esto normalmente será lo que quiera."

#: C/gtkmm-tutorial-in.xml:830(para)
msgid ""
"You can use the <methodname>toggled()</methodname> method to toggle the "
"button, rather than forcing it to be up or down: This switches the button's "
"state, and causes the <literal>toggled</literal> signal to be emitted."
msgstr ""
"Puede usar el método <methodname>toggled()</methodname> para conmutar el "
"botón, en vez de forzarlo a estar arriba o abajo: esto conmuta el estado del "
"botón, y hace que se emita la señal <literal>toggled</literal>."

#: C/gtkmm-tutorial-in.xml:835(para)
msgid ""
"<classname>Gtk::ToggleButton</classname> is most useful as a base class for "
"the <classname>Gtk::CheckButton</classname> and <classname>Gtk::RadioButton</"
"classname> classes."
msgstr ""
"<classname>Gtk::ToggleButton</classname> es más útil como clase base para "
"las clases <classname>Gtk::CheckButton</classname> y <classname>Gtk::"
"RadioButton</classname>."

#: C/gtkmm-tutorial-in.xml:846(title) C/gtkmm-tutorial-in.xml:861(title)
msgid "CheckButton"
msgstr "Casilla de verificación"

#: C/gtkmm-tutorial-in.xml:848(para)
msgid ""
"<classname>Gtk::CheckButton</classname> inherits from <classname>Gtk::"
"ToggleButton</classname>. The only real difference between the two is "
"<classname>Gtk::CheckButton</classname>'s appearance. You can check, set, "
"and toggle a checkbox using the same member methods as for <classname>Gtk::"
"ToggleButton</classname>."
msgstr ""
"<classname>Gtk::CheckButton</classname> hereda de <classname>Gtk::"
"ToggleButton</classname>. La única diferencia real entre ambos es la "
"apariencia de <classname>Gtk::CheckButton</classname>. Puede verificar, "
"establecer, y conmutar una casilla de verificación utilizando los mismos "
"métodos miembro que para <classname>Gtk::ToggleButton</classname>."

#: C/gtkmm-tutorial-in.xml:873(title) C/gtkmm-tutorial-in.xml:970(title)
msgid "RadioButton"
msgstr "Botón de radio"

#: C/gtkmm-tutorial-in.xml:875(para)
msgid ""
"Like checkboxes, radio buttons also inherit from <classname>Gtk::"
"ToggleButton</classname>, but these work in groups, and only one RadioButton "
"in a group can be selected at any one time."
msgstr ""
"Al igual que las casillas de verificación, los botones de radio también "
"heredan de <classname>Gtk::ToggleButton</classname>, pero trabajan en "
"grupos, y sólo se puede seleccionar un un botón de radio en un grupo a la "
"vez."

#: C/gtkmm-tutorial-in.xml:881(title)
msgid "Groups"
msgstr "Grupos"

#: C/gtkmm-tutorial-in.xml:882(para)
msgid ""
"There are two ways to set up a group of radio buttons. The first way is to "
"create the buttons, and set up their groups afterwards. Only the first two "
"constructors are used. In the following example, we make a new window class "
"called <classname>RadioButtons</classname>, and then put three radio buttons "
"in it:"
msgstr ""
"Hay dos maneras de establecer un grupo de botones de radio. La primera "
"manera es crear los botones, y establecer sus grupos luego. Sólo los dos "
"primeros constructores se usan. En el siguiente ejemplo, se crea una clase "
"de ventana nueva llamada <classname>RadioButtons</classname> y luego se "
"ubican tres botones de radio en ella:"

#: C/gtkmm-tutorial-in.xml:890(programlisting)
#, no-wrap
msgid ""
"class RadioButtons : public Gtk::Window\n"
"{\n"
"public:\n"
"    RadioButtons();\n"
"\n"
"protected:\n"
"    Gtk::RadioButton m_rb1, m_rb2, m_rb3;\n"
"};\n"
"\n"
"RadioButtons::RadioButtons()\n"
"  : m_rb1(\"button1\"),\n"
"    m_rb2(\"button2\"),\n"
"    m_rb3(\"button3\")\n"
"{\n"
"    Gtk::RadioButton::Group group = m_rb1.get_group();\n"
"    m_rb2.set_group(group);\n"
"    m_rb3.set_group(group);\n"
"}"
msgstr ""
"class RadioButtons : public Gtk::Window\n"
"{\n"
"public:\n"
"    RadioButtons();\n"
"\n"
"protected:\n"
"    Gtk::RadioButton m_rb1, m_rb2, m_rb3;\n"
"};\n"
"\n"
"RadioButtons::RadioButtons()\n"
"  : m_rb1(\"button1\"),\n"
"    m_rb2(\"button2\"),\n"
"    m_rb3(\"button3\")\n"
"{\n"
"    Gtk::RadioButton::Group group = m_rb1.get_group();\n"
"    m_rb2.set_group(group);\n"
"    m_rb3.set_group(group);\n"
"}"

#: C/gtkmm-tutorial-in.xml:908(para)
msgid ""
"We told <application>gtkmm</application> to put all three "
"<classname>RadioButton</classname>s in the same group by obtaining the group "
"with <methodname>get_group()</methodname> and using <methodname>set_group()</"
"methodname> to tell the other <classname>RadioButton</classname>s to share "
"that group."
msgstr ""
"Se indicó a <application>gtkmm</application> que colocase los tres "
"<classname>RadioButton</classname> en el mismo grupo obteniéndolo con "
"<methodname>get_group()</methodname> y usando <methodname>set_group()</"
"methodname> para indicarle a los otros <classname>RadioButton</classname> "
"que compartan ese grupo."

#: C/gtkmm-tutorial-in.xml:917(programlisting)
#, no-wrap
msgid "m_rb2.set_group(m_rb1.get_group()); //doesn't work"
msgstr "m_rb2.set_group(m_rb1.get_group()); //doesn't work"

#: C/gtkmm-tutorial-in.xml:915(para)
msgid ""
"Note that you can't just do <placeholder-1/> because the group is modified "
"by <methodname>set_group()</methodname> and therefore non-const."
msgstr ""
"Tenga en cuenta que no puede simplemente hacer <placeholder-1/> porque se "
"modifica al grupo mediante <methodname>set_group()</methodname>, y por lo "
"tanto, no es constante."

#: C/gtkmm-tutorial-in.xml:923(para)
msgid ""
"The second way to set up radio buttons is to make a group first, and then "
"add radio buttons to it. Here's an example:"
msgstr ""
"La segunda manera de establecer botones de radio es hacer primero un grupo y "
"luego añadirle los botones a él. Aquí hay un ejemplo:"

#: C/gtkmm-tutorial-in.xml:927(programlisting)
#, no-wrap
msgid ""
"class RadioButtons : public Gtk::Window\n"
"{\n"
"public:\n"
"    RadioButtons();\n"
"};\n"
"\n"
"RadioButtons::RadioButtons()\n"
"{\n"
"    Gtk::RadioButton::Group group;\n"
"    Gtk::RadioButton *m_rb1 = Gtk::manage(\n"
"      new Gtk::RadioButton(group,\"button1\"));\n"
"    Gtk::RadioButton *m_rb2 = manage(\n"
"      new Gtk::RadioButton(group,\"button2\"));\n"
"      Gtk::RadioButton *m_rb3 = manage(\n"
"        new Gtk::RadioButton(group,\"button3\"));\n"
"}"
msgstr ""
"class RadioButtons : public Gtk::Window\n"
"{\n"
"public:\n"
"    RadioButtons();\n"
"};\n"
"\n"
"RadioButtons::RadioButtons()\n"
"{\n"
"    Gtk::RadioButton::Group group;\n"
"    Gtk::RadioButton *m_rb1 = Gtk::manage(\n"
"      new Gtk::RadioButton(group,\"button1\"));\n"
"    Gtk::RadioButton *m_rb2 = manage(\n"
"      new Gtk::RadioButton(group,\"button2\"));\n"
"      Gtk::RadioButton *m_rb3 = manage(\n"
"        new Gtk::RadioButton(group,\"button3\"));\n"
"}"

#: C/gtkmm-tutorial-in.xml:944(para)
msgid ""
"We made a new group by simply declaring a variable, <literal>group</"
"literal>, of type <classname>Gtk::RadioButton::Group</classname>. Then we "
"made three radio buttons, using a constructor to make each of them part of "
"<literal>group</literal>."
msgstr ""
"Se creó un grupo nuevo simplemente declarando una variable, <literal>group</"
"literal>, del tipo <classname>Gtk::RadioButton::Group</classname>. Luego, se "
"hicieron tres botones de radio, usando un constructor para hacer que cada "
"uno sea parte de <literal>group</literal>."

#: C/gtkmm-tutorial-in.xml:952(title) C/gtkmm-tutorial-in.xml:1451(title)
#: C/gtkmm-tutorial-in.xml:4655(title)
msgid "Methods"
msgstr "Métodos"

#: C/gtkmm-tutorial-in.xml:953(para)
msgid ""
"<classname>RadioButtons</classname> are \"off\" when created; this means "
"that when you first make a group of them, they will all be off. Don't forget "
"to turn one of them on using <methodname>set_active()</methodname>:"
msgstr ""
"Los <classname>RadioButtons</classname> están «apagados» cuando se crean; "
"esto significa que cuando hace un grupo de ellos, primero estarán todos "
"apagados. No olvide encender uno de ellos usando <methodname>set_active()</"
"methodname>:"

#: C/gtkmm-tutorial-in.xml:964(para)
msgid ""
"The following example demonstrates the use of <classname>RadioButton</"
"classname>s:"
msgstr ""
"El siguiente ejemplo muestra el uso de <classname>RadioButton</classname>:"

#: C/gtkmm-tutorial-in.xml:986(title) C/gtkmm-tutorial-in.xml:1133(title)
msgid "Range Widgets"
msgstr "Widgets de Rango"

#: C/gtkmm-tutorial-in.xml:988(para)
msgid ""
"<classname>Gtk::Scale</classname> and <classname>Gtk::Scrollbar</classname> "
"both inherit from <classname>Gtk::Range</classname> and share much "
"functionality. They contain a \"trough\" and a \"slider\" (sometimes called "
"a \"thumbwheel\" in other GUI environments). Dragging the slider with the "
"pointer moves it within the trough, while clicking in the trough advances "
"the slider towards the location of the click, either completely, or by a "
"designated amount, depending on which mouse button is used. This should be "
"familiar scrollbar behaviour."
msgstr ""
"<classname>Gtk::Scale</classname> y <classname>Gtk::Scrollbar</classname> "
"heredan de <classname>Gtk::Range</classname> y comparten mucha "
"funcionalidad. Contienen un «canal» y un «control deslizante» (a veces "
"llamado «rueda» en otros entornos IGU). Deslizar el control con el puntero "
"lo mueve dentro del canal, mientras que pulsar en el canal avanza al control "
"deslizante hacia la ubicación de la pulsación, completamente o en una "
"cantidad definida dependiendo del botón que se use. Este es el "
"comportamiento normal de las barras de desplazamiento."

# La dejo fuzzy... me parece que hay mucha confusión entre clases que están entre etiquetas <classname> (sin traducir) y las que no (traducidas).
# Nicolás.
#: C/gtkmm-tutorial-in.xml:999(para)
msgid ""
"As will be explained in the <link linkend=\"chapter-adjustment\">Adjustment</"
"link> section, all Range widgets are associated with a "
"<classname>Adjustment</classname> object. To change the lower, upper, and "
"current values used by the widget you need to use the methods of its "
"<classname>Adjustment</classname>, which you can get with the "
"<methodname>get_adjustment()</methodname> method. The <classname>Range</"
"classname> widgets' default constructors create an <classname>Adjustment</"
"classname> automatically, or you can specify an existing "
"<classname>Adjustment</classname>, maybe to share it with another widget. "
"See the <link linkend=\"chapter-adjustment\">Adjustments</link> section for "
"further details."
msgstr ""
"Como se explicará en la sección <link linkend=\"chapter-adjustment\">ajuste</"
"link>, todos los widgets del rango están asociados a un objeto "
"<classname>Adjustment</classname>. Para cambiar los valores inferior, "
"superior y actual del widget debe usar los métodos de su "
"<classname>Adjustment</classname>, que puede obtenerlos con el método "
"<methodname>get_adjustment()</methodname>. Los constructores predeterminados "
"de los widgets <classname>Range</classname> crean un <classname>Adjustment</"
"classname> automáticamente, o puede especificar un <classname>Adjustment</"
"classname> existente, tal vez para compartirlo con otro widget. Consulte la "
"sección <link linkend=\"chapter-adjustment\">ajuste</link> para obtener más "
"detalles."

#: C/gtkmm-tutorial-in.xml:1016(title)
msgid "Scrollbar Widgets"
msgstr "Widgets de barras de desplazamiento"

#: C/gtkmm-tutorial-in.xml:1018(para)
msgid ""
"These are standard scrollbars. They should be used only to scroll another "
"widget, such as, a <classname>Gtk::Entry</classname>, or a <classname>Gtk::"
"Viewport</classname>, though it's usually easier to use the <classname>Gtk::"
"ScrolledWindow</classname> widget in most cases."
msgstr ""
"Estas son las barras de desplazamiento estándar. Sólo se deben ser usar para "
"desplazar otro widget, como un <classname>Gtk::Entry</classname>, o un "
"<classname>Gtk::Viewport</classname>, aunque generalmente es más fácil usar "
"el widget <classname>Gtk::ScrolledWindow</classname> en la mayoría de los "
"casos."

#: C/gtkmm-tutorial-in.xml:1025(para)
msgid ""
"The orientation of a <classname>Gtk::Scrollbar</classname> can be either "
"horizontal or vertical."
msgstr ""
"La orientación de una <classname>Gtk::Scrollbar</classname> puede ser "
"horizontal o vertical."

#: C/gtkmm-tutorial-in.xml:1035(title)
msgid "Scale Widgets"
msgstr "Widgets de Escala"

#: C/gtkmm-tutorial-in.xml:1037(para)
msgid ""
"<classname>Gtk::Scale</classname> widgets (or \"sliders\") allow the user to "
"visually select and manipulate a value within a specific range. You might "
"use one, for instance, to adjust the magnification level on a zoomed preview "
"of a picture, or to control the brightness of a colour, or to specify the "
"number of minutes of inactivity before a screensaver takes over the screen."
msgstr ""
"Los widgets <classname>Gtk::Scale</classname> (o «deslizadores») le permiten "
"al usuario seleccionar y manipular visualmente un valor dentro de un rango "
"específico. Puede usar uno, por ejemplo, para ajustar el nivel de ampliación "
"en una previsualización de una imagen, o para controlar el brillo de un "
"color, o especificar la cantidad de minutos de inactividad antes de que "
"aparezca un salvapantallas."

#: C/gtkmm-tutorial-in.xml:1046(para)
msgid ""
"As with <classname>Scrollbar</classname>s, the orientation can be either "
"horizontal or vertical. The default constructor creates an "
"<classname>Adjustment</classname> with all of its values set to "
"<literal>0.0</literal>. This isn't useful so you will need to set some "
"<classname>Adjustment</classname> details to get meaningful behaviour."
msgstr ""
"Al igual que con las <classname>Scrollbar</classname>s, la orientación puede "
"ser horizontal o vertical. El constructor predeterminado crea un "
"<classname>Adjustment</classname> con todos sus valores establecidos a "
"<literal>0.0</literal>. Esto no es útil, por lo que necesitará establecer "
"algunos detalles del <classname>Adjustment</classname> para obtener un "
"comportamiento significativo."

#: C/gtkmm-tutorial-in.xml:1055(title)
msgid "Useful methods"
msgstr "Métodos útiles"

#: C/gtkmm-tutorial-in.xml:1057(para)
msgid ""
"<classname>Scale</classname> widgets can display their current value as a "
"number next to the trough. By default they show the value, but you can "
"change this with the <methodname>set_draw_value()</methodname> method."
msgstr ""
"Los widgets <classname>Scale</classname> pueden mostrar su valor actual como "
"un número junto al canal. De manera predeterminada muestran el valor, pero "
"puede cambiar esto con el método <methodname>set_draw_value()</methodname>."

#: C/gtkmm-tutorial-in.xml:1063(para)
msgid ""
"The value displayed by a scale widget is rounded to one decimal point by "
"default, as is the <literal>value</literal> field in its <classname>Gtk::"
"Adjustment</classname>. You can change this with the <methodname>set_digits()"
"</methodname> method."
msgstr ""
"El valor mostrado en un widget de escala se redondea a un dígito decimal de "
"manera predeterminada, como es el campo <literal>value</literal> en su "
"<classname>Gtk::Adjustment</classname>. Puede cambiar esto con el método "
"<methodname>set_digits()</methodname>."

#: C/gtkmm-tutorial-in.xml:1070(para)
msgid ""
"Also, the value can be drawn in different positions relative to the trough, "
"specified by the <methodname>set_value_pos()</methodname> method."
msgstr ""
"Además, pueden dibujar el valor en diferentes posiciones relativas al canal, "
"especificadas por el método <methodname>set_value_pos()</methodname>."

#: C/gtkmm-tutorial-in.xml:1081(title)
msgid "Update Policies"
msgstr "Políticas de Actualización"

#: C/gtkmm-tutorial-in.xml:1093(para)
msgid ""
"<literal>Gtk::UPDATE_CONTINUOUS</literal> - This is the default. The "
"<literal>value_changed</literal> signal is emitted continuously, i.e. "
"whenever the slider is moved by even the tiniest amount."
msgstr ""
"<literal>Gtk::UPDATE_CONTINUOUS</literal>: esta es la predeterminada. Se "
"emite la señal <literal>value_changed</literal> continuamente, es decir, "
"siempre que el deslizador se mueva aunque sea sólo un poco."

#: C/gtkmm-tutorial-in.xml:1101(para)
msgid ""
"<literal>Gtk::UPDATE_DISCONTINUOUS</literal> - The <literal>value_changed</"
"literal> signal is only emitted once the slider has stopped moving and the "
"user has released the mouse button."
msgstr ""
"<literal>Gtk::UPDATE_DISCONTINUOUS</literal>: la señal "
"<literal>value_changed</literal> sólo se emite una vez que el deslizador se "
"detuvo y el usuario soltó el botón del ratón."

#: C/gtkmm-tutorial-in.xml:1109(para)
msgid ""
"<literal>Gtk::UPDATE_DELAYED</literal> - The <literal>value_changed</"
"literal> signal is emitted when the user releases the mouse button, or if "
"the slider stops moving for a short period of time."
msgstr ""
"<literal>Gtk::UPDATE_DELAYED</literal>: la señal <literal>value_changed</"
"literal> se emite cuando el usuario suelta el botón del ratón, o si el "
"deslizador deja de moverse por un corto período de tiempo."

#: C/gtkmm-tutorial-in.xml:1083(para)
msgid ""
"The <emphasis>update policy</emphasis> of a <classname>Range</classname> "
"widget defines at what points during user interaction it will change the "
"<literal>value</literal> field of its <classname>Gtk::Adjustment</classname> "
"and emit the <literal>value_changed</literal> signal. The update policies, "
"set with the <methodname>set_update_policy()</methodname> method, are: "
"<placeholder-1/>"
msgstr ""
"La <emphasis>política de actualización</emphasis> de un widget "
"<classname>Range</classname> define en qué puntos durante la interacción del "
"usuario cambiará el campo <literal>value</literal> de su <classname>Gtk::"
"Adjustment</classname> y se emitirá la señal <literal>value_changed</"
"literal>. Las políticas de actualización, que se establecen con el método "
"<methodname>set_update_policy()</methodname>, son: <placeholder-1/>"

#: C/gtkmm-tutorial-in.xml:1124(para)
msgid ""
"This example displays a window with three range widgets all connected to the "
"same adjustment, along with a couple of controls for adjusting some of the "
"parameters mentioned above and in the section on adjustments, so you can see "
"how they affect the way these widgets work for the user."
msgstr ""
"Este ejemplo muestra una ventana con tres widgets de rango, todos conectados "
"al mismo ajuste, junto con un par de controles para establecer algunos de "
"los parámetros mencionados anteriormente y en la sección de ajustes, para "
"que pueda ver cómo afectan la manera en la que estos widgets funcionan para "
"el usuario."

#: C/gtkmm-tutorial-in.xml:1146(title)
msgid "Miscellaneous Widgets"
msgstr "Widgets varios"

#: C/gtkmm-tutorial-in.xml:1149(title) C/gtkmm-tutorial-in.xml:1187(title)
msgid "Label"
msgstr "Etiqueta"

#: C/gtkmm-tutorial-in.xml:1151(para)
msgid ""
"Labels are the main method of placing non-editable text in windows, for "
"instance to place a title next to a <classname>Entry</classname> widget. You "
"can specify the text in the constructor, or later with the "
"<methodname>set_text()</methodname> or <methodname>set_markup()</methodname> "
"methods."
msgstr ""
"Las etiquetas son el método principal para poner texto no editable en "
"ventanas, por ejemplo, para poner un título junto a un widget "
"<classname>Entry</classname>. Puede especificar el texto en el constructor, "
"o más tarde con los métodos <methodname>set_text()</methodname> o "
"<methodname>set_markup()</methodname>."

#: C/gtkmm-tutorial-in.xml:1158(para)
msgid ""
"The width of the label will be adjusted automatically. You can produce multi-"
"line labels by putting line breaks (\"\\n\") in the label string."
msgstr ""
"El ancho de la etiqueta se ajusta automáticamente. Puede producir etiquetas "
"con varias líneas poniendo saltos de línea («\\n») en la cadena de la "
"etiqueta."

#: C/gtkmm-tutorial-in.xml:1162(para)
msgid ""
"The label text can be justified using the <methodname>set_justify()</"
"methodname> method. The widget is also capable of word-wrapping, which can "
"be activated with <methodname>set_line_wrap()</methodname>."
msgstr ""
"El texto de la etiqueta se puede justificar usando el método "
"<methodname>set_justify()</methodname>. El widget también es capaz de "
"ajustar el texto, lo que se puede activar con <methodname>set_line_wrap()</"
"methodname>."

#: C/gtkmm-tutorial-in.xml:1168(para)
msgid ""
"Gtk::Label support some simple formatting, for instance allowing you to make "
"some text bold, colored, or larger. You can do this by providing a string to "
"<methodname>set_markup()</methodname>, using the <ulink url=\"http://"
"developer.gnome.org/pango/unstable/PangoMarkupFormat.html\">Pango Markup "
"syntax</ulink>. For instance, <code> &lt;b&gt;bold text&lt;/b&gt; and &lt;"
"s&gt;strikethrough text&lt;/s&gt; </code> ."
msgstr ""
"Gtk::Label soporta formateado simple, por ejemplo, permitiéndole hacer que "
"el texto se vea en negrita, coloreado, o más grande. Puede hacer esto "
"proporcionándole una cadena a <methodname>set_markup()</methodname>, usando "
"la <ulink url=\"http://developer.gnome.org/pango/unstable/PangoMarkupFormat."
"html\">sintaxis de marcado de Pango</ulink>. Por ejemplo, <code> &lt;b&gt;"
"texto en negrita&lt;/b&gt; y &lt;s&gt;texto tachado&lt;/s&gt; </code> ."

#: C/gtkmm-tutorial-in.xml:1180(para)
msgid ""
"Below is a short example to illustrate these functions. This example makes "
"use of the Frame widget to better demonstrate the label styles. (The Frame "
"widget is explained in the <link linkend=\"sec-frame\">Frame</link> section.)"
msgstr ""
"Abajo se muestra un ejemplo corto que ilustra estas funciones. Este ejemplo "
"hace uso del widget «Marco» para demostrar mejor los estilos de etiquetas. "
"(El widget «Marco» se explica en la sección <link linkend=\"sec-frame"
"\">Marco</link>)."

#: C/gtkmm-tutorial-in.xml:1200(title) C/gtkmm-tutorial-in.xml:1261(title)
msgid "Entry"
msgstr "Entry"

#: C/gtkmm-tutorial-in.xml:1203(title)
msgid "Simple Use"
msgstr "Uso simple"

#: C/gtkmm-tutorial-in.xml:1205(para)
msgid ""
"Entry widgets allow the user to enter text. You can change the contents with "
"the <methodname>set_text()</methodname> method, and read the current "
"contents with the <methodname>get_text()</methodname> method."
msgstr ""
"Los widgets de «entry» le permiten al usuario introducir texto. Puede "
"cambiar el contenido con el método <methodname>set_text()</methodname>, y "
"leer el contenido actual con el método <methodname>get_text()</methodname>."

#: C/gtkmm-tutorial-in.xml:1210(para)
msgid ""
"Occasionally you might want to make an <classname>Entry</classname> widget "
"read-only. This can be done by passing <literal>false</literal> to the "
"<methodname>set_editable()</methodname> method."
msgstr ""
"Ocasionalmente querrá definir un widget <classname>Entry</classname> como "
"sólo lectura. Esto se puede hacer pasándole <literal>false</literal> al "
"método <methodname>set_editable()</methodname>."

#: C/gtkmm-tutorial-in.xml:1216(para)
msgid ""
"For the input of passwords, passphrases and other information you don't want "
"echoed on the screen, calling <methodname>set_visibility()</methodname> with "
"<literal>false</literal> will cause the text to be hidden."
msgstr ""
"Para introducir contraseñas, frases de paso, y otra información que no "
"quiera que aparezca en la pantalla, llamar a <methodname>set_visibility</"
"methodname> con <literal>false</literal> hará que el texto permanezca oculto."

#: C/gtkmm-tutorial-in.xml:1222(para)
#, fuzzy
#| msgid ""
#| "You might want to be notified whenever the user types in a text entry "
#| "widget. <classname>Gtk::Entry</classname> provides two signals, "
#| "<literal>activate</literal> and <literal>changed</literal>, for just this "
#| "purpose. <literal>activate</literal> is emitted when the user presses the "
#| "enter key in a text-entry widget; <literal>changed</literal> is emitted "
#| "when the text in the widget changes. You can use these, for instance, to "
#| "validate or filter the text the user types."
msgid ""
"You might want to be notified whenever the user types in a text entry "
"widget. <classname>Gtk::Entry</classname> provides the <literal>changed</"
"literal> signal for this purpose. It is emitted when the text in the widget "
"changes. You can use it, for instance, to validate or filter the text the "
"user types."
msgstr ""
"Quizás quiera recibir una notificación cuando el usuario escriba en un "
"widget de entrada de texto. <classname>Gtk::Entry</classname> proporciona "
"dos señales, <literal>activate</literal> y <literal>changed</literal>, sólo "
"para este propósito. Cuando el usuario pulsa la tecla «Intro» en un widget "
"de entrada de texto se emite <literal>activate</literal>; cuando el texto en "
"el widget cambia se emite <literal>changed</literal>. Puede usarlas para, "
"por ejemplo, validar o filtrar el texto que el usuario introduce."

#: C/gtkmm-tutorial-in.xml:1229(para)
msgid ""
"The <literal>changed</literal> signal is not emitted when the user presses "
"the Enter key. If a pressed Enter key signals that the user has finished "
"entering text, you probably want to be notified. For this purpose, use the "
"<literal>key_press_event</literal> signal that <classname>Gtk::Entry</"
"classname> inherits from <classname>Gtk::Widget</classname>. Moving the "
"keyboard focus to another widget may also signal that the user has finished "
"entering text. The <literal>focus_out_event</literal> signal can notify you "
"when that happens. The <link linkend=\"sec-comboboxentry\">ComboBox with an "
"Entry</link> section contains example programs that use these signals."
msgstr ""

#: C/gtkmm-tutorial-in.xml:1241(para)
msgid ""
"If you pass <literal>true</literal> to the <methodname>set_activates_default"
"()</methodname> method, pressing Enter in the <classname>Gtk::Entry</"
"classname> will activate the default widget for the window containing the "
"<classname>Gtk::Entry</classname>. This is especially useful in dialog "
"boxes. The default widget is usually one of the dialog buttons, which e.g. "
"will close the dialog box. To set a widget as the default widget, use "
"<methodname>Gtk::Widget::set_can_default()</methodname> and <methodname>Gtk::"
"Widget::grab_default()</methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:1253(title)
msgid "Simple Entry Example"
msgstr "Ejemplo simple de «Entry»"

#: C/gtkmm-tutorial-in.xml:1254(para)
msgid ""
"This example uses <classname>Gtk::Entry</classname>. It also has two "
"<classname>CheckButton</classname>s, with which you can toggle the editable "
"and visible flags."
msgstr ""
"Este ejemplo usa <classname>Gtk::Entry</classname>. También tiene dos "
"<classname>CheckButton</classname>, con los que puede conmutar las opciones "
"«editable» y «visible»."

#: C/gtkmm-tutorial-in.xml:1274(title) C/gtkmm-tutorial-in.xml:1308(title)
msgid "Entry Completion"
msgstr "Completado de «Entry»"

#: C/gtkmm-tutorial-in.xml:1275(para)
msgid ""
"A <classname>Entry</classname> widget can offer a drop-down list of pre-"
"existing choices based on the first few characters typed by the user. For "
"instance, a search dialog could suggest text from previous searches."
msgstr ""
"Un widget <classname>Entry</classname> puede ofrecer una lista desplegable "
"de opciones pre-existentes sobre la base de los primeros caracteres escritos "
"por el usuario. Por ejemplo, un cuadro de diálogo de búsqueda podría sugerir "
"el texto de búsquedas anteriores."

#: C/gtkmm-tutorial-in.xml:1280(para)
msgid ""
"To enable this functionality, you must create a <classname>EntryCompletion</"
"classname> object, and provide it to the <classname>Entry</classname> widget "
"via the <methodname>set_completion()</methodname> method."
msgstr ""
"Para activar esta funcionalidad, cree un objeto <classname>EntryCompletion</"
"classname> y proporcióneselo al widget <classname>Entry</classname> mediante "
"el método <methodname>set_completion()</methodname>."

#: C/gtkmm-tutorial-in.xml:1285(para)
msgid ""
"The <classname>EntryCompletion</classname> may use a <classname>TreeModel</"
"classname> containing possible entries, specified with <methodname>set_model"
"()</methodname>. You should then call <methodname>set_text_column()</"
"methodname> to specify which of your model columns should be used to match "
"possible text entries."
msgstr ""
"El <classname>EntryCompletion</classname> puede usar un "
"<classname>TreeModel</classname> que contenga las entradas posibles, "
"especificadas por <methodname>set_model()</methodname>. Luego llame a "
"<methodname>set_text_column()</methodname> para especificar cuál de las "
"columnas de su modelo debe usarse para las posibles entradas de texto."

#: C/gtkmm-tutorial-in.xml:1291(para)
#, fuzzy
msgid ""
"Alternatively, if a complete list of possible entries would be too large or "
"too inconvenient to generate, a callback slot may instead be specified with "
"<methodname>set_match_func()</methodname>. This is also useful if you wish "
"to match on a part of the string other than the start."
msgstr ""
"Alternativamente, si una lista completa de entradas posibles fuera muy larga "
"o demasiado incómoda para generar, puede especificar en su lugar un espacio "
"para una retrollamada con <methodname>set_match_func()</methodname>. Esto "
"también es útil si no desea usar el principio de la cadena."

#: C/gtkmm-tutorial-in.xml:1299(title)
msgid "Entry Completion Example"
msgstr "Ejemplo de completado de «Entry»"

#: C/gtkmm-tutorial-in.xml:1300(para)
msgid ""
"This example creates a <classname>Gtk::EntryCompletion</classname> and "
"associates it with a <classname>Gtk::Entry</classname> widget. The "
"completion uses a <classname>Gtk::TreeModel</classname> of possible entries, "
"and some additional actions."
msgstr ""
"Este ejemplo crea un <classname>Gtk::EntryCompletion</classname> y lo asocia "
"a un widget <classname>Gtk::Entry</classname>. Se usan un <classname>Gtk::"
"TreeModel</classname> de entradas posibles para el completado y algunas "
"acciones adicionales."

#: C/gtkmm-tutorial-in.xml:1320(title)
msgid "Entry Icons"
msgstr "Iconos de «Entry»"

#: C/gtkmm-tutorial-in.xml:1321(para)
msgid ""
"An <classname>Entry</classname> widget can show an icon at the start or end "
"of the text area. The icon can be specifed by methods such as "
"<methodname>set_icon_from_pixbuf()</methodname> or "
"<methodname>set_icon_from_stock()</methodname>. An application can respond "
"to the user pressing the icon by handling the <methodname>signal_icon_press</"
"methodname> signal."
msgstr ""
"Un widget <classname>Entry</classname> puede mostrar un icono al principio o "
"al final del área del texto. Este icono se puede especificar por métodos "
"como <methodname>set_icon_from_pixbuf()</methodname> o "
"<methodname>set_icon_from_stock()</methodname>. Una aplicación puede "
"responder al usuario que pulsa el icono manejando la señal "
"<methodname>signal_icon_press</methodname>."

#: C/gtkmm-tutorial-in.xml:1328(title)
msgid "Entry Icon Example"
msgstr "Ejemplo de icono de «Entry»"

#: C/gtkmm-tutorial-in.xml:1329(para)
msgid ""
"This example shows a <classname>Gtk::Entry</classname> widget with a stock "
"search icon, and prints text to the terminal when the icon is pressed."
msgstr ""
"Este ejemplo muestra un widget <classname>Gtk::Entry</classname> con un "
"icono de búsqueda del almacén, e imprime texto en la terminal cuando se "
"pulsa el icono."

#: C/gtkmm-tutorial-in.xml:1335(title)
msgid "Entry with Icon"
msgstr "«Entry» con icono"

#: C/gtkmm-tutorial-in.xml:1347(title)
msgid "Entry Progress"
msgstr "«Entry» de progreso"

#: C/gtkmm-tutorial-in.xml:1348(para)
msgid ""
"An <classname>Entry</classname> widget can show a progress bar inside the "
"text area, under the entered text. The progress bar will be shown if the "
"<methodname>set_progress_fraction()</methodname> or "
"<methodname>set_progress_pulse_step()</methodname> methods are called."
msgstr ""
"Un widget <classname>Entry</classname> puede mostrar una barra de progreso "
"dentro del área del texto, bajo el texto introducido. La barra de progreso "
"se mostrará si se llama a los métodos <methodname>set_progress_fraction()</"
"methodname> o <methodname>set_progress_pulse_step()</methodname>."

#: C/gtkmm-tutorial-in.xml:1353(title)
msgid "Entry Progress Example"
msgstr "Ejemplo de «Entry» de progreso"

#: C/gtkmm-tutorial-in.xml:1354(para)
msgid ""
"This example shows a <classname>Gtk::Entry</classname> widget with a "
"progress bar."
msgstr ""
"Este ejemplo muestra un widget <classname>Gtk::Entry</classname> con una "
"barra de progreso."

#: C/gtkmm-tutorial-in.xml:1360(title)
msgid "Entry with Progress Bar"
msgstr "«Entry» con barra de progreso"

#: C/gtkmm-tutorial-in.xml:1374(title) C/gtkmm-tutorial-in.xml:1508(title)
msgid "SpinButton"
msgstr "SpinButton"

#: C/gtkmm-tutorial-in.xml:1376(para)
msgid ""
"A <classname>SpinButton</classname> allows the user to select a value from a "
"range of numeric values. It has an Entry widget with up and down arrow "
"buttons at the side. Clicking the buttons causes the value to 'spin' up and "
"down across the range of possible values. The <classname>Entry</classname> "
"widget may also be used to enter a value directly."
msgstr ""
"Un <classname>SpinButton</classname> permite al usuario seleccionar un valor "
"de un rango de valores numéricos. Este tiene un widget «Entry» con botones "
"de flechas en un lado. Al pulsar en los botones hace que el valor del «spin» "
"suba y baje en toda la gama de valores posibles. El widget <classname>Entry</"
"classname> también puede utilizarse para introducir un valor directamente."

#: C/gtkmm-tutorial-in.xml:1384(para)
msgid ""
"The value can have an adjustable number of decimal places, and the step size "
"is configurable. <classname>SpinButton</classname>s have an 'auto-repeat' "
"feature as well: holding down one of the arrows can optionally cause the "
"value to change more quickly the longer the arrow is held down."
msgstr ""
"El valor puede tener un número ajustable de decimales, y el tamaño del paso "
"es configurable. Los <classname>SpinButton</classname> también tienen una "
"característica de «auto-repetición»: mantener pulsada una de las flechas "
"puede, opcionalmente, causar que el valor cambie más rápidamente cuanto más "
"tiempo se mantenga pulsada la flecha."

#: C/gtkmm-tutorial-in.xml:1399(para)
msgid "<literal>value</literal>: value for the Spin Button"
msgstr "<literal>value</literal>: valor del «SpinButton»"

#: C/gtkmm-tutorial-in.xml:1405(para)
msgid "<literal>lower</literal>: lower range value"
msgstr "<literal>lower</literal>: valor mínimo del rango"

#: C/gtkmm-tutorial-in.xml:1411(para)
msgid "<literal>upper</literal>: upper range value"
msgstr "<literal>upper</literal>: valor máximo del rango"

#: C/gtkmm-tutorial-in.xml:1416(para)
msgid ""
"<literal>step_increment</literal>: value to increment/decrement when "
"pressing mouse button 1 on a button"
msgstr ""
"<literal>step_increment</literal>: valor en el que se incrementa/decrementa "
"cuando se presiona un botón con el botón 1 del ratón"

#: C/gtkmm-tutorial-in.xml:1423(para)
msgid ""
"<literal>page_increment</literal>: value to increment/decrement when "
"pressing mouse button 2 on a button"
msgstr ""
"<literal>page_increment</literal>: valor en el que se incrementa/decrementa "
"cuando se presiona un botón con el botón 2 del ratón"

#: C/gtkmm-tutorial-in.xml:1430(para)
msgid "<literal>page_size</literal>: unused"
msgstr "<literal>page_size</literal>: no se usa"

#: C/gtkmm-tutorial-in.xml:1391(para)
msgid ""
"<classname>SpinButton</classname>s use an <link linkend=\"chapter-adjustment"
"\">Adjustment</link> object to hold information about the range of values. "
"These Adjustment attributes are used by the Spin Button like so: "
"<placeholder-1/>"
msgstr ""
"Los <classname>SpinButton</classname> usan un objeto <link linkend=\"chapter-"
"adjustment\">Adjustment</link> para mantener la información del rango de "
"valores. Los «SpinButton» usan estos atributos del «Adjustment» así: "
"<placeholder-1/>"

#: C/gtkmm-tutorial-in.xml:1438(para)
msgid ""
"Additionally, mouse button 3 can be used to jump directly to the "
"<literal>upper</literal> or <literal>lower</literal> values."
msgstr ""
"Además, el botón 3 del ratón se puede usar para saltar directamente a los "
"valores <literal>upper</literal> o <literal>lower</literal>."

#: C/gtkmm-tutorial-in.xml:1443(para)
msgid ""
"The <classname>SpinButton</classname> can create a default "
"<classname>Adjustment</classname>, which you can access via the "
"<methodname>get_adjustment()</methodname> method, or you can specify an "
"existing <classname>Adjustment</classname> in the constructor."
msgstr ""
"El <classname>SpinButton</classname> puede crear un <classname>Adjustment</"
"classname> predeterminado, al que puede acceder mediante el método "
"<methodname>get_adjustment()</methodname>, o puede especificar un "
"<classname>Adjustment</classname> existente en el constructor."

#: C/gtkmm-tutorial-in.xml:1453(para)
msgid ""
"The number of decimal places can be altered using the <methodname>set_digits"
"()</methodname> method."
msgstr ""
"La cantidad de lugares decimales se puede alterar usando el método "
"<methodname>set_digits()</methodname>."

#: C/gtkmm-tutorial-in.xml:1458(para)
msgid ""
"You can set the spinbutton's value using the <methodname>set_value()</"
"methodname> method, and retrieve it with <methodname>get_value()</"
"methodname>."
msgstr ""
"Puede establecer el valor del «spinbutton» usando el método "
"<methodname>set_value()</methodname>, y obtenerlo con <methodname>get_value()"
"</methodname>."

#: C/gtkmm-tutorial-in.xml:1463(para)
msgid ""
"The <methodname>spin()</methodname> method 'spins' the "
"<classname>SpinButton</classname>, as if one of its arrows had been clicked. "
"You need to specify a <classname>Gtk::SpinType</classname> to specify the "
"direction or new position."
msgstr ""
"El método <methodname>spin()</methodname> «gira» al <classname>SpinButton</"
"classname>, como si se hubiera presionado una de sus flechas. Debe "
"especificar un <classname>Gtk::SpinType</classname> para especificar la "
"dirección de su posición nueva. "

#: C/gtkmm-tutorial-in.xml:1470(para)
msgid ""
"To prevent the user from typing non-numeric characters into the entry box, "
"pass <literal>true</literal> to the <methodname>set_numeric()</methodname> "
"method."
msgstr ""
"Para que el usuario no pueda introducir caracteres no numéricos al cuadro de "
"entrada, pásele <literal>true</literal> al método <methodname>set_numeric()</"
"methodname>."

#: C/gtkmm-tutorial-in.xml:1475(para)
msgid ""
"To make the <classname>SpinButton</classname> 'wrap' between its upper and "
"lower bounds, use the <methodname>set_wrap()</methodname> method."
msgstr ""
"Para que el <classname>SpinButton</classname> «salte» entre sus límites "
"superior e inferior, use el método <methodname>set_wrap()</methodname>."

#: C/gtkmm-tutorial-in.xml:1480(para)
msgid ""
"To force it to snap to the nearest <literal>step_increment</literal>, use "
"<methodname>set_snap_to_ticks()</methodname>."
msgstr ""
"Para forzarlo a encajar en el <literal>step_increment</literal> más cercano, "
"use <methodname>set_snap_to_ticks()</methodname>."

#: C/gtkmm-tutorial-in.xml:1485(para)
msgid ""
"You can modify the update policy using the <methodname>set_update_policy()</"
"methodname> method, specifying either <literal>Gtk::UPDATE_ALWAYS</literal> "
"or <literal>Gtk::UPDATE_IF_VALID</literal>. <literal>Gtk::UPDATE_ALWAYS</"
"literal> causes the <classname>SpinButton</classname> to ignore errors "
"encountered while converting the text in the entry box to a numeric value. "
"This setting also therefore allows the <classname>SpinButton</classname> to "
"accept non-numeric values. You can force an immediate update using the "
"<methodname>update()</methodname> method."
msgstr ""
"Puede modificar la política de actualización usando el método "
"<methodname>set_update_policy()</methodname>, especificando <literal>Gtk::"
"UPDATE_ALWAYS</literal> o <literal>Gtk::UPDATE_IF_VALID</literal>. "
"<literal>Gtk::UPDATE_ALWAYS</literal> hace que el <classname>SpinButton</"
"classname> ignore los errores encontrados cuando se convierte el texto en el "
"cuadro de entrada a un valor numérico. Esta opción, por lo tanto, también le "
"permite al <classname>SpinButton</classname> aceptar valores no numéricos. "
"Puede forzar a una actualización inmediata usando el método "
"<methodname>update()</methodname>."

#: C/gtkmm-tutorial-in.xml:1503(para)
msgid "Here's an example of a <classname>SpinButton</classname> in action:"
msgstr "Aquí hay un ejemplo de un <classname>SpinButton</classname> en acción:"

#: C/gtkmm-tutorial-in.xml:1521(title) C/gtkmm-tutorial-in.xml:1574(title)
msgid "ProgressBar"
msgstr "ProgressBar"

#: C/gtkmm-tutorial-in.xml:1523(para)
msgid ""
"Progress bars are used to show the status of an ongoing operation. For "
"instance, a <classname>ProgressBar</classname> can show how much of a task "
"has been completed."
msgstr ""
"Las barras de progreso se usan para mostrar el estado de una operación en "
"curso. Por ejemplo, una <classname>ProgressBar</classname> puede mostrar "
"cuánto se ha completado de una tarea."

#: C/gtkmm-tutorial-in.xml:1529(para)
msgid ""
"To change the value shown, use the <methodname>set_fraction()</methodname> "
"method, passing a double between 0 and 1 to provide the new percentage."
msgstr ""
"Para cambiar el valor mostrado, use el método <methodname>set_fraction()</"
"methodname>, pasándole un «double» entre 0 y 1 para proporcionarle el "
"porcentaje nuevo."

#: C/gtkmm-tutorial-in.xml:1534(para)
msgid ""
"where <literal>percentage</literal> is a number, from 0 to 1, indicating "
"what fraction of the bar should be filled."
msgstr ""
"donde <literal>percentage</literal> es un número, de 0 a 1, indicando qué "
"fracción de la barra debe llenarse."

#: C/gtkmm-tutorial-in.xml:1539(para)
msgid ""
"A <classname>ProgressBar</classname>is horizontal and left-to-right by "
"default, but you can change it to a vertical progress bar by using the "
"<methodname>set_orientation()</methodname> method."
msgstr ""
"Una <classname>ProgressBar</classname> es horizontal y de izquierda a "
"derecha de manera predeterminada, pero se puede cambiar a una barra de "
"progreso vertical mediante el uso del método <methodname>set_orientation()</"
"methodname>."

#: C/gtkmm-tutorial-in.xml:1548(title)
msgid "Activity Mode"
msgstr "Modo de actividad"

#: C/gtkmm-tutorial-in.xml:1549(para)
msgid ""
"Besides indicating the amount of progress that has occured, the progress bar "
"can also be used to indicate that there is some activity; this is done by "
"placing the progress bar in <emphasis>activity mode</emphasis>. In this "
"mode, the progress bar displays a small rectangle which moves back and "
"forth. Activity mode is useful in situations where the progress of an "
"operation cannot be calculated as a value range (e.g., receiving a file of "
"unknown length)."
msgstr ""
"Además de indicar la cantidad de progreso que se ha completado, la barra de "
"progreso también puede usarse para indicar que ocurre actividad; esto se "
"realiza poniendo la barra en <emphasis>modo de actividad</emphasis>. En este "
"modo, la barra de progreso muestra un pequeño rectángulo que se mueve hacia "
"adelante y atrás. El modo de actividad es útil en las situaciones en las que "
"el progreso de una operación no se puede calcular como un rango de valores "
"(por ejemplo, cuando se recibe un archivo de tamaño desconocido)."

#: C/gtkmm-tutorial-in.xml:1559(para)
msgid ""
"To do this, you need to call the <methodname>pulse()</methodname> method at "
"regular intervals. You can also choose the step size, with the "
"<methodname>set_pulse_step()</methodname> method."
msgstr ""
"Para hacer esto, debe llamar al método <methodname>pulse()</methodname> a "
"intervalos regulares. También puede elegir el tamaño del paso con el método "
"<methodname>set_pulse_step()</methodname>."

#: C/gtkmm-tutorial-in.xml:1565(para)
msgid ""
"When in continuous mode, the progress bar can also display a configurable "
"text string within its trough, using the <methodname>set_text()</methodname> "
"method."
msgstr ""
"En el modo continuo, la barra de progreso también puede mostrar una cadena "
"de texto configurable en su canal, usando el método <methodname>set_text()</"
"methodname>."

#: C/gtkmm-tutorial-in.xml:1588(title) C/gtkmm-tutorial-in.xml:1598(title)
msgid "InfoBar"
msgstr "InfoBar"

#: C/gtkmm-tutorial-in.xml:1590(para)
msgid ""
"An <classname>InfoBar</classname> may show small items of information or ask "
"brief questions. Unlike a <classname>Dialog</classname>, it appears at the "
"top of the current window instead of opening a new window. Its API is very "
"similar to the <link linkend=\"chapter-dialogs\">Gtk::Dialog</link> API."
msgstr ""
"Una <classname>InfoBar</classname> puede mostrar pequeños elementos de "
"información o hacer preguntas breves. A diferencia de un <classname>Dialog</"
"classname>, aparece encima de la ventana actual en vez de en una ventana "
"nueva. Su API es muy similar a la del <link linkend=\"chapter-dialogs\">Gtk::"
"Dialog</link>."

#: C/gtkmm-tutorial-in.xml:1611(title)
msgid "Tooltips"
msgstr "Consejos"

#: C/gtkmm-tutorial-in.xml:1613(para)
msgid ""
"Tooltips are the little information windows that pop up when you leave your "
"pointer over a widget for a few seconds. Use <methodname>set_tooltip_text()</"
"methodname> to set a text string as a tooltip on any <classname>Widget</"
"classname>. <classname>Gtk::ToolItem</classname>s are not <classname>Widget</"
"classname>s, but have the same method for convenience. <classname>Gtk::"
"Tooltip</classname> is used for more advanced tooltip usage, such as showing "
"an image as well as text."
msgstr ""
"Los consejos son pequeñas ventanas de información que aparecen cuando deja "
"su puntero sobre un widget por unos segundos. Use "
"<methodname>set_tooltip_text()</methodname> para establecer una cadena nueva "
"como consejo en cualquier <classname>Widget</classname>. Los <classname>Gtk::"
"ToolItem</classname> no son <classname>Widget</classname>s, pero tienen el "
"mismo método por convenio. <classname>Gtk::Tooltip</classname> es para un "
"uso de los consejos más avanzado, como mostrar una imagen junto al texto."

#: C/gtkmm-tutorial-in.xml:1623(ulink)
msgid "Widget Reference"
msgstr "Referencia de widgets"

#: C/gtkmm-tutorial-in.xml:1624(ulink)
msgid "Tooltip Reference"
msgstr "Referencia de consejos"

#: C/gtkmm-tutorial-in.xml:1629(title)
msgid "Tooltip"
msgstr "Consejo"

#: C/gtkmm-tutorial-in.xml:1644(title)
msgid "Container Widgets"
msgstr "Widgets contenedores"

#: C/gtkmm-tutorial-in.xml:1646(para)
msgid ""
"All container widgets derive from <classname>Gtk::Container</classname>, not "
"always directly. Some container widgets, such as <classname>Gtk::Grid</"
"classname> can hold many child widgets, so these typically have more complex "
"interfaces. Others, such as <classname>Gtk::Frame</classname> contain only "
"one child widget."
msgstr ""
"Todos los widgets contenedores derivan de <classname>Gtk::Container</"
"classname>, no siempre directamente. Algunos widgets contenedores, como "
"<classname>Gtk::Grid</classname> pueden contener varios widgets hijos, por "
"lo que típicamente tienen interfaces más complejas. Otros, como "
"<classname>Gtk::Frame</classname> contienen sólo un widget hijo."

#: C/gtkmm-tutorial-in.xml:1655(title)
msgid "Single-item Containers"
msgstr "Contenedor de un sólo elemento"

#: C/gtkmm-tutorial-in.xml:1657(para)
msgid ""
"The single-item container widgets derive from <classname>Gtk::Bin</"
"classname>, which provides the <methodname>add()</methodname> and "
"<methodname>remove()</methodname> methods for the child widget. Note that "
"<classname>Gtk::Button</classname> and <classname>Gtk::Window</classname> "
"are technically single-item containers, but we have discussed them already "
"elsewhere."
msgstr ""
"Los contenedores de un sólo elemento derivan de <classname>Gtk::Bin</"
"classname>, que proporciona los métodos <methodname>add()</methodname> y "
"<methodname>remove()</methodname> para el widget hijo. Tenga en cuenta que "
"<classname>Gtk::Button</classname> y <classname>Gtk::Window</classname> son, "
"técnicamente, contenedores de un sólo elemento, pero ya se ha hablado de "
"ellos anteriormente."

#: C/gtkmm-tutorial-in.xml:1665(para)
msgid ""
"We also discuss the <classname>Gtk::Paned</classname> widget, which allows "
"you to divide a window into two separate \"panes\". This widget actually "
"contains two child widgets, but the number is fixed so it seems appropriate."
msgstr ""
"También se habla del widget <classname>Gtk::Paned</classname>, que le "
"permite dividir una ventana en dos «paneles» separados. El widget, en "
"realidad, contiene dos widgets hijos, pero el número es fijo, por lo que "
"parece apropiado."

#: C/gtkmm-tutorial-in.xml:1672(title) C/gtkmm-tutorial-in.xml:1686(title)
msgid "Frame"
msgstr "Marco"

#: C/gtkmm-tutorial-in.xml:1674(para)
msgid ""
"Frames can enclose one or a group of widgets within a box, optionally with a "
"title. For instance, you might place a group of <classname>RadioButton</"
"classname>s or <classname>CheckButton</classname>s in a <classname>Frame</"
"classname>."
msgstr ""
"Los cuadros pueden encerrar un grupo de widgets dentro de una caja, con un "
"título opcional. Por ejemplo, tal vez quiera poner un grupo de "
"<classname>RadioButton</classname> o <classname>CheckButton</classname> en "
"un <classname>Frame</classname>."

#: C/gtkmm-tutorial-in.xml:1700(title) C/gtkmm-tutorial-in.xml:1726(title)
msgid "Paned"
msgstr "Con paneles"

#: C/gtkmm-tutorial-in.xml:1702(para)
msgid ""
"Panes divide a widget into two halves, separated by a moveable divider. The "
"two halves (panes) can be oriented either horizontally (side by side) or "
"vertically (one above the other)."
msgstr ""
"Se pueden usar paneles para dividir un widget en dos mitades, separadas por "
"un divisor móvil. Las dos mitades (paneles) pueden orientarse tanto "
"horizontal (lado a lado) como verticalmente (uno encima de otro)."

#: C/gtkmm-tutorial-in.xml:1708(para)
msgid ""
"Unlike the other widgets in this section, pane widgets contain not one but "
"two child widgets, one in each pane. Therefore, you should use "
"<methodname>add1()</methodname> and <methodname>add2()</methodname> instead "
"of the <methodname>add()</methodname> method."
msgstr ""
"A diferencia de los otros widgets en esta sección, los paneles no contienen "
"un widget hijo, sino dos, uno en cada panel. Por lo tanto, debe usar los "
"métodos <methodname>add1()</methodname> y <methodname>add2()</methodname> en "
"vez de <methodname>add()</methodname>."

#: C/gtkmm-tutorial-in.xml:1715(para)
msgid ""
"You can adjust the position of the divider using the <methodname>set_position"
"()</methodname> method, and you will probably need to do so."
msgstr ""
"Puede ajustar la posición del divisor usando el método "
"<methodname>set_position()</methodname>, y probablemente lo necesite."

#: C/gtkmm-tutorial-in.xml:1739(title) C/gtkmm-tutorial-in.xml:1771(title)
msgid "ScrolledWindow"
msgstr "ScrolledWindow"

#: C/gtkmm-tutorial-in.xml:1741(para)
msgid ""
"<classname>ScrolledWindow</classname> widgets create a scrollable area. You "
"can insert any type of widget into a <classname>ScrolledWindow</classname> "
"window, and it will be accessible regardless of its size by using the "
"scrollbars. Note that <classname>ScrolledWindow</classname> is not a "
"<classname>Gtk::Window</classname> despite the slightly misleading name."
msgstr ""
"Los widgets <classname>ScrolledWindow</classname> crean un área desplazable. "
"Puede insertar cualquier tipo de widget en una ventana "
"<classname>ScrolledWindow</classname>, y será accesible sin importar su "
"tamaño mediante el uso de barras de desplazamiento. Tenga en cuenta que "
"<classname>ScrolledWindow</classname> no es un <classname>Gtk::Window</"
"classname>, a pesar del nombre ligeramente confuso."

#: C/gtkmm-tutorial-in.xml:1750(para)
msgid ""
"Scrolled windows have <emphasis>scrollbar policies</emphasis> which "
"determine whether the <classname>Scrollbar</classname>s will be displayed. "
"The policies can be set with the <methodname>set_policy()</methodname> "
"method. The policy may be one of <literal>Gtk::POLICY_AUTOMATIC</literal> or "
"<literal>Gtk::POLICY_ALWAYS</literal>. <literal>Gtk::POLICY_AUTOMATIC</"
"literal> will cause the scrolled window to display the scrollbar only if the "
"contained widget is larger than the visible area. <literal>Gtk::"
"POLICY_ALWAYS</literal> will cause the scrollbar to be displayed always."
msgstr ""
"Las ventanas desplazables tienen <emphasis>políticas de desplazamiento</"
"emphasis> que determinan si se muestran las <classname>Scrollbar</classname> "
"o no. Las políticas se pueden establecer mediante el método "
"<methodname>set_policy()</methodname>. La política puede ser <literal>Gtk::"
"POLICY_AUTOMATIC</literal> o <literal>Gtk::POLICY_ALWAYS</literal>. "
"<literal>Gtk::POLICY_AUTOMATIC</literal> hace que la ventana desplazable "
"muestre la barra de desplazamiento sólo si el widget contenido es más grande "
"que el área visible. <literal>Gtk::POLICY_ALWAYS</literal> hace que la barra "
"de desplazamiento se muestre siempre."

#: C/gtkmm-tutorial-in.xml:1766(para)
msgid ""
"Here is a simple example that packs 100 toggle buttons into a "
"ScrolledWindow. Try resizing the window to see the scrollbars react."
msgstr ""
"Aquí hay un ejemplo simple que incluye 100 botones conmutadores en una "
"ventana ScrolledWindow. Intente redimensionar la ventana para ver reaccionar "
"a las barras de desplazamiento."

#: C/gtkmm-tutorial-in.xml:1784(title) C/gtkmm-tutorial-in.xml:1806(title)
msgid "AspectFrame"
msgstr "AspectFrame"

#: C/gtkmm-tutorial-in.xml:1786(para)
msgid ""
"The <classname>AspectFrame</classname> widget looks like a <classname>Frame</"
"classname> widget, but it also enforces the <emphasis>aspect ratio</"
"emphasis> (the ratio of the width to the height) of the child widget, adding "
"extra space if necessary. For instance, this would allow you to display a "
"photograph without allowing the user to distort it horizontally or "
"vertically while resizing."
msgstr ""
"El widget <classname>AspectFrame</classname> se ve como un widget "
"<classname>Frame</classname>, pero fuerza la <emphasis>relación de aspecto</"
"emphasis> (la razón entre la altura y el ancho) del widget hijo, añadiendo "
"espacio adicional de ser necesario. Por ejemplo, esto le permitiría mostrar "
"una fotografía sin permitirle al usuario distorsionarla horizontal o "
"verticalmente cuando la redimensione."

#: C/gtkmm-tutorial-in.xml:1799(para)
msgid ""
"The following program uses a <classname>Gtk::AspectFrame</classname> to "
"present a drawing area whose aspect ratio will always be 2:1, no matter how "
"the user resizes the top-level window."
msgstr ""
"El siguiente programa usa un <classname>Gtk::AspectFrame</classname> para "
"presentar un área de dibujo cuya relación de aspecto siempre es 2:1, sin "
"importar cómo el usuario redimensiona la ventana superior."

#: C/gtkmm-tutorial-in.xml:1819(title) C/gtkmm-tutorial-in.xml:1845(title)
msgid "Alignment"
msgstr "Alignment"

#: C/gtkmm-tutorial-in.xml:1821(para)
msgid ""
"The <classname>Alignment</classname> widget allows you to place a widget at "
"a position and size relative to the size of the <classname>Alignment</"
"classname> widget itself. For instance, it might be used to center a widget."
msgstr ""
"El widget <classname>Alignment</classname> le permite poner un widget en una "
"posición y tamaño relativos al tamaño del widget <classname>Alignment</"
"classname> en sí. Por ejemplo, puede usarse para centrar un widget."

#: C/gtkmm-tutorial-in.xml:1827(para)
msgid ""
"You need to specify the <classname>Alignment</classname>'s characteristics "
"to the constructor, or to the <methodname>set()</methodname> method. In "
"particular, you won't notice much effect unless you specify a number other "
"than 1.0 for the <literal>xscale</literal> and <literal>yscale</literal> "
"parameters, because 1.0 simply means that the child widget will expand to "
"fill all available space."
msgstr ""
"Debe especificar las características del <classname>Alignment</classname> al "
"constructor, o al método <methodname>set()</methodname>. En particular, no "
"notará ningún efecto a menos que especifique un número distinto a 1.0 para "
"los parámetros <literal>xscale</literal> e <literal>yscale</literal>, porque "
"1.0 simplemente significa que el widget se expandirá hasta cubrir todo el "
"espacio disponible."

#: C/gtkmm-tutorial-in.xml:1839(para)
msgid ""
"This example right-aligns a button in a window by using an "
"<classname>Alignment</classname> widget."
msgstr ""
"Este ejemplo alinea a la derecha un botón en una ventana mediante el uso de "
"un widget <classname>Alignment</classname>."

#: C/gtkmm-tutorial-in.xml:1853(para)
msgid ""
"See the <link linkend=\"sec-progressbar\">ProgressBar</link> section for "
"another example that uses an <classname>Alignment</classname>."
msgstr ""
"Consulte la sección <link linkend=\"sec-progressbar\">ProgressBar</link> "
"para ver otro ejemplo que usa un <classname>Alignment</classname>."

#: C/gtkmm-tutorial-in.xml:1865(title)
msgid "Multiple-item widgets"
msgstr "Widgets de elementos múltiples"

#: C/gtkmm-tutorial-in.xml:1867(para)
msgid ""
"Multiple-item widgets inherit from <classname>Gtk::Container</classname>; "
"just as with <classname>Gtk::Bin</classname>, you use the <methodname>add()</"
"methodname> and <methodname>remove()</methodname> methods to add and remove "
"contained widgets. Unlike <methodname>Gtk::Bin::remove()</methodname>, "
"however, the <methodname>remove()</methodname> method for <classname>Gtk::"
"Container</classname> takes an argument, specifiying which widget to remove."
msgstr ""
"Los widgets de elementos múltiples heredan de <classname>Gtk::Container</"
"classname>; al igual que con <classname>Gtk::Bin</classname>, use los "
"métodos <methodname>add()</methodname> y <methodname>remove()</methodname> "
"para añadir y eliminar widgets contenedores. A diferencia de "
"<methodname>Gtk::Bin::remove()</methodname>, sin embargo, el método "
"<methodname>remove()</methodname> para <classname>Gtk::Container</classname> "
"toma un argumento, especificando qué widget eliminar."

#: C/gtkmm-tutorial-in.xml:1877(title)
msgid "Packing"
msgstr "Empaquetado"

#: C/gtkmm-tutorial-in.xml:1878(para)
msgid ""
"You've probably noticed that <application>gtkmm</application> windows seem "
"\"elastic\" - they can usually be stretched in many different ways. This is "
"due to the <emphasis>widget packing</emphasis> system."
msgstr ""
"Probablemente ya haya notado que las ventanas de <application>gtkmm</"
"application> parecen «elásticas»: normalmente pueden estirarse de muchas "
"maneras diferentes. Esto es así por el sistema de <emphasis>empaquetado de "
"widgets</emphasis>."

#: C/gtkmm-tutorial-in.xml:1883(para)
msgid ""
"Many GUI toolkits require you to precisely place widgets in a window, using "
"absolute positioning, often using a visual editor. This leads to several "
"problems:"
msgstr ""
"Muchos conjuntos de herramientas de la IGU le requieren ubicar precisamente "
"widgets en una ventana, utilizando posicionamiento absoluto, a menudo usando "
"un editor visual. Esto lleva a muchos problemas:"

#: C/gtkmm-tutorial-in.xml:1890(para)
msgid ""
"The widgets don't rearrange themselves when the window is resized. Some "
"widgets are hidden when the window is made smaller, and lots of useless "
"space appears when the window is made larger."
msgstr ""
"Los widgets no se reordenar cuando la ventana se redimensiona. Algunos se "
"esconden cuando las ventanas se hacen más pequeñas, y aparece un montón de "
"espacio sin utilizar cuando la ventana se agranda."

#: C/gtkmm-tutorial-in.xml:1894(para)
msgid ""
"It's impossible to predict the amount of space necessary for text after it "
"has been translated to other languages, or displayed in a different font. On "
"Unix it is also impossible to anticipate the effects of every theme and "
"window manager."
msgstr ""
"Es imposible predecir la cantidad de espacio necesaria para texto después de "
"que se ha traducido a otros idiomas, o se ha mostrado en otra tipografía. En "
"Unix, también es imposible anticipar los efectos de cada tema y gestor de "
"ventanas."

#: C/gtkmm-tutorial-in.xml:1898(para)
msgid ""
"Changing the layout of a window \"on the fly\", to make some extra widgets "
"appear, for instance, is complex. It requires tedious recalculation of every "
"widget's position."
msgstr ""
"Cambiar la disposición de una ventana «al vuelo» para, por ejemplo, hacer "
"que algunos widgets adicionales aparezcan, es complejo. Requiere un cálculo "
"tedioso de la posición de cada widget."

#: C/gtkmm-tutorial-in.xml:1904(para)
msgid ""
"<application>gtkmm</application> uses the packing system to solve these "
"problems. Rather than specifying the position and size of each widget in the "
"window, you can arrange your widgets in rows, columns, and/or tables. "
"<application>gtkmm</application> can size your window automatically, based "
"on the sizes of the widgets it contains. And the sizes of the widgets are, "
"in turn, determined by the amount of text they contain, or the minimum and "
"maximum sizes that you specify, and/or how you have requested that the "
"available space should be shared between sets of widgets. You can perfect "
"your layout by specifying padding distance and centering values for each of "
"your widgets. <application>gtkmm</application> then uses all this "
"information to resize and reposition everything sensibly and smoothly when "
"the user manipulates the window."
msgstr ""
"<application>gtkmm</application> usa el sistema de empaquetado para resolver "
"estos problemas. En lugar de especificar el tamaño y posición de cada widget "
"en la ventana, puede ordenar sus widgets en filas, columnas, y/o tablas. "
"<application>gtkmm</application> puede dimensionar su ventana "
"automáticamente, de acuerdo a los tamaños de los widgets que contiene. A su "
"vez, los tamaños de los widgets se determinan por la cantidad de texto que "
"contienen, los tamaños máximo y mínimo que especifique, y/o cómo ha pedido "
"que se comparta el espacio disponible entre los diferentes conjuntos de "
"widgets. Puede perfeccionar su disposición especificando las distancias "
"entre bordes y los valores de centrado de cada widget. <application>gtkmm</"
"application>, entonces, usa toda esta información para redimensionar y "
"reposicionar todo suave y sensiblemente cuando el usuario manipula la "
"ventana."

#: C/gtkmm-tutorial-in.xml:1913(para)
msgid ""
"<application>gtkmm</application> arranges widgets hierarchically, using "
"<emphasis>containers</emphasis>. A Container widget contains other widgets. "
"Most <application>gtkmm</application> widgets are containers. Windows, "
"Notebook tabs, and Buttons are all container widgets. There are two flavours "
"of containers: single-child containers, which are all descendants of "
"<classname>Gtk::Bin</classname>, and multiple-child containers, which are "
"descendants of <classname>Gtk::Container</classname>. Most widgets in "
"<application>gtkmm</application> are descendants of <classname>Gtk::Bin</"
"classname>, including <classname>Gtk::Window</classname>."
msgstr ""
"<application>gtkmm</application> ordena los widgets jerárquicamente, usando "
"<emphasis>contenedores</emphasis>. Un widget contenedor contiene a otros "
"widgets. La mayoría de los widgets de <application>gtkmm</application> son "
"contenedores. Las ventanas, las pestañas de los cuadernos y los botones son "
"todos widgets contenedores. Hay dos formas de contenedores: de un sólo hijo, "
"que descienden todos de <classname>Gtk::Bin</classname>, y de múltiples "
"hijos, que descienden de <classname>Gtk::Container</classname>. La mayoría "
"de los widgets en <application>gtkmm</application> descienden de "
"<classname>Gtk::Bin</classname>, incluyendo <classname>Gtk::Window</"
"classname>."

# Acá hay un pequeño error cuando se nombran a Gtk::Grid y Gtk::Box: tienen sólo un signo «:», cuando el operador de C++ es «::».
# Nicolás.
#: C/gtkmm-tutorial-in.xml:1924(para)
msgid ""
"Yes, that's correct: a Window can contain at most one widget. How, then, can "
"we use a window for anything useful? By placing a multiple-child container "
"in the window. The most useful container widgets are <classname>Gtk::Grid</"
"classname> and <classname>Gtk::Box</classname>."
msgstr ""
"Sí, es correcto: una ventana sólo puede contener un widget. Entonces, ¿cómo "
"puede usar una ventana para algo útil? Poniendo un contenedor de múltiples "
"hijos en la ventana. Los widgets contenedores más útiles son <classname>Gtk::"
"Grid</classname> y <classname>Gtk::Box</classname>."

#: C/gtkmm-tutorial-in.xml:1935(para)
msgid ""
"<classname>Gtk::Grid</classname> arranges its child widgets in rows and "
"columns. Use <methodname>attach()</methodname>, <methodname>attach_next_to()"
"</methodname> and <methodname>add()</methodname> to insert child widgets."
msgstr ""
"<classname>Gtk::Grid</classname> ordena sus widgets hijos en filas y "
"columnas. Use <methodname>attach()</methodname>, <methodname>attach_next_to()"
"</methodname> y <methodname>add()</methodname> para insertar widgets hijos."

#: C/gtkmm-tutorial-in.xml:1944(para)
msgid ""
"<classname>Gtk::Box</classname> arranges its child widgets vertically or "
"horizontally. Use <methodname>pack_start()</methodname> and "
"<methodname>pack_end()</methodname> to insert child widgets."
msgstr ""
"<classname>Gtk::Box</classname> ordena a sus widgets hijos vertical u "
"horizontalmente. Use <methodname>pack_start()</methodname> y "
"<methodname>pack_end()</methodname> para insertar widgets hijos."

#: C/gtkmm-tutorial-in.xml:1953(para)
msgid "There are several other containers, which we will also discuss."
msgstr "Hay muchos más contenedores, de los que también se hablará."

#: C/gtkmm-tutorial-in.xml:1957(para)
msgid ""
"If you've never used a packing toolkit before, it can take some getting used "
"to. You'll probably find, however, that you don't need to rely on visual "
"form editors quite as much as you might with other toolkits."
msgstr ""
"Si nunca ha usado un kit de herramientas de empaquetado antes, puede llevar "
"algo de tiempo acostumbrarse a él. Probablemente encuentre, sin embargo, que "
"no necesita editores de formularios visuales tanto como con otros kits de "
"herramientas."

#: C/gtkmm-tutorial-in.xml:1967(title)
msgid "An improved Hello World"
msgstr "Un «Hola mundo» mejorado"

#: C/gtkmm-tutorial-in.xml:1969(para)
msgid ""
"Let's take a look at a slightly improved <literal>helloworld</literal>, "
"showing what we've learnt."
msgstr ""
"Eche un vistazo a un <literal>helloworld</literal> ligeramente mejorado, "
"mostrando lo que ha aprendido."

#: C/gtkmm-tutorial-in.xml:1974(title)
msgid "Hello World 2"
msgstr "Hola mundo 2"

#: C/gtkmm-tutorial-in.xml:1982(para)
msgid ""
"After building and running this program, try resizing the window to see the "
"behaviour. Also, try playing with the options to <methodname>pack_start()</"
"methodname> while reading the <link linkend=\"sec-boxes\">Boxes</link> "
"section."
msgstr ""
"Después de haber construido y ejecutado este programa, pruebe a "
"redimensionar la ventana para observar su comportamiento. Además, pruebe "
"modificar las opciones a <methodname>pack_start()</methodname> mientras lee "
"la sección <link linkend=\"sec-boxes\">Cajas</link>."

#: C/gtkmm-tutorial-in.xml:1992(title)
msgid "Boxes"
msgstr "Cajas"

#: C/gtkmm-tutorial-in.xml:1994(para)
msgid ""
"Most packing uses boxes as in the above example. These are invisible "
"containers into which we can pack our widgets. When packing widgets into a "
"horizontal box, the objects are inserted horizontally from left to right or "
"right to left depending on whether <methodname>pack_start()</methodname> or "
"<methodname>pack_end()</methodname> is used. In a vertical box, widgets are "
"packed from top to bottom or vice versa. You may use any combination of "
"boxes inside or beside other boxes to create the desired effect."
msgstr ""
"La mayor parte del empaquetado usa cajas como en el ejemplo anterior. Éstas "
"son contenedores invisibles en los que podemos empaquetar a nuestros "
"widgets. Cuando se empaquetan los widgets en una caja horizontal, los "
"objetos se insertan horizontalmente de izquierda a derecha o de derecha a "
"izquierda dependiendo de si se usó <methodname>pack_start()</methodname> o "
"<methodname>pack_end()</methodname>. En una caja vertical, los widgets se "
"empaquetan de arriba a abajo o viceversa. Puede usar cualquier combinación "
"de cajas dentro o al lado de otras cajas para crear el efecto deseado."

#: C/gtkmm-tutorial-in.xml:2005(title)
msgid "Adding widgets"
msgstr "Añadir widgets"

#: C/gtkmm-tutorial-in.xml:2006(title)
msgid "Per-child packing options"
msgstr "Opciones de empaquetado por hijo"

#: C/gtkmm-tutorial-in.xml:2007(para)
msgid ""
"The <methodname>pack_start()</methodname> and <methodname>pack_end()</"
"methodname> methods place widgets inside these containers. The "
"<methodname>pack_start()</methodname> method will start at the top and work "
"its way down in a <classname>Box</classname> with vertical orientation, or "
"pack left to right in a <classname>Box</classname> with horizontal "
"orientation. <methodname>pack_end()</methodname> will do the opposite, "
"packing from bottom to top or from right to left. Using these methods allows "
"us to right justify or left justify our widgets. We will use "
"<methodname>pack_start()</methodname> in most of our examples."
msgstr ""
"Los métodos <methodname>pack_start()</methodname> y <methodname>pack_end()</"
"methodname> ponen widgets dentro de estos contenedores. El método "
"<methodname>pack_start()</methodname> empezará arriba, y seguirá hacia abajo "
"en una <classname>Box</classname> de orientación vertical, o empaquetará de "
"izquierda a derecha en una <classname>Box</classname> de orientación "
"horizontal. <methodname>pack_end()</methodname> hará lo contrario, "
"empaquetando de abajo hacia arriba o de derecha a izquierda. Usar estos "
"métodos le permite justificar a derecha o izquierda a sus widgets. Se usará "
"<methodname>pack_start()</methodname> en la mayoría de los ejemplos."

#: C/gtkmm-tutorial-in.xml:2019(para)
msgid ""
"There are several options governing how widgets are to be packed, and this "
"can be confusing at first. If you have difficulties then it is sometimes a "
"good idea to play with the <application>glade</application> GUI designer to "
"see what is possible. You might even decide to use the <application>Gtk::"
"Builder</application> API to load your GUI at runtime."
msgstr ""
"Hay muchas opciones que determinan cómo se empaquetan los widgets, y esto "
"puede resultar confuso al principio. Si tiene dificultades, entonces a veces "
"es una buena idea jugar con el diseñador de IGU <application>glade</"
"application> para ver qué es posible. Incluso, tal vez decida usar la API de "
"<application>Gtk::Builder</application> para cargar su IGU en tiempo de "
"ejecución."

#: C/gtkmm-tutorial-in.xml:2027(para)
msgid "There are basically five different styles, as shown in this picture:"
msgstr ""
"Básicamente, hay cinco estilos diferentes, como se muestra en esta imagen."

#: C/gtkmm-tutorial-in.xml:2033(title)
msgid "Box Packing 1"
msgstr "Caja de empaquetado 1"

#: C/gtkmm-tutorial-in.xml:2039(para)
msgid ""
"Each line contains one horizontal <classname>Box</classname> with several "
"buttons. Each of the buttons on a line is packed into the <classname>Box</"
"classname> with the same arguments to the <methodname>pack_start()</"
"methodname> method."
msgstr ""
"Cada línea contiene una <classname>Box</classname> horizontal con varios "
"botones. Cada uno de los botones en una línea está empaquetado en la "
"<classname>Box</classname>, con los mismos argumentos pasados al método "
"<methodname>pack_start()</methodname>."

#: C/gtkmm-tutorial-in.xml:2046(para)
msgid ""
"This is the declaration of the <methodname>pack_start()</methodname> method:"
msgstr ""
"Esta es la declaración del método <methodname>pack_start()</methodname>."

#: C/gtkmm-tutorial-in.xml:2049(programlisting)
#, no-wrap
msgid ""
"void pack_start(Gtk::Widget&amp; child,\n"
"                PackOptions options = PACK_EXPAND_WIDGET,\n"
"                guint padding = 0);"
msgstr ""
"void pack_start(Gtk::Widget&amp; child,\n"
"                PackOptions options = PACK_EXPAND_WIDGET,\n"
"                guint padding = 0);"

#: C/gtkmm-tutorial-in.xml:2053(para)
msgid ""
"The first argument is the widget you're packing. In our example these are "
"all <classname>Button</classname>s."
msgstr ""
"El primer argumento es el widget que está empaquetando. En el ejemplo estos "
"son todos los <classname>Button</classname>."

#: C/gtkmm-tutorial-in.xml:2060(para)
msgid ""
"<literal>PACK_SHRINK</literal>: Space is contracted to the child widget "
"size. The widget will take up just-enough space and never expand."
msgstr ""
"<literal>PACK_SHRINK</literal>: el espacio se contrae al tamaño del widget "
"hijo. El widget usará el espacio justo y necesario, y nunca se expandirá."

#: C/gtkmm-tutorial-in.xml:2061(para)
msgid ""
"<literal>PACK_EXPAND_PADDING</literal>: Extra space is filled with padding. "
"The widgets will be spaced out evenly, but their sizes won't change - there "
"will be empty space between the widgets instead."
msgstr ""
"<literal>PACK_EXPAND_PADDING</literal>: se rellena espacio adicional. Los "
"widgets se espacian de manera similar, pero sus tamaños no cambiarán: en su "
"lugar, habrá espacio vacío."

#: C/gtkmm-tutorial-in.xml:2062(para)
msgid ""
"<literal>PACK_EXPAND_WIDGET</literal>: Extra space is taken up by increasing "
"the child widget size, without changing the amount of space between widgets."
msgstr ""
"<literal>PACK_EXPAND_WIDGET</literal>: se usa espacio adicional "
"incrementando el tamaño del widget hijo, sin cambiar la cantidad de espacio "
"entre los widgets."

#: C/gtkmm-tutorial-in.xml:2057(para)
msgid ""
"The <parameter>options</parameter> argument can take one of these three "
"options: <placeholder-1/>"
msgstr ""
"El argumento <parameter>options</parameter> puede tomar una de estas tres "
"opciones: <placeholder-1/>"

#: C/gtkmm-tutorial-in.xml:2066(para)
msgid ""
"The <parameter>padding</parameter> argument specifies the width of an extra "
"border area to leave around the packed widget."
msgstr ""
"El argumento <parameter>padding</parameter> especifica el ancho de un área "
"adicional en el borde para dejar alrededor del widget empaquetado."

#: C/gtkmm-tutorial-in.xml:2075(title)
msgid "Per-container packing options"
msgstr "Opciones de empaquetado por contenedor"

#: C/gtkmm-tutorial-in.xml:2078(programlisting)
#, no-wrap
msgid "Gtk::Box(bool homogeneous = false, int spacing = 0);"
msgstr "Gtk::Box(bool homogeneous = false, int spacing = 0);"

#: C/gtkmm-tutorial-in.xml:2076(para)
msgid ""
"Here's the constructor for the box widgets: <placeholder-1/> Passing "
"<literal>true</literal> for <parameter>homogeneous</parameter> will cause "
"all of the contained widgets to be the same size. <parameter>spacing</"
"parameter> is a (minimum) number of pixels to leave between each widget."
msgstr ""
"Aquí está el constructor de los widgets de caja: <placeholder-1/> Pasarle "
"<literal>true</literal> a <parameter>homogeneous</parameter> hará que todos "
"los widgets contenidos sean del mismo tamaño. <parameter>spacing</parameter> "
"es el número (mínimo) de píxeles que dejar entre cada widget."

#: C/gtkmm-tutorial-in.xml:2085(para)
msgid ""
"What's the difference between spacing (set when the box is created) and "
"padding (set when elements are packed)? Spacing is added between objects, "
"and padding is added on either side of a widget. The following figure should "
"make it clearer:"
msgstr ""
"¿Cuál es la diferencia entre el espaciado (establecido cuando se crea la "
"caja) y el relleno (establecido cuando se empaquetan los elementos)? El "
"espaciado se añade entre objetos, y el relleno a cada lado del widget. La "
"siguiente figura debería aclararlo:"

#: C/gtkmm-tutorial-in.xml:2093(title)
msgid "Box Packing 2"
msgstr "Caja de empaquetado 2"

#: C/gtkmm-tutorial-in.xml:2104(para)
msgid ""
"Here is the source code for the example that produced the screenshots above. "
"When you run this example, provide a number between 1 and 3 as a command-"
"line option, to see different packing options in use."
msgstr ""
"Aquí está el código fuente del ejemplo que produjo las capturas de pantalla "
"anteriores. Cuando ejecute este ejemplo, proporcione un número entre 1 y 3 "
"como opción de línea de comandos, para ver las diferentes opciones de "
"empaquetado en acción."

#: C/gtkmm-tutorial-in.xml:2113(title)
msgid "ButtonBoxes"
msgstr "Cajas de Botones"

#: C/gtkmm-tutorial-in.xml:2115(para)
msgid ""
"Button boxes are a convenient way to quickly arrange a group of buttons. "
"Their orientation can be either horizontal or vertical."
msgstr ""
"Las cajas de botones son una manera conveniente de ordenar rápidamente un "
"grupo de botones. Su orientación puede ser tanto horizontal como vertical."

#: C/gtkmm-tutorial-in.xml:2120(para)
msgid ""
"<classname>ButtonBox</classname>es help to make applications appear "
"consistent because they use standard settings, such as inter-button spacing "
"and packing."
msgstr ""
"Las <classname>ButtonBox</classname> ayudan a hacer que las aplicaciones "
"aparezcan consistentes porque usan opciones estándar, como espaciado entre "
"botones y empaquetado."

#: C/gtkmm-tutorial-in.xml:2125(para)
msgid ""
"Buttons are added to a <classname>ButtonBox</classname> with the "
"<methodname>add()</methodname> method."
msgstr ""
"Los botones se añaden a una <classname>ButtonBox</classname> con el método "
"<methodname>add()</methodname>."

#: C/gtkmm-tutorial-in.xml:2130(para)
msgid ""
"Button boxes support several layout styles. The style can be retrieved and "
"changed using <methodname>get_layout()</methodname> and "
"<methodname>set_layout()</methodname>."
msgstr ""
"Las cajas de botones soportan varios estilos de disposición. Puede obtener y "
"modificar el estilo usando <methodname>get_layout()</methodname> y "
"<methodname>set_layout()</methodname>. "

#: C/gtkmm-tutorial-in.xml:2142(title)
msgid "ButtonBox"
msgstr "ButtonBox"

#: C/gtkmm-tutorial-in.xml:2155(title) C/gtkmm-tutorial-in.xml:2184(title)
msgid "Grid"
msgstr "Grid"

#: C/gtkmm-tutorial-in.xml:2157(para)
msgid ""
"A <classname>Grid</classname> dynamically lays out child widgets in rows and "
"columns. The dimensions of the grid do not need to be specified in the "
"constructor."
msgstr ""
"Un <classname>Grid</classname> establece dinámicamente widgets hijos en "
"filas y columnas. No es necesario especificar las dimensiones de la red en "
"el constructor."

#: C/gtkmm-tutorial-in.xml:2162(para)
msgid ""
"Child widgets can span multiple rows or columns, using <methodname>attach()</"
"methodname>, or added next to an existing widget inside the grid with "
"<methodname>attach_next_to()</methodname>. Individual rows and columns of "
"the grid can be set to have uniform height or width with "
"<methodname>set_row_homogeneous()</methodname> and "
"<methodname>set_column_homogeneous()</methodname>."
msgstr ""
"Los widgets hijos pueden abarcar múltiples filas o columnas, usando "
"<methodname>attach()</methodname>, o añadirse a un widget existente dentro "
"de la cuadrícula con <methodname>attach_next_to()</methodname>. Se puede "
"establecer que las filas o columnas individuales de la cuadrícula tengan una "
"altura o ancho uniforme con <methodname>set_row_homogeneous()</methodname> y "
"<methodname>set_column_homogeneous()</methodname>."

#: C/gtkmm-tutorial-in.xml:2169(para)
msgid ""
"You can set the <emphasis>margin</emphasis> and <emphasis>expand</emphasis> "
"properties of the child <classname>Widget</classname>s to control their "
"spacing and their behaviour when the Grid is resized."
msgstr ""
"Puede establecer las propiedades <emphasis>margin</emphasis> y "
"<emphasis>expand</emphasis> de los <classname>Widget</classname> hijos para "
"controlar su espaciado y comportamiento cuando se redimensiona la cuadrícula."

#: C/gtkmm-tutorial-in.xml:2176(para)
msgid ""
"This example creates a window with three buttons in a grid. The first two "
"buttons are in the upper row, from left to right. A third button is attached "
"underneath the first button, in a new lower row, spanning two columns."
msgstr ""
"Este ejemplo crea una ventana con tres botones en una cuadrícula. Los dos "
"primeros botones están en la fila superior, de izquierda a derecha. Se ha "
"añadido un tercer botón bajo el primer botón, en una nueva fila más abajo, "
"abarcando dos columnas."

#: C/gtkmm-tutorial-in.xml:2197(title)
msgid "Table"
msgstr "Tabla"

#: C/gtkmm-tutorial-in.xml:2199(para)
msgid ""
"<classname>Gtk::Table</classname> allows us to place widgets in a grid, "
"similar to <classname>Gtk::Grid</classname>."
msgstr ""
"<classname>Gtk::Table</classname> permite poner widgets en una cuadrícula, "
"de manera similar a <classname>Gtk::Grid</classname>."

#: C/gtkmm-tutorial-in.xml:2203(para)
msgid ""
"<classname>Gtk::Table</classname> is deprecated from <application>gtkmm</"
"application> version 3.4 and should not be used in newly-written code. Use "
"<classname>Gtk::Grid</classname> instead."
msgstr ""
"<classname>Gtk::Table</classname> se marcó como obsoleto en "
"<application>gtkmm</application> 3.4 y no se debe usar en el código nuevo. "
"Use <classname>Gtk::Grid</classname> en su lugar."

#: C/gtkmm-tutorial-in.xml:2210(title) C/gtkmm-tutorial-in.xml:2245(title)
msgid "Notebook"
msgstr "Cuaderno"

#: C/gtkmm-tutorial-in.xml:2212(para)
msgid ""
"A <classname>Notebook</classname> has a set of stacked <literal>pages</"
"literal>, each of which contains widgets. Labelled <literal>tabs</literal> "
"allow the user to select the pages. <classname>Notebook</classname>s allow "
"several sets of widgets to be placed in a small space, by only showing one "
"page at a time. For instance, they are often used in preferences dialogs."
msgstr ""
"Un <classname>Notebook</classname> tiene un conjunto de <literal>páginas</"
"literal> apiladas, cada una de ellas contiene widgets. Las "
"<literal>pestañas</literal> etiquetadas permiten al usuario seleccionar las "
"páginas. Los <classname>Notebook</classname> permiten colocar varios "
"conjuntos de widgets en un espacio reducido, mostrando sólo una página a la "
"vez. Por ejemplo, se utilizan a menudo en los diálogos de preferencias."

#: C/gtkmm-tutorial-in.xml:2221(para)
msgid ""
"Use the <methodname>append_page()</methodname>, <methodname>prepend_page()</"
"methodname> and <methodname>insert_page()</methodname> methods to add tabbed "
"pages to the <literal>Notebook</literal>, supplying the child widget and the "
"name for the tab."
msgstr ""
"Use los métodos <methodname>append_page()</methodname>, "
"<methodname>prepend_page()</methodname> e <methodname>insert_page()</"
"methodname> para añadir páginas con pestañas al <literal>Notebook</literal>, "
"proporcionándoles el widget hijo y el nombre de la pestaña."

#: C/gtkmm-tutorial-in.xml:2228(para)
msgid ""
"To discover the currently visible page, use the <methodname>get_current_page"
"()</methodname> method. This returns the page number, and then calling "
"<methodname>get_nth_page()</methodname> with that number will give you a "
"pointer to the actual child widget."
msgstr ""
"Para descubrir la página visible actual, use el método "
"<methodname>get_current_page()</methodname>. Esto devuelve el número de "
"página. Después llame a <methodname>get_nth_page()</methodname> con ese "
"número le dará un puntero al widget hijo en sí."

#: C/gtkmm-tutorial-in.xml:2235(para)
msgid ""
"To programmatically change the selected page, use the "
"<methodname>set_current_page()</methodname> method."
msgstr ""
"Para cambiar la página seleccionada mediante programación, use el método "
"<methodname>set_current_page()</methodname>."

#: C/gtkmm-tutorial-in.xml:2258(title) C/gtkmm-tutorial-in.xml:2285(title)
msgid "Assistant"
msgstr "Asistente"

#: C/gtkmm-tutorial-in.xml:2260(para)
msgid ""
"An <classname>Assistant</classname> splits a complex operation into steps. "
"Each step is a page, containing a header, a child widget and an action area. "
"The Assistant's action area has navigation buttons which update "
"automatically depending on the type of the page, set with "
"<methodname>set_page_type()</methodname>."
msgstr ""
"Un <classname>Assistant</classname> divide una operación compleja en pasos. "
"Cada paso es una página, conteniendo una cabecera, un widget hijo, y un área "
"de acción. El área de acción del asistente tiene botones de navegación que "
"se actualizan automáticamente dependiendo del tipo de la página, establecido "
"con <methodname>set_page_type()</methodname>."

#: C/gtkmm-tutorial-in.xml:2264(para)
msgid ""
"Use the <methodname>append_page()</methodname>, <methodname>prepend_page</"
"methodname> and <methodname>insert_page()</methodname> methods to add pages "
"to the <classname>Assistant</classname>, supplying the child widget for each "
"page."
msgstr ""
"Use los métodos <methodname>append_page()</methodname>, "
"<methodname>prepend_page</methodname> e <methodname>insert_page()</"
"methodname> para añadirle páginas al <classname>Assistant</classname>, "
"proporcionándole el widget hijo por cada página."

#: C/gtkmm-tutorial-in.xml:2268(para)
msgid ""
"To determine the currently-visible page, use the <methodname>get_current_page"
"()</methodname> method, and pass the result to <methodname>get_nth_page()</"
"methodname>, which returns a pointer to the actual widget. To "
"programmatically change the current page, use the "
"<methodname>set_current_page()</methodname> method."
msgstr ""
"Para determinar la página actualmente visible, use el método "
"<methodname>get_current_page()</methodname> y pásele el resultado a "
"<methodname>get_nth_page()</methodname>, que le devuelve un puntero al "
"widget en sí. Para cambiar mediante programación la página actual, use el "
"método <methodname>set_current_page()</methodname>."

#: C/gtkmm-tutorial-in.xml:2272(para)
msgid ""
"To set the title of a page, use the <methodname>set_page_title()</"
"methodname> method. The header and side images of a page can be set with the "
"<methodname>set_page_header_image()</methodname> and "
"<methodname>set_page_side_image()</methodname> methods."
msgstr ""
"Para establecer el título de una página, use el método "
"<methodname>set_page_title()</methodname>. Las imágenes de cabecera y de "
"lado de una página se pueden establecer con los métodos "
"<methodname>set_page_header_image()</methodname> y "
"<methodname>set_page_side_image()</methodname>."

#: C/gtkmm-tutorial-in.xml:2276(para)
msgid ""
"To add widgets to the action area, use the <methodname>add_action_widget()</"
"methodname> method. They will be packed alongside the default buttons. Use "
"the <methodname>remove_action_widget()</methodname> method to remove widgets."
msgstr ""
"Para añadir widgets al área de acción, use el método "
"<methodname>add_action_widget()</methodname>. Serán empaquetados junto a los "
"botones predeterminados. Use el método <methodname>remove_action_widget()</"
"methodname> para borrar los widgets."

#: C/gtkmm-tutorial-in.xml:2303(title)
msgid "The TreeView widget"
msgstr "El widget TreeView"

#: C/gtkmm-tutorial-in.xml:2304(para)
msgid ""
"The <classname>Gtk::TreeView</classname> widget can contain lists or trees "
"of data, in columns."
msgstr ""
"El widget <classname>Gtk::TreeView</classname> puede contener listas o "
"árboles de datos, en columnas."

#: C/gtkmm-tutorial-in.xml:2310(title)
msgid "The Model"
msgstr "El modelo"

#: C/gtkmm-tutorial-in.xml:2311(para)
msgid ""
"Each <classname>Gtk::TreeView</classname> has an associated <classname>Gtk::"
"TreeModel</classname>, which contains the data displayed by the "
"<classname>TreeView</classname>. Each <classname>Gtk::TreeModel</classname> "
"can be used by more than one <classname>Gtk::TreeView</classname>. For "
"instance, this allows the same underlying data to be displayed and edited in "
"2 different ways at the same time. Or the 2 Views might display different "
"columns from the same Model data, in the same way that 2 SQL queries (or "
"\"views\") might show different fields from the same database table."
msgstr ""
"Cada <classname>Gtk::TreeView</classname> tiene un <classname>Gtk::Model</"
"classname> asociado que contiene los datos mostrados por el "
"<classname>TreeView</classname> Varios <classname>Gtk::TreeView</classname> "
"puede usar el mismo <classname>Gtk::TreeModel</classname>. Por ejemplo, esto "
"le permite mostrar y editar los mismos datos de 2 formas diferentes al mismo "
"tiempo. O las 2 vistas pueden mostrar diferentes columnas de los mismos "
"modelos de datos, de la misma manera que dos consultas SQL (o «vistas») "
"pueden mostrar diferentes campos de la misma tabla de la base de datos."

#: C/gtkmm-tutorial-in.xml:2321(para)
msgid ""
"Although you can theoretically implement your own Model, you will normally "
"use either the <classname>ListStore</classname> or <classname>TreeStore</"
"classname> model classes."
msgstr ""
"A pesar de que, teóricamente, puede implementar su propio modelo, "
"normalmente usará las clases de los modelos <classname>ListStore</classname> "
"o <classname>TreeStore</classname>."

#: C/gtkmm-tutorial-in.xml:2330(title)
msgid "ListStore, for rows"
msgstr "ListStore, para filas"

#: C/gtkmm-tutorial-in.xml:2331(para)
msgid ""
"The <classname>ListStore</classname> contains simple rows of data, and each "
"row has no children."
msgstr ""
"El <classname>ListStore</classname> contiene filas simples de datos, y "
"ninguna fila tiene hijos."

#: C/gtkmm-tutorial-in.xml:2337(title) C/gtkmm-tutorial-in.xml:2881(title)
msgid "TreeView - ListStore"
msgstr "TreeView - ListStore"

#: C/gtkmm-tutorial-in.xml:2348(title)
msgid "TreeStore, for a hierarchy"
msgstr "TreeStore, para una jerarquía"

#: C/gtkmm-tutorial-in.xml:2349(para)
msgid ""
"The <classname>TreeStore</classname> contains rows of data, and each row may "
"have child rows."
msgstr ""
"El <classname>TreeStore</classname> contiene filas de datos, y cada fila "
"puede tener filas hijas."

#: C/gtkmm-tutorial-in.xml:2355(title) C/gtkmm-tutorial-in.xml:2900(title)
msgid "TreeView - TreeStore"
msgstr "TreeView - TreeStore"

#: C/gtkmm-tutorial-in.xml:2366(title)
msgid "Model Columns"
msgstr "Columnas del modelo"

#: C/gtkmm-tutorial-in.xml:2367(para)
msgid ""
"The <classname>TreeModelColumnRecord</classname> class is used to keep track "
"of the columns and their data types. You add <classname>TreeModelColumn</"
"classname> instances to the <classname>ColumnRecord</classname> and then use "
"those <classname>TreeModelColumns</classname> when getting and setting the "
"data in model rows. You will probably find it convenient to derive a new "
"<classname>TreeModelColumnRecord</classname> which has your "
"<classname>TreeModelColumn</classname> instances as member data."
msgstr ""
"La clase <classname>TreeModelColumnRecord</classname> se usa para rastrear a "
"las columnas y sus tipos de datos. Añádale instancias "
"<classname>TreeModelColumn</classname> al <classname>ColumnRecord</"
"classname> y luego use esas <classname>TreeModelColumn</classname> cuando "
"establezca u obtenga los datos en las filas del modelo. Probablemente "
"encuentre conveniente derivar un <classname>TreeModelColumnRecord</"
"classname> que tenga a sus instancias <classname>TreeModelColumn</classname> "
"como datos miembro."

#: C/gtkmm-tutorial-in.xml:2378(programlisting)
#, no-wrap
msgid ""
"class ModelColumns : public Gtk::TreeModelColumnRecord\n"
"{\n"
"public:\n"
"\n"
"  ModelColumns()\n"
"    { add(m_col_text); add(m_col_number); }\n"
"\n"
"  Gtk::TreeModelColumn&lt;Glib::ustring&gt; m_col_text;\n"
"  Gtk::TreeModelColumn&lt;int&gt; m_col_number;\n"
"};\n"
"\n"
"ModelColumns m_Columns;"
msgstr ""
"class ModelColumns : public Gtk::TreeModelColumnRecord\n"
"{\n"
"public:\n"
"\n"
"  ModelColumns()\n"
"    { add(m_col_text); add(m_col_number); }\n"
"\n"
"  Gtk::TreeModelColumn&lt;Glib::ustring&gt; m_col_text;\n"
"  Gtk::TreeModelColumn&lt;int&gt; m_col_number;\n"
"};\n"
"\n"
"ModelColumns m_Columns;"

#: C/gtkmm-tutorial-in.xml:2391(para)
msgid ""
"You specify the <classname>ColumnRecord</classname> when creating the Model, "
"like so:"
msgstr ""
"Especifique el <classname>ColumnRecord</classname> cuando cree el modelo, "
"así:"

#: C/gtkmm-tutorial-in.xml:2395(programlisting)
#, no-wrap
msgid ""
"Glib::RefPtr&lt;Gtk::ListStore&gt; refListStore =\n"
"    Gtk::ListStore::create(m_Columns);"
msgstr ""
"Glib::RefPtr&lt;Gtk::ListStore&gt; refListStore =\n"
"    Gtk::ListStore::create(m_Columns);"

#: C/gtkmm-tutorial-in.xml:2397(para)
msgid ""
"Note that the instance (such as m_Columns here) should usually not be "
"static, because it often needs to be instantiated after glibmm has been "
"instantiated."
msgstr ""
"Tenga en cuenta que la instancia (como m_Columns aquí) normalmente no debe "
"ser estática, porque a menudo se necesita instanciarla después de haber "
"instanciado a glibmm."

#: C/gtkmm-tutorial-in.xml:2402(title)
msgid "Adding Rows"
msgstr "Añadir filas"

#: C/gtkmm-tutorial-in.xml:2403(para)
msgid ""
"Add rows to the model with the <methodname>append()</methodname>, "
"<methodname>prepend()</methodname>, or <methodname>insert()</methodname> "
"methods."
msgstr ""
"Añadir filas al modelo con los métodos <methodname>append()</methodname>, "
"<methodname>prepend()</methodname>, o <methodname>insert()</methodname>."

#: C/gtkmm-tutorial-in.xml:2407(programlisting)
#, no-wrap
msgid "Gtk::TreeModel::iterator iter = m_refListStore-&gt;append();"
msgstr "Gtk::TreeModel::iterator iter = m_refListStore-&gt;append();"

#: C/gtkmm-tutorial-in.xml:2408(para)
msgid "You can dereference the iterator to get the Row:"
msgstr "Puede desreferenciar al iterador para obtener la fila:"

#: C/gtkmm-tutorial-in.xml:2410(programlisting)
#, no-wrap
msgid "Gtk::TreeModel::Row row = *iter;"
msgstr "Gtk::TreeModel::Row row = *iter;"

#: C/gtkmm-tutorial-in.xml:2411(title)
msgid "Adding child rows"
msgstr "Añadiendo filas secundarias"

#: C/gtkmm-tutorial-in.xml:2412(para)
msgid ""
"<classname>Gtk::TreeStore</classname> models can have child items. Add them "
"with the <methodname>append()</methodname>, <methodname>prepend()</"
"methodname>, or <methodname>insert()</methodname> methods, like so:"
msgstr ""
"Los modelos <classname>Gtk::TreeStore</classname> pueden tener elementos "
"hijos. Añádalos con los métodos <methodname>append()</methodname>, "
"<methodname>prepend()</methodname>, o <methodname>insert()</methodname>, así:"

#: C/gtkmm-tutorial-in.xml:2417(programlisting)
#, no-wrap
msgid ""
"Gtk::TreeModel::iterator iter_child =\n"
"    m_refListStore-&gt;append(row.children());"
msgstr ""
"Gtk::TreeModel::iterator iter_child =\n"
"    m_refListStore-&gt;append(row.children());"

#: C/gtkmm-tutorial-in.xml:2424(title)
msgid "Setting values"
msgstr "Configurar los valores"

#: C/gtkmm-tutorial-in.xml:2425(para)
msgid ""
"You can use the <methodname>operator[]</methodname> override to set the data "
"for a particular column in the row, specifying the "
"<classname>TreeModelColumn</classname> used to create the model."
msgstr ""
"Puede usar la sobrecarga de <methodname>operator[]</methodname> para "
"establecer los datos de una columna particular en la fila, especificando la "
"<classname>TreeModelColumn</classname> que se usó para crear el modelo."

#: C/gtkmm-tutorial-in.xml:2430(programlisting)
#, no-wrap
msgid "row[m_Columns.m_col_text] = \"sometext\";"
msgstr "row[m_Columns.m_col_text] = \"sometext\";"

#: C/gtkmm-tutorial-in.xml:2434(title)
msgid "Getting values"
msgstr "Obtener los valores"

#: C/gtkmm-tutorial-in.xml:2435(para)
msgid ""
"You can use the <methodname>operator[]</methodname> override to get the data "
"in a particular column in a row, specifiying the <classname>TreeModelColumn</"
"classname> used to create the model."
msgstr ""
"Puede usar la sobrecarga <methodname>operator[]</methodname> para obtener "
"los datos de una columna particular en una fila, especificando la "
"<classname>TreeModelColumn</classname> que se usó para crear el modelo."

#: C/gtkmm-tutorial-in.xml:2440(programlisting)
#, no-wrap
msgid ""
"Glib::ustring strText = row[m_Columns.m_col_text];\n"
"int number = row[m_Columns.m_col_number];"
msgstr ""
"Glib::ustring strText = row[m_Columns.m_col_text];\n"
"int number = row[m_Columns.m_col_number];"

#: C/gtkmm-tutorial-in.xml:2442(para)
msgid ""
"The compiler will complain if you use an inappropriate type. For instance, "
"this would generate a compiler error:"
msgstr ""
"El compilador le hará saber si usa un tipo inapropiado. Por ejemplo, esto "
"generaría un error de compilación:"

#: C/gtkmm-tutorial-in.xml:2446(programlisting)
#, no-wrap
msgid ""
"//compiler error - no conversion from ustring to int.\n"
"int number = row[m_Columns.m_col_text];"
msgstr ""
"//compiler error - no conversion from ustring to int.\n"
"int number = row[m_Columns.m_col_text];"

#: C/gtkmm-tutorial-in.xml:2451(title)
msgid "\"Hidden\" Columns"
msgstr "Columnas «ocultas»"

#: C/gtkmm-tutorial-in.xml:2452(para)
msgid ""
"You might want to associate extra data with each row. If so, just add it as "
"a Model column, but don't add it to the View."
msgstr ""
"Puede querer asociar datos adicionales a cada fila. Si es así, sólo añádalos "
"como una columa del modelo, pero no se los añada a la vista."

#: C/gtkmm-tutorial-in.xml:2461(title) C/gtkmm-tutorial-in.xml:3313(title)
msgid "The View"
msgstr "La vista"

#: C/gtkmm-tutorial-in.xml:2462(para)
msgid ""
"The View is the actual widget (<classname>Gtk::TreeView</classname>) that "
"displays the model (<classname>Gtk::TreeModel</classname>) data and allows "
"the user to interact with it. The View can show all of the model's columns, "
"or just some, and it can show them in various ways."
msgstr ""
"La vista es el widget en sí (<classname>Gtk::TreeView</classname>) que "
"muestra los datos del modelo (<classname>Gtk::TreeModel</classname>) y le "
"permite al usuario interactuar con él. La vista puede mostrar todas las "
"columnas del modelo, o sólo algunas, y puede mostrarlas de varias maneras."

#: C/gtkmm-tutorial-in.xml:2472(title)
msgid "Using a Model"
msgstr "Usar un modelo"

#: C/gtkmm-tutorial-in.xml:2473(para)
msgid ""
"You can specify a <classname>Gtk::TreeModel</classname> when constructing "
"the <classname>Gtk::TreeView</classname>, or you can use the "
"<methodname>set_model()</methodname> method, like so:"
msgstr ""
"Puede especificar un <classname>Gtk::TreeModel</classname> cuando construye "
"la <classname>Gtk::TreeView</classname>, o puede usar el método "
"<methodname>set_model()</methodname>, así:"

#: C/gtkmm-tutorial-in.xml:2478(programlisting)
#, no-wrap
msgid "m_TreeView.set_model(m_refListStore);"
msgstr "m_TreeView.set_model(m_refListStore);"

#: C/gtkmm-tutorial-in.xml:2482(title)
msgid "Adding View Columns"
msgstr "Añadir columnas a la vista"

#: C/gtkmm-tutorial-in.xml:2483(para)
msgid ""
"You can use the <methodname>append_column()</methodname> method to tell the "
"View that it should display certain Model columns, in a certain order, with "
"a certain column title."
msgstr ""
"Puede usar el método <methodname>append_column()</methodname> para decirle a "
"la vista que debe mostrar ciertas columnas del modelo, en cierto orden, con "
"un cierto título de columna."

#: C/gtkmm-tutorial-in.xml:2488(programlisting)
#, no-wrap
msgid "m_TreeView.append_column(\"Messages\", m_Columns.m_col_text);"
msgstr "m_TreeView.append_column(\"Messages\", m_Columns.m_col_text);"

#: C/gtkmm-tutorial-in.xml:2489(para)
msgid ""
"When using this simple <methodname>append_column()</methodname> override, "
"the <classname>TreeView</classname> will display the model data with an "
"appropriate <classname>CellRenderer</classname>. For instance, strings and "
"numbers are shown in a simple <classname>Gtk::Entry</classname> widget, and "
"booleans are shown in a <classname>Gtk::CheckButton</classname>. This is "
"usually what you need. For other column types you must either connect a "
"callback that converts your type into a string representation, with "
"<methodname>TreeViewColumn::set_cell_data_func()</methodname>, or derive a "
"custom <classname>CellRenderer</classname>. Note that (unsigned) short is "
"not supported by default - You could use (unsigned) int or (unsigned) long "
"as the column type instead."
msgstr ""
"Cuando use esta simple sobrecarga <methodname>append_column()</methodname>, "
"el <classname>TreeView</classname> mostrará los datos del modelo con un "
"<classname>CellRenderer</classname> apropiado. Por ejemplo, las cadenas y "
"los números se muestran en un simple widget <classname>Gtk::Entry</"
"classname>, y los booleanos en un <classname>Gtk::CheckButton</classname>. "
"Esto es normalmente lo que necesita. Para otros tipos de columnas, debe "
"conectar un retorno de llamada que convierta su tipo en una cadena "
"representativa, con <methodname>TreeViewColumn::set_cell_data_func()</"
"methodname>; o derivar un <classname>CellRenderer</classname> personalizado. "
"Tenga en cuenta que no se soporta el tipo «(unsigned) short» de manera "
"predeterminada: puede usar como tipo de columna «(unsigned) int» o "
"«(unsigned) long» en su lugar."

#: C/gtkmm-tutorial-in.xml:2505(title)
msgid "More than one Model Column per View Column"
msgstr "Más de una columna del modelo por columna de la vista"

#: C/gtkmm-tutorial-in.xml:2506(para)
msgid ""
"To render more than one model column in a view column, you need to create "
"the <classname>TreeView::Column</classname> widget manually, and use "
"<methodname>pack_start()</methodname> to add the model columns to it."
msgstr ""
"Para reproducir más de una columna del modelo en una columna de vista, "
"necesita crear el widget <classname>TreeView::Column</classname> "
"manualmente, y usar <methodname>pack_start()</methodname> para añadirle las "
"columnas del modelo."

#: C/gtkmm-tutorial-in.xml:2512(para)
msgid ""
"Then use <methodname>append_column()</methodname> to add the view Column to "
"the View. Notice that <methodname>Gtk::View::append_column()</methodname> is "
"overridden to accept either a prebuilt <classname>Gtk::View::Column</"
"classname> widget, or just the <classname>TreeModelColumn</classname> from "
"which it generates an appropriate <classname>Gtk::View::Column</classname> "
"widget."
msgstr ""
"Entonces, use <methodname>append_column()</methodname> para añadirle la "
"columna de vista a la vista. Tenga en cuenta que <methodname>Gtk::View::"
"append_column()</methodname> se sobrecarga para aceptar un widget "
"<classname>Gtk::View::Column</classname>, o sólo el "
"<classname>TreeModelColumn</classname> del cual genera un widget "
"<classname>Gtk::View::Column</classname> apropiado."

# No le encuentro el sentido a «text name», y por lo tanto no se si su traducción es apropiada.
# Nicolás.
#: C/gtkmm-tutorial-in.xml:2519(para)
msgid ""
"Here is some example code from <filename>demos/gtk-demo/example_stockbrowser."
"cc</filename>, which has a pixbuf icon and a text name in the same column:"
msgstr ""
"Aquí hay algo de código de ejemplo de <filename>demos/gtk-demo/"
"example_stockbrowser.cc</filename>, que tiene un icono pixbuf y un nombre de "
"texto en la misma columna:"

#: C/gtkmm-tutorial-in.xml:2524(programlisting)
#, no-wrap
msgid ""
"Gtk::TreeView::Column* pColumn =\n"
"    Gtk::manage( new Gtk::TreeView::Column(\"Symbol\") );\n"
"\n"
"// m_columns.icon and m_columns.symbol are columns in the model.\n"
"// pColumn is the column in the TreeView:\n"
"pColumn-&gt;pack_start(m_columns.icon, false); //false = don't expand.\n"
"pColumn-&gt;pack_start(m_columns.symbol);\n"
"\n"
"m_TreeView.append_column(*pColumn);"
msgstr ""
"Gtk::TreeView::Column* pColumn =\n"
"    Gtk::manage( new Gtk::TreeView::Column(\"Symbol\") );\n"
"\n"
"// m_columns.icon and m_columns.symbol are columns in the model.\n"
"// pColumn is the column in the TreeView:\n"
"pColumn-&gt;pack_start(m_columns.icon, false); //false = don't expand.\n"
"pColumn-&gt;pack_start(m_columns.symbol);\n"
"\n"
"m_TreeView.append_column(*pColumn);"

#: C/gtkmm-tutorial-in.xml:2536(title)
msgid "Specifying CellRenderer details"
msgstr "Especificar los detalles del CellRenderer"

#: C/gtkmm-tutorial-in.xml:2537(para)
msgid ""
"The default <classname>CellRenderers</classname> and their default behaviour "
"will normally suffice, but you might occasionally need finer control. For "
"instance, this example code from <filename>demos/gtk-demo/example_treestore."
"cc</filename>, manually constructs a <classname>Gtk::CellRenderer</"
"classname> widget and instructs it to render the data from various model "
"columns through various aspects of its appearance."
msgstr ""
"Los <classname>CellRenderer</classname> predeterminados y su comportamiento "
"predeterminado normalmente serán suficientes, pero quizás necesite "
"ocasionalmente un control más preciso. Por ejemplo, este código de ejemplo "
"de <filename>demos/gtk-demo/example_treestore.cc</filename> construye "
"manualmente un widget <classname>Gtk::CellRenderer</classname> y le indica "
"que procese los datos de varias columnas de modelo a través de varios "
"aspectos de su apariencia."

#: C/gtkmm-tutorial-in.xml:2545(programlisting)
#, no-wrap
msgid ""
"Gtk::CellRendererToggle* pRenderer =\n"
"    Gtk::manage( new Gtk::CellRendererToggle() );\n"
"int cols_count = m_TreeView.append_column(\"Alex\", *pRenderer);\n"
"Gtk::TreeViewColumn* pColumn = m_TreeView.get_column(cols_count-1);\n"
"if(pColumn)\n"
"{\n"
"  pColumn-&gt;add_attribute(pRenderer-&gt;property_active(),\n"
"      m_columns.alex);\n"
"  pColumn-&gt;add_attribute(pRenderer-&gt;property_visible(),\n"
"      m_columns.visible);\n"
"  pColumn-&gt;add_attribute(pRenderer-&gt;property_activatable(),\n"
"      m_columns.world);"
msgstr ""
"Gtk::CellRendererToggle* pRenderer =\n"
"    Gtk::manage( new Gtk::CellRendererToggle() );\n"
"int cols_count = m_TreeView.append_column(\"Alex\", *pRenderer);\n"
"Gtk::TreeViewColumn* pColumn = m_TreeView.get_column(cols_count-1);\n"
"if(pColumn)\n"
"{\n"
"  pColumn-&gt;add_attribute(pRenderer-&gt;property_active(),\n"
"      m_columns.alex);\n"
"  pColumn-&gt;add_attribute(pRenderer-&gt;property_visible(),\n"
"      m_columns.visible);\n"
"  pColumn-&gt;add_attribute(pRenderer-&gt;property_activatable(),\n"
"      m_columns.world);"

#: C/gtkmm-tutorial-in.xml:2558(para)
msgid ""
"You can also connect to <classname>CellRenderer</classname> signals to "
"detect user actions. For instance:"
msgstr ""
"También puede conectarle señales a un <classname>CellRenderer</classname> "
"para detectar las acciones del usuario. Por ejemplo:"

#: C/gtkmm-tutorial-in.xml:2562(programlisting)
#, no-wrap
msgid ""
"Gtk::CellRendererToggle* pRenderer =\n"
"    Gtk::manage( new Gtk::CellRendererToggle() );\n"
"pRenderer-&gt;signal_toggled().connect(\n"
"    sigc::bind( sigc::mem_fun(*this,\n"
"        &amp;Example_TreeView_TreeStore::on_cell_toggled), m_columns.dave)\n"
");"
msgstr ""
"Gtk::CellRendererToggle* pRenderer =\n"
"    Gtk::manage( new Gtk::CellRendererToggle() );\n"
"pRenderer-&gt;signal_toggled().connect(\n"
"    sigc::bind( sigc::mem_fun(*this,\n"
"        &amp;Example_TreeView_TreeStore::on_cell_toggled), m_columns.dave)\n"
");"

#: C/gtkmm-tutorial-in.xml:2571(title) C/gtkmm-tutorial-in.xml:2910(title)
msgid "Editable Cells"
msgstr "Celdas editables"

#: C/gtkmm-tutorial-in.xml:2574(title)
msgid "Automatically-stored editable cells."
msgstr "Celdas editables guardadas automáticamente."

#: C/gtkmm-tutorial-in.xml:2575(para)
msgid ""
"Cells in a <classname>TreeView</classname> can be edited in-place by the "
"user. To allow this, use the <classname>Gtk::TreeView</"
"classname><methodname>insert_column_editable()</methodname> and "
"<methodname>append_column_editable()</methodname> methods instead of "
"<methodname>insert_column()</methodname> and <methodname>append_column()</"
"methodname>. When these cells are edited the new values will be stored "
"immediately in the Model. Note that these methods are templates which can "
"only be instantiated for simple column types such as <classname>Glib::"
"ustring</classname>, int, and long."
msgstr ""
"El usuario puede editar las celdas en una <classname>TreeView</classname> "
"directamente. Para permitir esto, use los métodos <classname>Gtk::TreeView</"
"classname> <methodname>insert_column_editable()</methodname> y "
"<methodname>append_column_editable()</methodname> en lugar de "
"<methodname>insert_column()</methodname> y <methodname>append_column()</"
"methodname>. Cuando estas celdas se editen, los nuevos valores se guardarán "
"inmediatamente en el modelo. Tenga en cuenta que estos métodos son "
"plantillas que sólo se pueden instanciar para tipos de columnas simples como "
"<classname>Glib::ustring</classname>, int, y long."

#: C/gtkmm-tutorial-in.xml:2589(title)
msgid "Implementing custom logic for editable cells."
msgstr "Implementación de la lógica personalizada para celdas editables."

#: C/gtkmm-tutorial-in.xml:2590(para)
msgid ""
"However, you might not want the new values to be stored immediately. For "
"instance, maybe you want to restrict the input to certain characters or "
"ranges of values."
msgstr ""
"Sin embargo, tal vez no quiera que se almacenen los valores nuevos "
"inmediatamente. Por ejemplo, tal vez quiera restringir la entrada a ciertos "
"caracteres o rangos de valores."

#: C/gtkmm-tutorial-in.xml:2595(para)
msgid ""
"To achieve this, you should use the normal <classname>Gtk::TreeView</"
"classname><methodname>insert_column()</methodname> and "
"<methodname>append_column()</methodname> methods, then use "
"<methodname>get_column_cell_renderer()</methodname> to get the "
"<classname>Gtk::CellRenderer</classname> used by that column."
msgstr ""
"Para lograr esto, debe usar los métodos <classname>Gtk::TreeView</classname> "
"<methodname>insert_column()</methodname> y <methodname>append_column()</"
"methodname> normales, y luego usar <methodname>get_column_cell_renderer()</"
"methodname> para obtener el <classname>Gtk::CellRenderer</classname> que usa "
"esa columna."

#: C/gtkmm-tutorial-in.xml:2601(para)
msgid ""
"You should then cast that <classname>Gtk::CellRenderer*</classname> to the "
"specific <classname>CellRenderer</classname> that you expect, so you can use "
"specific API."
msgstr ""
"Entonces, convierta ese <classname>Gtk::CellRenderer*</classname> al "
"<classname>CellRenderer</classname> específico que espera, para que pueda "
"usar la API específica."

#: C/gtkmm-tutorial-in.xml:2605(para)
msgid ""
"For instance, for a CellRendererText, you would set the cell's "
"<emphasis>editable</emphasis> property to true, like so:"
msgstr ""
"Por ejemplo, para un CellRendererText, establecería la propiedad "
"<emphasis>editable</emphasis> de la celda a «true», así:"

#: C/gtkmm-tutorial-in.xml:2608(programlisting)
#, no-wrap
msgid "cell.property_editable() = true;"
msgstr "cell.property_editable() = true;"

#: C/gtkmm-tutorial-in.xml:2609(para)
msgid ""
"For a CellRendererToggle, you would set the <emphasis>activatable</emphasis> "
"property instead."
msgstr ""
"Para un CellRendererToggle, establecería la propiedad <emphasis>activable</"
"emphasis> en su lugar."

#: C/gtkmm-tutorial-in.xml:2613(para)
msgid ""
"You can then connect to the appropriate \"edited\" signal. For instance, "
"connect to <methodname>Gtk::CellRendererText::signal_edited()</methodname>, "
"or <methodname>Gtk::CellRendererToggle::signal_toggled()</methodname>. If "
"the column contains more than one <classname>CellRenderer</classname> then "
"you will need to use <methodname>Gtk::TreeView::get_column()</methodname> "
"and then call <methodname>get_cell_renderers()</methodname> on that view "
"Column."
msgstr ""
"Entonces, puede conectar la señal «edited» apropiada. Por ejemplo, "
"conectarlo a <methodname>Gtk::CellRendererText::signal_edited()</"
"methodname>, o a <methodname>Gtk::CellRendererToggle::signal_toggled()</"
"methodname>. Si la columna contiene más de un <classname>CellRenderer</"
"classname>, entonces tendrá que usar <methodname>Gtk::TreeView::get_column()"
"</methodname> y luego llamar a <methodname>get_cell_renderers()</methodname> "
"en esa columna de la vista."

#: C/gtkmm-tutorial-in.xml:2621(para)
msgid ""
"In your signal handler, you should examine the new value and then store it "
"in the Model if that is appropriate for your application."
msgstr ""
"En su manejador de señales, debe examinar el valor nuevo y luego almacenarlo "
"en el modelo, si eso es lo apropiado para su aplicación."

#: C/gtkmm-tutorial-in.xml:2633(title)
msgid "Iterating over Model Rows"
msgstr "Iterar sobre las filas del modelo"

#: C/gtkmm-tutorial-in.xml:2634(para)
msgid ""
"<classname>Gtk::TreeModel</classname> provides a C++ Standard Library-style "
"container of its children, via the <methodname>children()</methodname> "
"method. You can use the familiar <methodname>begin()</methodname> and "
"<methodname>end()</methodname> methods iterator incrementing, like so:"
msgstr ""
"<classname>Gtk::TreeModel</classname> proporciona un contenedor de sus hijos "
"al estilo de las bibliotecas C++ estándar, a través del método "
"<methodname>children()</methodname>. Puede usar los incrementos del iterador "
"familiares de los métodos <methodname>begin()</methodname> y <methodname>end"
"()</methodname>."

#: C/gtkmm-tutorial-in.xml:2640(programlisting)
#, no-wrap
msgid ""
"typedef Gtk::TreeModel::Children type_children; //minimise code length.\n"
"type_children children = refModel-&gt;children();\n"
"for(type_children::iterator iter = children.begin();\n"
"    iter != children.end(); ++iter)\n"
"{\n"
"  Gtk::TreeModel::Row row = *iter;\n"
"  //Do something with the row - see above for set/get.\n"
"}"
msgstr ""
"typedef Gtk::TreeModel::Children type_children; //minimise code length.\n"
"type_children children = refModel-&gt;children();\n"
"for(type_children::iterator iter = children.begin();\n"
"    iter != children.end(); ++iter)\n"
"{\n"
"  Gtk::TreeModel::Row row = *iter;\n"
"  //Do something with the row - see above for set/get.\n"
"}"

#: C/gtkmm-tutorial-in.xml:2650(title)
msgid "Row children"
msgstr "Fila hija"

#: C/gtkmm-tutorial-in.xml:2655(programlisting)
#, no-wrap
msgid "Gtk::TreeModel::Children children = row.children();"
msgstr "Gtk::TreeModel::Children children = row.children();"

#: C/gtkmm-tutorial-in.xml:2651(para)
msgid ""
"When using a <classname>Gtk::TreeStore</classname>, the rows can have child "
"rows, which can have their own children in turn. Use <methodname>Gtk::"
"TreeModel::Row::children()</methodname> to get the container of child "
"<classname>Row</classname>s: <placeholder-1/>"
msgstr ""
"Cuando usa un <classname>Gtk::TreeStore</classname>, las filas pueden tener "
"filas hijas, que a su vez pueden tener sus propios hijos. Use "
"<methodname>Gtk::TreeModel::Row::children()</methodname> para obtener el "
"contenedor de las <classname>Row</classname> hijas: <placeholder-1/>"

#: C/gtkmm-tutorial-in.xml:2662(title)
msgid "The Selection"
msgstr "La selección"

#: C/gtkmm-tutorial-in.xml:2663(para)
msgid ""
"To find out what rows the user has selected, get the <classname>Gtk::"
"TreeView::Selection</classname> object from the <classname>TreeView</"
"classname>, like so:"
msgstr ""
"Para descubrir qué filas ha seleccionado el usuario, obtenga el objeto "
"<classname>Gtk::TreeView::Selection</classname> del <classname>TreeView</"
"classname>, así:"

#: C/gtkmm-tutorial-in.xml:2668(programlisting)
#, no-wrap
msgid ""
"Glib::RefPtr&lt;Gtk::TreeSelection&gt; refTreeSelection =\n"
"    m_TreeView.get_selection();"
msgstr ""
"Glib::RefPtr&lt;Gtk::TreeSelection&gt; refTreeSelection =\n"
"    m_TreeView.get_selection();"

#: C/gtkmm-tutorial-in.xml:2672(title)
msgid "Single or multiple selection"
msgstr "Selección única o múltiple"

#: C/gtkmm-tutorial-in.xml:2676(programlisting)
#, no-wrap
msgid "refTreeSelection-&gt;set_mode(Gtk::SELECTION_MULTIPLE);"
msgstr "refTreeSelection-&gt;set_mode(Gtk::SELECTION_MULTIPLE);"

#: C/gtkmm-tutorial-in.xml:2673(para)
msgid ""
"By default, only single rows can be selected, but you can allow multiple "
"selection by setting the mode, like so: <placeholder-1/>"
msgstr ""
"De manera predeterminada, sólo se pueden seleccionar filas únicas, pero "
"puede permitir la selección múltiple estableciendo el modo, así: "
"<placeholder-1/>"

#: C/gtkmm-tutorial-in.xml:2681(title)
msgid "The selected rows"
msgstr "Las filas seleccionadas"

#: C/gtkmm-tutorial-in.xml:2682(para)
msgid ""
"For single-selection, you can just call <methodname>get_selected()</"
"methodname>, like so:"
msgstr ""
"Para la selección simple, puede simplemente llamar <methodname>get_selected()"
"</methodname>, así:"

#: C/gtkmm-tutorial-in.xml:2686(programlisting)
#, no-wrap
msgid ""
"TreeModel::iterator iter = refTreeSelection-&gt;get_selected();\n"
"if(iter) //If anything is selected\n"
"{\n"
"  TreeModel::Row row = *iter;\n"
"  //Do something with the row.\n"
"}"
msgstr ""
"TreeModel::iterator iter = refTreeSelection-&gt;get_selected();\n"
"if(iter) //If anything is selected\n"
"{\n"
"  TreeModel::Row row = *iter;\n"
"  //Do something with the row.\n"
"}"

#: C/gtkmm-tutorial-in.xml:2693(para)
msgid ""
"For multiple-selection, you need to define a callback, and give it to "
"<methodname>selected_foreach()</methodname>, "
"<methodname>selected_foreach_path()</methodname>, or "
"<methodname>selected_foreach_iter()</methodname>, like so:"
msgstr ""
"Para la selección múltiple, debe definir una devolución de llamada, y "
"pasársela a <methodname>selected_foreach()</methodname>, "
"<methodname>selected_foreach_path()</methodname>, o "
"<methodname>selected_foreach_iter()</methodname>, así:"

#: C/gtkmm-tutorial-in.xml:2699(programlisting)
#, no-wrap
msgid ""
"refTreeSelection-&gt;selected_foreach_iter(\n"
"    sigc::mem_fun(*this, &amp;TheClass::selected_row_callback) );\n"
"\n"
"void TheClass::selected_row_callback(\n"
"    const Gtk::TreeModel::iterator&amp; iter)\n"
"{\n"
"  TreeModel::Row row = *iter;\n"
"  //Do something with the row.\n"
"}"
msgstr ""
"refTreeSelection-&gt;selected_foreach_iter(\n"
"    sigc::mem_fun(*this, &amp;TheClass::selected_row_callback) );\n"
"\n"
"void TheClass::selected_row_callback(\n"
"    const Gtk::TreeModel::iterator&amp; iter)\n"
"{\n"
"  TreeModel::Row row = *iter;\n"
"  //Do something with the row.\n"
"}"

#: C/gtkmm-tutorial-in.xml:2712(title)
msgid "The \"changed\" signal"
msgstr "La señal «changed»"

#: C/gtkmm-tutorial-in.xml:2713(para)
msgid ""
"To respond to the user clicking on a row or range of rows, connect to the "
"signal like so:"
msgstr ""
"Para responder a la pulsación del usuario en una fila o un rango de filas, "
"conéctese a la señal así:"

#: C/gtkmm-tutorial-in.xml:2717(programlisting)
#, no-wrap
msgid ""
"refTreeSelection-&gt;signal_changed().connect(\n"
"    sigc::mem_fun(*this, &amp;Example_StockBrowser::on_selection_changed)\n"
");"
msgstr ""
"refTreeSelection-&gt;signal_changed().connect(\n"
"    sigc::mem_fun(*this, &amp;Example_StockBrowser::on_selection_changed)\n"
");"

#: C/gtkmm-tutorial-in.xml:2723(title)
msgid "Preventing row selection"
msgstr "Evitar la selección de la fila"

#: C/gtkmm-tutorial-in.xml:2724(para)
msgid ""
"Maybe the user should not be able to select every item in your list or tree. "
"For instance, in the gtk-demo, you can select a demo to see the source code, "
"but it doesn't make any sense to select a demo category."
msgstr ""
"Tal vez, el usuario no deba ser capaz de seleccionar todos los elementos en "
"su lista o árbol. Por ejemplo, en gtk-demo, puede seleccionar una "
"demostración para ver su código fuente, pero no tiene ningún sentido "
"seleccionar una categoría de demostraciones."

#: C/gtkmm-tutorial-in.xml:2729(para)
msgid ""
"To control which rows can be selected, use the "
"<methodname>set_select_function()</methodname> method, providing a "
"<classname>sigc::slot</classname> callback. For instance:"
msgstr ""
"Para controlar qué filas pueden seleccionarse, use el método "
"<methodname>set_select_function()</methodname>, proporcionándole una "
"devolución de llamada <classname>sigc::slot</classname>. Por ejemplo:"

#: C/gtkmm-tutorial-in.xml:2734(programlisting)
#, no-wrap
msgid ""
"m_refTreeSelection-&gt;set_select_function( sigc::mem_fun(*this,\n"
"    &amp;DemoWindow::select_function) );"
msgstr ""
"m_refTreeSelection-&gt;set_select_function( sigc::mem_fun(*this,\n"
"    &amp;DemoWindow::select_function) );"

#: C/gtkmm-tutorial-in.xml:2736(para)
msgid "and then"
msgstr "Y luego"

#: C/gtkmm-tutorial-in.xml:2739(programlisting)
#, no-wrap
msgid ""
"bool DemoWindow::select_function(\n"
"    const Glib::RefPtr&lt;Gtk::TreeModel&gt;&amp; model,\n"
"    const Gtk::TreeModel::Path&amp; path, bool)\n"
"{\n"
"  const Gtk::TreeModel::iterator iter = model-&gt;get_iter(path);\n"
"  return iter-&gt;children().empty(); // only allow leaf nodes to be selected\n"
"}"
msgstr ""
"bool DemoWindow::select_function(\n"
"    const Glib::RefPtr&lt;Gtk::TreeModel&gt;&amp; model,\n"
"    const Gtk::TreeModel::Path&amp; path, bool)\n"
"{\n"
"  const Gtk::TreeModel::iterator iter = model-&gt;get_iter(path);\n"
"  return iter-&gt;children().empty(); // only allow leaf nodes to be selected\n"
"}"

#: C/gtkmm-tutorial-in.xml:2749(title)
msgid "Changing the selection"
msgstr "Cambiar la selección"

#: C/gtkmm-tutorial-in.xml:2750(para)
msgid ""
"To change the selection, specify a <classname>Gtk::TreeModel::iterator</"
"classname> or <classname>Gtk::TreeModel::Row</classname>, like so:"
msgstr ""
"Para cambiar la selección, especifique un <classname>Gtk::TreeModel::"
"iterator</classname> o un <classname>Gtk::TreeModel::Row</classname>, así:"

#: C/gtkmm-tutorial-in.xml:2755(programlisting)
#, no-wrap
msgid ""
"Gtk::TreeModel::Row row = m_refModel-&gt;children()[5]; //The fifth row.\n"
"if(row)\n"
"  refTreeSelection-&gt;select(row);"
msgstr ""
"Gtk::TreeModel::Row row = m_refModel-&gt;children()[5]; //The fifth row.\n"
"if(row)\n"
"  refTreeSelection-&gt;select(row);"

#: C/gtkmm-tutorial-in.xml:2758(para)
msgid "or"
msgstr "o"

#: C/gtkmm-tutorial-in.xml:2761(programlisting)
#, no-wrap
msgid ""
"Gtk::TreeModel::iterator iter = m_refModel-&gt;children().begin()\n"
"if(iter)\n"
"  refTreeSelection-&gt;select(iter);"
msgstr ""
"Gtk::TreeModel::iterator iter = m_refModel-&gt;children().begin()\n"
"if(iter)\n"
"  refTreeSelection-&gt;select(iter);"

#: C/gtkmm-tutorial-in.xml:2770(title)
msgid "Sorting"
msgstr "Ordenar"

#: C/gtkmm-tutorial-in.xml:2771(para)
msgid ""
"The standard tree models (<classname>TreeStore</classname> and "
"<classname>ListStore</classname>) derive from <classname>TreeSortable</"
"classname>, so they offer sorting functionality. For instance, call "
"<methodname>set_sort_column()</methodname>, to sort the model by the "
"specified column. Or supply a callback function to <methodname>set_sort_func"
"()</methodname> to implement a more complicated sorting algorithm."
msgstr ""
"Los modelos de árbol estándar (<classname>TreeStore</classname> y "
"<classname>ListStore</classname>) derivan de <classname>TreeSortable</"
"classname>, por lo que ofrecen funciones de ordenación. Por ejemplo, llame a "
"<methodname>set_sort_column()</methodname> para ordenar el modelo por la "
"columna especificada. O, proporcione una función de retorno de llamada a "
"<methodname>set_sort_func()</methodname> para implementar un algoritmo de "
"ordenación más complejo."

#: C/gtkmm-tutorial-in.xml:2775(ulink)
msgid "TreeSortable Reference"
msgstr "Referencia de TreeSortable"

#: C/gtkmm-tutorial-in.xml:2778(title)
msgid "Sorting by clicking on columns"
msgstr "Ordenación al pulsar en columnas"

#: C/gtkmm-tutorial-in.xml:2779(para)
msgid ""
"So that a user can click on a <classname>TreeView</classname>'s column "
"header to sort the <classname>TreeView</classname>'s contents, call "
"<methodname>Gtk::TreeViewModel::set_sort_column()</methodname>, supplying "
"the model column on which model should be sorted when the header is clicked. "
"For instance:"
msgstr ""
"Para que un usuario pueda pulsar en la cabecera de una columna de un "
"<classname>TreeView</classname> para ordenar el contenido del "
"<classname>TreeView</classname>, llame a <methodname>Gtk::TreeViewModel::"
"set_sort_column()</methodname>, proporcionando al modelo la columna por la "
"que se deba ordenar cuando se pulse sobre la cabecera. Por ejemplo:"

#: C/gtkmm-tutorial-in.xml:2782(programlisting)
#, no-wrap
msgid ""
"Gtk::TreeView::Column* pColumn = treeview.get_column(0);\n"
"if(pColumn)\n"
"  pColumn-&gt;set_sort_column(m_columns.m_col_id);"
msgstr ""
"Gtk::TreeView::Column* pColumn = treeview.get_column(0);\n"
"if(pColumn)\n"
"  pColumn-&gt;set_sort_column(m_columns.m_col_id);"

#: C/gtkmm-tutorial-in.xml:2788(title)
msgid "Independently sorted views of the same model"
msgstr "Vistas ordenadas independientemente del mismo modelo"

#: C/gtkmm-tutorial-in.xml:2789(para)
msgid ""
"The <classname>TreeView</classname> already allows you to show the same "
"<classname>TreeModel</classname> in two <classname>TreeView</classname> "
"widgets. If you need one of these TreeViews to sort the model differently "
"than the other then you should use a <classname>TreeModelSort</classname> "
"instead of just, for instance, <methodname>Gtk::TreeViewModel::"
"set_sort_column()</methodname>. <classname>TreeModelSort</classname> is a "
"model that contains another model, presenting a sorted version of that "
"model. For instance, you might add a sorted version of a model to a "
"<classname>TreeView</classname> like so:"
msgstr ""
"El <classname>TreeView</classname> ya le permite mostrar al mismo "
"<classname>TreeModel</classname> en dos widgets <classname>TreeView</"
"classname>. Si necesita que uno de estos «TreeView» ordene el modelo de "
"manera diferente al otro, entonces use un <classname>TreeModelSort</"
"classname> en lugar de solo, por ejemplo, <methodname>Gtk::TreeViewModel::"
"set_sort_column()</methodname>. <classname>TreeModelSort</classname> es un "
"modelo que contiene a otro modelo, presentando una versión ordenada de ese "
"modelo. Por ejemplo, puede añadir una versión ordenada de un modelo a un "
"<classname>TreeView</classname> así:"

#: C/gtkmm-tutorial-in.xml:2792(programlisting)
#, no-wrap
msgid ""
"Glib::RefPtr&lt;Gtk::TreeModelSort&gt; sorted_model =\n"
"    Gtk::TreeModelSort::create(model);\n"
"sorted_model-&gt;set_sort_column(columns.m_col_name, Gtk::SORT_ASCENDING);\n"
"treeview.set_model(sorted_model);"
msgstr ""
"Glib::RefPtr&lt;Gtk::TreeModelSort&gt; sorted_model =\n"
"    Gtk::TreeModelSort::create(model);\n"
"sorted_model-&gt;set_sort_column(columns.m_col_name, Gtk::SORT_ASCENDING);\n"
"treeview.set_model(sorted_model);"

#: C/gtkmm-tutorial-in.xml:2797(para)
msgid ""
"Note, however, that the TreeView will provide iterators to the sorted model. "
"You must convert them to iterators to the underlying child model in order to "
"perform actions on that model. For instance:"
msgstr ""
"Tenga en cuenta, sin embargo, que el «TreeView» le proporcionará iteradores "
"al modelo ordenado. Debe convertirlos a iteradores del modelo hijo "
"subyacente para llevar a cabo acciones en ese modelo. Por ejemplo:"

#: C/gtkmm-tutorial-in.xml:2799(programlisting)
#, no-wrap
msgid ""
"void ExampleWindow::on_button_delete()\n"
"{\n"
"  Glib::RefPtr&lt;Gtk::TreeSelection&gt; refTreeSelection =\n"
"      m_treeview.get_selection();\n"
"  if(refTreeSelection)\n"
"  {\n"
"    Gtk::TreeModel::iterator sorted_iter =\n"
"        m_refTreeSelection-&gt;get_selected();\n"
"    if(sorted_iter)\n"
"    {\n"
"      Gtk::TreeModel::iterator iter =\n"
"          m_refModelSort-&gt;convert_iter_to_child_iter(sorted_iter);\n"
"      m_refModel-&gt;erase(iter);\n"
"    }\n"
"  }\n"
"}"
msgstr ""
"void ExampleWindow::on_button_delete()\n"
"{\n"
"  Glib::RefPtr&lt;Gtk::TreeSelection&gt; refTreeSelection =\n"
"      m_treeview.get_selection();\n"
"  if(refTreeSelection)\n"
"  {\n"
"    Gtk::TreeModel::iterator sorted_iter =\n"
"        m_refTreeSelection-&gt;get_selected();\n"
"    if(sorted_iter)\n"
"    {\n"
"      Gtk::TreeModel::iterator iter =\n"
"          m_refModelSort-&gt;convert_iter_to_child_iter(sorted_iter);\n"
"      m_refModel-&gt;erase(iter);\n"
"    }\n"
"  }\n"
"}"

#: C/gtkmm-tutorial-in.xml:2816(ulink)
msgid "TreeModelSort Reference"
msgstr "Referencia de TreeModelSort"

#: C/gtkmm-tutorial-in.xml:2822(title) C/gtkmm-tutorial-in.xml:2929(title)
#: C/gtkmm-tutorial-in.xml:3619(title) C/gtkmm-tutorial-in.xml:4626(title)
#: C/gtkmm-tutorial-in.xml:4788(title)
msgid "Drag and Drop"
msgstr "Arrastrar y soltar"

#: C/gtkmm-tutorial-in.xml:2823(para)
msgid ""
"<classname>Gtk::TreeView</classname> already implments simple drag-and-drop "
"when used with the <classname>Gtk::ListStore</classname> or <classname>Gtk::"
"TreeStore</classname> models. If necessary, it also allows you to implement "
"more complex behaviour when items are dragged and dropped, using the normal "
"<link linkend=\"chapter-draganddrop\">Drag and Drop</link> API."
msgstr ""
"<classname>Gtk::TreeView</classname> ya implementa un simple «arrastrar y "
"soltar» cuando se usa con los modelos <classname>Gtk::ListStore</classname> "
"o <classname>Gtk::TreeStore</classname>. Si es necesario, también le permite "
"implementar un comportamiento más complejo cuando se arrastran y sueltan los "
"elementos, usando la API de <link linkend=\"chapter-draganddrop\">Arrastrar "
"y soltar</link> normal."

#: C/gtkmm-tutorial-in.xml:2832(title)
msgid "Reorderable rows"
msgstr "Filas reordenables"

#: C/gtkmm-tutorial-in.xml:2833(para)
msgid ""
"If you call <methodname>Gtk::TreeView::set_reorderable()</methodname> then "
"your TreeView's items can be moved within the treeview itself. This is "
"demonstrated in the <classname>TreeStore</classname> example."
msgstr ""
"Si llama a <methodname>Gtk::TreeView::set:reorderable</methodname>, entonces "
"se podrán mover los elementos de su «TreeView» dentro del «TreeView» en sí. "
"Esto se demuestra en el ejemplo <classname>TreeStore</classname>."

#: C/gtkmm-tutorial-in.xml:2838(para)
msgid ""
"However, this does not allow you any control of which items can be dragged, "
"and where they can be dropped. If you need that extra control then you might "
"create a derived <literal>Gtk::TreeModel</literal> from <literal>Gtk::"
"TreeStore</literal> or <literal>Gtk::ListStore</literal> and override the "
"<literal>Gtk::TreeDragSource::row_draggable()</literal> and <literal>Gdk::"
"TreeDragDest::row_drop_possible()</literal> virtual methods. You can examine "
"the <literal>Gtk::TreeModel::Path</literal>s provided and allow or disallow "
"dragging or dropping by returning <literal>true</literal> or <literal>false</"
"literal>."
msgstr ""
"Sin embargo, esto no le permite ningún control acerca de qué elementos "
"pueden arrastrarse, ni dónde pueden soltarse. Si necesita ese control "
"adicional, puede crear un <literal>Gtk::TreeModel</literal> derivado de "
"<literal>Gtk::TreeStore</literal> o <literal>Gtk::ListStore</literal> y "
"sobrecargar los métodos virtuales <literal>Gtk::TreeDragSource::row_draggable"
"()</literal> y <literal>Gdk::TreeDragDest::row_drop_possible()</literal>. "
"Puede examinar los <literal>Gtk::TreeModel::Path</literal> proporcionados y "
"permitir o no arrastrar y soltar devolviendo <literal>true</literal> o "
"<literal>false</literal>."

#: C/gtkmm-tutorial-in.xml:2839(para)
msgid "This is demonstrated in the drag_and_drop example."
msgstr "Esto se demuestra en el ejemplo «drag_and_drop»."

#: C/gtkmm-tutorial-in.xml:2845(title) C/gtkmm-tutorial-in.xml:2951(title)
msgid "Popup Context Menu"
msgstr "Menú contextual emergente"

#: C/gtkmm-tutorial-in.xml:2846(para)
msgid ""
"Lots of people need to implement right-click context menus for "
"<classname>TreeView</classname>'s so we will explain how to do that here to "
"save you some time. Apart from one or two points, it's much the same as a "
"normal context menu, as described in the <link linkend=\"sec-menus-popup"
"\">menus chapter</link>."
msgstr ""
"Mucha gente necesita implementar menús contextuales del botón derecho para "
"los <classname>TreeView</classname>, por lo que se explicará cómo hacerlo "
"para ahorrarle tiempo. Excepto uno o dos puntos, es muy parecido a un menú "
"contextual normal, tal como se describe en el <link linkend=\"sec-menus-popup"
"\">capítulo acerca de menús</link>."

#: C/gtkmm-tutorial-in.xml:2855(title)
msgid "Handling <literal>button_press_event</literal>"
msgstr "Manejar <literal>button_press_event</literal>"

#: C/gtkmm-tutorial-in.xml:2856(para)
msgid ""
"To detect a click of the right mouse button, you need to handle the "
"<literal>button_press_event</literal> signal, and check exactly which button "
"was pressed. Because the <classname>TreeView</classname> normally handles "
"this signal completely, you need to either override the default signal "
"handler in a derived <classname>TreeView</classname> class, or use "
"<methodname>connect_nofify()</methodname> instead of <methodname>connect()</"
"methodname>. You probably also want to call the default handler before doing "
"anything else, so that the right-click will cause the row to be selected "
"first."
msgstr ""
"Para detectar la pulsación del botón derecho del ratón, debe manejar la "
"señal <literal>button_press_event</literal>, y verificar exactamente qué "
"botón se ha pulsado. Dado que el <classname>TreeView</classname> normalmente "
"maneja esta señal por completo, necesitará sobrecargar el manejador de "
"señales predeterminado en una clase <classname>TreeView</classname> derivada "
"o bien usar el método <methodname>connect_notify()</methodname> en lugar de "
"<methodname>connect()</methodname>. Probablemente también quiera llamar al "
"manejador predeterminado antes de hacer nada más, para que la pulsación "
"derecha haga que se seleccione la fila primero."

#: C/gtkmm-tutorial-in.xml:2866(para)
msgid "This is demonstrated in the Popup Custom Menu example."
msgstr "Esto queda demostrado en el ejemplo del menú emergente personalizado."

#: C/gtkmm-tutorial-in.xml:2871(title) C/gtkmm-tutorial-in.xml:3380(title)
#: C/gtkmm-tutorial-in.xml:3555(title) C/gtkmm-tutorial-in.xml:4937(title)
msgid "Examples"
msgstr "Ejemplos"

#: C/gtkmm-tutorial-in.xml:2873(title)
msgid "ListStore"
msgstr "ListStore"

#: C/gtkmm-tutorial-in.xml:2874(para)
msgid ""
"This example has a <classname>Gtk::TreeView</classname> widget, with a "
"<classname>Gtk::ListStore</classname> model."
msgstr ""
"Este ejemplo tiene un widget <classname>Gtk::TreeView</classname>, con un "
"modelo <classname>Gtk::ListStore</classname>."

#: C/gtkmm-tutorial-in.xml:2891(title)
msgid "TreeStore"
msgstr "TreeStore"

#: C/gtkmm-tutorial-in.xml:2893(para)
msgid ""
"This example is very similar to the <classname>ListStore</classname> "
"example, but uses a <classname>Gtk::TreeStore</classname> model instead, and "
"adds children to the rows."
msgstr ""
"Este ejemplo es muy similar al ejemplo del <classname>ListStore</classname>, "
"pero usa el modelo <classname>Gtk::TreeStore</classname> en su lugar, y le "
"añade hijos a las filas."

#: C/gtkmm-tutorial-in.xml:2912(para)
msgid ""
"This example is identical to the <classname>ListStore</classname> example, "
"but it uses <methodname>TreeView::append_column_editable()</methodname> "
"instead of <methodname>TreeView::append_column()</methodname>."
msgstr ""
"Este ejemplo es idéntico al del <classname>ListStore</classname>, pero usa "
"<methodname>TreeView::append_column_editable()</methodname> en lugar de "
"<methodname>TreeView::append_column()</methodname>."

#: C/gtkmm-tutorial-in.xml:2919(title)
msgid "TreeView - Editable Cells"
msgstr "TreeView: celdas editables"

# En el original, hay un punto adicional al final.
# Nicolás.
#: C/gtkmm-tutorial-in.xml:2931(para)
msgid ""
"This example is much like the <classname>TreeStore</classname> example, but "
"has 2 extra columns to indicate whether the row can be dragged, and whether "
"it can receive drag-and-dropped rows. It uses a derived <classname>Gtk::"
"TreeStore</classname> which overrides the virtual functions as described in "
"the <link linkend=\"sec-treeview-draganddrop\">TreeView Drag and Drop</link> "
"section."
msgstr ""
"Este ejemplo es muy parecido al ejemplo del <classname>TreeStore</"
"classname>, pero tiene dos columnas adicionales que indican si la fila se "
"puede arrastrar, y si puede recibir filas arrastradas y soltadas. Usa un "
"<classname>Gtk::TreeStore</classname> derivado, que sobrecarga las funciones "
"virtuales como se describe en la sección <link linkend=\"sec-treeview-"
"draganddrop\">TreeView: arrastrar y soltar</link>."

#: C/gtkmm-tutorial-in.xml:2941(title)
msgid "TreeView - Drag And Drop"
msgstr "TreeView: arrastrar y soltar"

#: C/gtkmm-tutorial-in.xml:2953(para)
msgid ""
"This example is much like the <classname>ListStore</classname> example, but "
"derives a custom <classname>TreeView</classname> in order to override the "
"<literal>button_press_event</literal>, and also to encapsulate the tree "
"model code in our derived class. See the <link linkend=\"sec-treeview-"
"contextmenu\">TreeView Popup Context Menu</link> section."
msgstr ""
"Este ejemplo es muy parecido al ejemplo del <classname>ListStore</"
"classname>, pero deriva un <classname>TreeView</classname> personalizado "
"para sobrecargar al <literal>button_press_event</literal>, y también "
"encapsular al código del modelo de árbol en la clase derivada. Consulte la "
"sección <link linkend=\"sec-treeview-contextmenu\">TreeView: menú contextual "
"emergente</link>."

#: C/gtkmm-tutorial-in.xml:2963(title)
msgid "TreeView - Popup Context Menu"
msgstr "TreeView: menú de contexto emergente"

#: C/gtkmm-tutorial-in.xml:2980(title)
msgid "Combo Boxes"
msgstr "Cajas combinadas"

#: C/gtkmm-tutorial-in.xml:2982(para)
msgid ""
"The <classname>ComboBox</classname> widget offers a list (or tree) of "
"choices in a dropdown menu. If appropriate, it can show extra information "
"about each item, such as text, a picture, a checkbox, or a progress bar. The "
"<classname>ComboBox</classname> widget usually restricts the user to the "
"available choices, but it can optionally have an <classname>Entry</"
"classname>, allowing the user to enter arbitrary text if none of the "
"available choices are suitable."
msgstr ""
"Los widgets <classname>ComboBox</classname> ofrecen una lista (o árbol) de "
"opciones en un menú desplegable. Si es apropiado, puede mostrar información "
"adicional acerca de cada elemento, como texto, una imagen, una casilla de "
"verificación, o una barra de progreso. Generalmente, el widget "
"<classname>ComboBox</classname> sólo le permite elegir al usuario entre las "
"opciones disponibles, pero opcionalmente puede tener un <classname>Entry</"
"classname>, permitiéndole al usuario introducir texto arbitrario si ninguna "
"de las opciones disponibles es apropiada."

#: C/gtkmm-tutorial-in.xml:2985(para)
msgid ""
"The list is provided via a <classname>TreeModel</classname>, and columns "
"from this model are added to the ComboBox's view with the "
"<methodname>ComboBox::pack_start()</methodname> method. This provides "
"flexibility and compile-time type-safety, but the <classname>ComboBoxText</"
"classname> class provides a simpler text-based specialization in case that "
"flexibility is not required."
msgstr ""
"Un <classname>TreeModel</classname> proporciona la lista, y las columnas de "
"este modelo se añaden a la vista del «ComboBox» con el método "
"<methodname>ComboBox::pack_start()</methodname>. Esto proporciona "
"flexibilidad y seguridad de tipos en tiempo de compilación, pero la clase "
"<classname>ComboBoxText</classname> proporciona una especialización más "
"simple basada en texto en caso de que no se requiera la flexibilidad."

#: C/gtkmm-tutorial-in.xml:2991(title)
msgid "The model"
msgstr "El modelo"

#: C/gtkmm-tutorial-in.xml:2992(para)
msgid ""
"The model for a ComboBox can be defined and filled exactly as for a "
"<classname>TreeView</classname>. For instance, you might derive a ComboBox "
"class with one integer and one text column, like so:"
msgstr ""
"El modelo de una «ComboBox» puede definirse y llenarse exactamente como un "
"<classname>TreeView</classname>. Por ejemplo, puede derivar una clase "
"«ComboBox» con una columna de números enteros y otra de texto, así:"

#: C/gtkmm-tutorial-in.xml:2994(programlisting)
#, no-wrap
msgid ""
"ModelColumns()\n"
"{ add(m_col_id); add(m_col_name); }\n"
"\n"
"  Gtk::TreeModelColumn&lt;int&gt; m_col_id;\n"
"  Gtk::TreeModelColumn&lt;Glib::ustring&gt; m_col_name;\n"
"};\n"
"\n"
"ModelColumns m_columns;"
msgstr ""
"ModelColumns()\n"
"{ add(m_col_id); add(m_col_name); }\n"
"\n"
"  Gtk::TreeModelColumn&lt;int&gt; m_col_id;\n"
"  Gtk::TreeModelColumn&lt;Glib::ustring&gt; m_col_name;\n"
"};\n"
"\n"
"ModelColumns m_columns;"

#: C/gtkmm-tutorial-in.xml:3003(para)
msgid ""
"After appending rows to this model, you should provide the model to the "
"<classname>ComboBox</classname> with the <methodname>set_model()</"
"methodname> method. Then use the <methodname>pack_start()</methodname> or "
"<methodname>pack_end()</methodname> methods to specify what columns will be "
"displayed in the ComboBox. As with the TreeView you may either use the "
"default cell renderer by passing the <classname>TreeModelColumn</classname> "
"to the pack methods, or you may instantiate a specific "
"<classname>CellRenderer</classname> and specify a particular mapping with "
"either <methodname>add_attribute()</methodname> or "
"<methodname>set_cell_data_func()</methodname>. Note that these methods are "
"in the <classname>CellLayout</classname> base class."
msgstr ""
"Después de añadirle las filas a este modelo, deberá proporcionárselo al "
"<classname>ComboBox</classname> con el método <methodname>set_model()</"
"methodname>. Luego, use los métodos <methodname>pack_start()</methodname> o "
"<methodname>pack_end()</methodname> para especificar qué columnas se "
"mostrarán en el «ComboBox». Al igual que con el «TreeView», podrá usar el "
"«CellRenderer» predeterminado pasándole la <classname>TreeModelColumn</"
"classname> a los métodos de empaquetado, o puede instanciar un "
"<classname>CellRenderer</classname> específico y definir un mapeado "
"particular con <methodname>add_attribute()</methodname> o "
"<methodname>set_cell_data_func()</methodname>. Tenga en cuenta que estos "
"métodos están en la clase base <classname>CellLayout</classname>."

#: C/gtkmm-tutorial-in.xml:3007(title)
msgid "The chosen item"
msgstr "El elemento elegido"

#: C/gtkmm-tutorial-in.xml:3008(para)
msgid ""
"To discover what item, if any, the user has chosen from the ComboBox, call "
"<methodname>ComboBox::get_active()</methodname>. This returns a "
"<classname>TreeModel::iterator</classname> that you can dereference to a "
"<classname>Row</classname> in order to read the values in your columns. For "
"instance, you might read an integer ID value from the model, even though you "
"have chosen only to show the human-readable description in the Combo. For "
"instance:"
msgstr ""
"Para descubrir si qué elemento seleccionó el usuario, de un «ComboBox», "
"llame a <methodname>ComboBox::get_active()</methodname>. Esto devuelve un "
"<classname>TreeModel::iterator</classname> que puede desreferenciar a una "
"<classname>Row</classname> para leer los valores de sus columnas. Por "
"ejemplo, puede leer el valor de ID de un entero del modelo, incluso a pesar "
"de que ha seleccionado mostrar sólo la descripción legible por los humanos "
"en el «Combo». Por ejemplo:"

#: C/gtkmm-tutorial-in.xml:3010(programlisting)
#, no-wrap
msgid ""
"Gtk::TreeModel::iterator iter = m_Combo.get_active();\n"
"if(iter)\n"
"{\n"
"  Gtk::TreeModel::Row row = *iter;\n"
"\n"
"  //Get the data for the selected row, using our knowledge\n"
"  //of the tree model:\n"
"  int id = row[m_Columns.m_col_id];\n"
"  set_something_id_chosen(id); //Your own function.\n"
"}\n"
"else\n"
"  set_nothing_chosen(); //Your own function."
msgstr ""
"Gtk::TreeModel::iterator iter = m_Combo.get_active();\n"
"if(iter)\n"
"{\n"
"  Gtk::TreeModel::Row row = *iter;\n"
"\n"
"  //Get the data for the selected row, using our knowledge\n"
"  //of the tree model:\n"
"  int id = row[m_Columns.m_col_id];\n"
"  set_something_id_chosen(id); //Your own function.\n"
"}\n"
"else\n"
"  set_nothing_chosen(); //Your own function."

#: C/gtkmm-tutorial-in.xml:3025(title) C/gtkmm-tutorial-in.xml:3081(title)
msgid "Responding to changes"
msgstr "Responder a los cambios"

#: C/gtkmm-tutorial-in.xml:3026(para)
msgid ""
"You might need to react to every change of selection in the ComboBox, for "
"instance to update other widgets. To do so, you should handle the "
"<literal>changed</literal> signal. For instance:"
msgstr ""
"Tal vez necesite reaccionar a cada cambio de la selección en el «ComboBox», "
"por ejemplo, para actualizar otros widgets. Para hacer esto, debe manejar la "
"señal <literal>changed</literal>. Por ejemplo:"

#: C/gtkmm-tutorial-in.xml:3029(programlisting)
#, no-wrap
msgid ""
"m_combo.signal_changed().connect( sigc::mem_fun(*this,\n"
"      &amp;ExampleWindow::on_combo_changed) );"
msgstr ""
"m_combo.signal_changed().connect( sigc::mem_fun(*this,\n"
"      &amp;ExampleWindow::on_combo_changed) );"

#: C/gtkmm-tutorial-in.xml:3033(title) C/gtkmm-tutorial-in.xml:3138(title)
msgid "Full Example"
msgstr "Ejemplo completo"

#: C/gtkmm-tutorial-in.xml:3036(title)
msgid "ComboBox"
msgstr "ComboBox"

#: C/gtkmm-tutorial-in.xml:3046(title) C/gtkmm-tutorial-in.xml:3151(title)
msgid "Simple Text Example"
msgstr "Ejemplo de texto simple"

#: C/gtkmm-tutorial-in.xml:3049(title)
msgid "ComboBoxText"
msgstr "ComboBoxText"

# Cambio este a «ComboBox» para mantener la concordancia con las menciones anteriores.
# Nicolás.
#: C/gtkmm-tutorial-in.xml:3060(title)
msgid "ComboBox with an Entry"
msgstr "«ComboBox» con una entrada"

#: C/gtkmm-tutorial-in.xml:3062(para)
msgid ""
"A <classname>ComboBox</classname> may contain an <classname>Entry</"
"classname> widget for entering of arbitrary text, by specifying "
"<literal>true</literal> for the constructor's <literal>has_entry</literal> "
"parameter."
msgstr ""
"Un <classname>ComboBox</classname> puede contener un widget "
"<classname>Entry</classname> para la entrada de texto arbitrario, mediante "
"la especificación de <literal>true</literal> al parámetro "
"<literal>has_entry</literal> del constructor."

#: C/gtkmm-tutorial-in.xml:3065(title)
msgid "The text column"
msgstr "La columna de texto"

#: C/gtkmm-tutorial-in.xml:3067(programlisting)
#, no-wrap
msgid "m_combo.set_entry_text_column(m_columns.m_col_name);"
msgstr "m_combo.set_entry_text_column(m_columns.m_col_name);"

#: C/gtkmm-tutorial-in.xml:3066(para)
msgid ""
"So that the <classname>Entry</classname> can interact with the drop-down "
"list of choices, you must specify which of your model columns is the text "
"column, with <methodname>set_entry_text_column()</methodname>. For instance: "
"<placeholder-1/>"
msgstr ""
"Para que la <classname>Entry</classname> pueda interactuar con la lista "
"desplegable de opciones, debe especificar cuál de las columnas de su modelo "
"es la columna de texto, con <methodname>set_text_column()</methodname>. Por "
"ejemplo: <placeholder-1/>"

#: C/gtkmm-tutorial-in.xml:3069(para)
msgid ""
"When you select a choice from the drop-down menu, the value from this column "
"will be placed in the <classname>Entry</classname>."
msgstr ""
"Cuando seleccione una opción de la lista desplegable, el valor de esta "
"columna se pondrá en el widget <classname>Entry</classname>."

#: C/gtkmm-tutorial-in.xml:3075(title)
msgid "The entry"
msgstr "La entrada"

#: C/gtkmm-tutorial-in.xml:3076(para)
msgid ""
"Because the user may enter arbitrary text, an active model row isn't enough "
"to tell us what text the user has entered. Therefore, you should retrieve "
"the <classname>Entry</classname> widget with the <methodname>ComboBox::"
"get_entry()</methodname> method and call <methodname>get_text()</methodname> "
"on that."
msgstr ""
"Dado que el usuario puede introducir texto arbitrario, una fila del modelo "
"activa es suficiente para indicar qué texto ha introducido el usuario. Por "
"lo tanto, debe obtener el widget <classname>Entry</classname> con el método "
"<methodname>ComboBoxEntry::get_entry()</methodname> y llamar a "
"<methodname>get_text()</methodname> sobre él."

#: C/gtkmm-tutorial-in.xml:3090(programlisting)
#, no-wrap
msgid ""
"Gtk::Entry* entry = m_Combo.get_entry();\n"
"if (entry)\n"
"{\n"
"  // The Entry shall receive key-press events and focus-out events.\n"
"  entry-&gt;add_events(Gdk::KEY_PRESS_MASK | Gdk::FOCUS_CHANGE_MASK);\n"
"\n"
"  // Alternatively you can connect to m_Combo.signal_changed().\n"
"  entry-&gt;signal_changed().connect(sigc::mem_fun(*this,\n"
"    &amp;ExampleWindow::on_entry_changed) );\n"
"\n"
"  // This signal handler must be called before the default signal handler,\n"
"  // or else it will not be called, if the default signal handler returns true.\n"
"  entry-&gt;signal_key_press_event().connect(sigc::mem_fun(*this,\n"
"    &amp;ExampleWindow::on_entry_key_press_event), /* after= */ false );\n"
"\n"
"  entry-&gt;signal_focus_out_event().connect(sigc::mem_fun(*this,\n"
"    &amp;ExampleWindow::on_entry_focus_out_event) );\n"
"}"
msgstr ""
"Gtk::Entry* entry = m_Combo.get_entry();\n"
"if (entry)\n"
"{\n"
"  // The Entry shall receive key-press events and focus-out events.\n"
"  entry-&gt;add_events(Gdk::KEY_PRESS_MASK | Gdk::FOCUS_CHANGE_MASK);\n"
"\n"
"  // Alternatively you can connect to m_Combo.signal_changed().\n"
"  entry-&gt;signal_changed().connect(sigc::mem_fun(*this,\n"
"    &amp;ExampleWindow::on_entry_changed) );\n"
"\n"
"  // This signal handler must be called before the default signal handler,\n"
"  // or else it will not be called, if the default signal handler returns true.\n"
"  entry-&gt;signal_key_press_event().connect(sigc::mem_fun(*this,\n"
"    &amp;ExampleWindow::on_entry_key_press_event), /* after= */ false );\n"
"\n"
"  entry-&gt;signal_focus_out_event().connect(sigc::mem_fun(*this,\n"
"    &amp;ExampleWindow::on_entry_focus_out_event) );\n"
"}"

#: C/gtkmm-tutorial-in.xml:3082(para)
msgid ""
"When the user enters arbitrary text, it may not be enough to connect to the "
"<literal>changed</literal> signal, which is emitted for every typed "
"character. It is not emitted when the user presses the Enter key. Pressing "
"the Enter key or moving the keyboard focus to another widget may signal that "
"the user has finished entering text. To be notified of these events, connect "
"to the <classname>Entry</classname>'s <literal>key_press_event</literal> and "
"<literal>focus_out_event</literal> signals, like so <placeholder-1/> The "
"<literal>changed</literal> signals of <classname>ComboBox</classname> and "
"<classname>Entry</classname> are both emitted for every change. It doesn't "
"matter which one you connect to. But only <classname>Entry</classname>'s "
"<literal>key_press_event</literal> and <literal>focus_out_event</literal> "
"signals are useful here."
msgstr ""
"Cuando el usuario introduce texto arbitrario, puede no ser suficiente "
"conectar la señal <literal>changed</literal>, que se emite una vez por cada "
"carácter introducido. No se emite cuando el usuario pulsa la tecla Intro. "
"Pulsar la tecla Intro o mover el foco del teclado a otro widget puede "
"señalar que el usuario ha terminado de introducir texto. Para notificarse de "
"estos eventos, conecte las señales <literal>key_press_event</literal> y "
"<literal>focus_out_event</literal> del <classname>Entry</classname>, así "
"<placeholder-1/> Se emiten tanto las señales <literal>Changed</literal> del "
"<classname>ComboBox</classname> como del <classname>Entry</classname> por "
"cada cambio. No importa a cuál se conecta. Pero sólo las señales "
"<literal>key_press_event</literal> y <literal>focus_out_event</literal> del "
"<classname>Entry</classname> son útiles aquí."

#: C/gtkmm-tutorial-in.xml:3117(programlisting)
#, no-wrap
msgid ""
"bool ExampleWindow::on_entry_key_press_event(GdkEventKey* event)\n"
"{\n"
"  Gtk::Entry* entry = m_Combo.get_entry();\n"
"  if (entry)\n"
"  {\n"
"    if (event-&gt;keyval == GDK_KEY_Return ||\n"
"        event-&gt;keyval == GDK_KEY_ISO_Enter ||\n"
"        event-&gt;keyval == GDK_KEY_KP_Enter)\n"
"    {\n"
"      input_finished(); //Your own function.\n"
"      return true;\n"
"    }\n"
"  }\n"
"  return false;\n"
"}"
msgstr ""
"bool ExampleWindow::on_entry_key_press_event(GdkEventKey* event)\n"
"{\n"
"  Gtk::Entry* entry = m_Combo.get_entry();\n"
"  if (entry)\n"
"  {\n"
"    if (event-&gt;keyval == GDK_KEY_Return ||\n"
"        event-&gt;keyval == GDK_KEY_ISO_Enter ||\n"
"        event-&gt;keyval == GDK_KEY_KP_Enter)\n"
"    {\n"
"      input_finished(); //Your own function.\n"
"      return true;\n"
"    }\n"
"  }\n"
"  return false;\n"
"}"

#: C/gtkmm-tutorial-in.xml:3114(para)
msgid ""
"In <literal>key_press_event</literal>'s signal handler you must check which "
"key has been pressed, e.g. like so <placeholder-1/> X events are described "
"in more detail in the <link linkend=\"chapter-keyboardevents\">Keyboard "
"Events</link> chapter and the <link linkend=\"sec-xeventsignals\">X Event "
"signals</link> section in the appendix."
msgstr ""
"En el manejador de señales de <literal>key_press_event</literal>, debe "
"verificar qué tecla se ha presionado, por ejemplo, así <placeholder-1/> "
"<literal>Los eventos de X se describen en mayor detalle en el capítulo <link "
"linkend=\"chapter-keyboardevents\">Eventos de teclado</link> y en la sección "
"<link linkend=\"sec-xeventsignals\">Señales de eventos de X</link> en el "
"apéndice."

# Cambio este a «ComboBox» para mantener la concordancia con las menciones anteriores.
# Nicolás.
#: C/gtkmm-tutorial-in.xml:3141(title)
msgid "ComboBox with Entry"
msgstr "«ComboBox» con una entrada"

# Cambio este a «ComboBox» para mantener la concordancia con las menciones anteriores.
# Nicolás.
#: C/gtkmm-tutorial-in.xml:3154(title)
msgid "ComboBoxText with Entry"
msgstr "«ComboBoxText» con una entrada"

#: C/gtkmm-tutorial-in.xml:3173(title) C/gtkmm-tutorial-in.xml:3385(title)
msgid "TextView"
msgstr "TextView"

#: C/gtkmm-tutorial-in.xml:3174(para)
msgid ""
"The <classname>TextView</classname> widget can be used to display and edit "
"large amounts of formatted text. Like the <classname>TreeView</classname>, "
"it has a model/view design. In this case the <classname>TextBuffer</"
"classname> is the model."
msgstr ""
"El widget <classname>TextView</classname> puede usarse para mostrar y editar "
"grandes cantidades de texto formateado. Al igual que el <classname>TreeView</"
"classname>, tiene un diseño modelo/vista. En este caso, el "
"<classname>TextBuffer</classname> es el modelo."

#: C/gtkmm-tutorial-in.xml:3182(title)
msgid "The Buffer"
msgstr "El búfer"

#: C/gtkmm-tutorial-in.xml:3183(para)
msgid ""
"<classname>Gtk::TextBuffer</classname> is a model containing the data for "
"the <classname>Gtk::TextView</classname>, like the <classname>Gtk::"
"TreeModel</classname> used by <classname>Gtk::TreeView</classname>. This "
"allows two or more <classname>Gtk::TextView</classname>s to share the same "
"<classname>TextBuffer</classname>, and allows those TextBuffers to be "
"displayed slightly differently. Or you could maintain several "
"<classname>Gtk::TextBuffer</classname>s and choose to display each one at "
"different times in the same <classname>Gtk::TextView</classname> widget."
msgstr ""
"<classname>Gtk::TextBuffer</classname> es el modelo que contiene los datos "
"del <classname>Gtk::TextView</classname>, al igual que el <classname>Gtk::"
"TreeModel</classname> usado por <classname>Gtk::TreeView</classname>. Esto "
"permite a dos o más <classname>Gtk::TreeView</classname> compartir el mismo "
"<classname>TextBuffer</classname>, y permite mostrar esos búferes de texto "
"de una manera ligeramente diferente. O bien, puede mantener varios "
"<classname>Gtk::TextBuffer</classname> y elegir mostrar cada uno en "
"distintas ocasiones en el mismo widget <classname>GtK::TextView</classname>."

#: C/gtkmm-tutorial-in.xml:3193(para)
msgid ""
"The <classname>TextView</classname> creates its own default "
"<classname>TextBuffer</classname>, which you can access via the "
"<methodname>get_buffer()</methodname> method."
msgstr ""
"El <classname>TextView</classname> crea su propio <classname>TextBuffer</"
"classname> predeterminado, al que puede acceder mediante el método "
"<methodname>get_buffer()</methodname>."

#: C/gtkmm-tutorial-in.xml:3202(title)
msgid "Iterators"
msgstr "Iteradores"

#: C/gtkmm-tutorial-in.xml:3208(title)
msgid "Tags and Formatting"
msgstr "Etiquetas y formateado"

#: C/gtkmm-tutorial-in.xml:3211(title)
msgid "Tags"
msgstr "Etiquetas"

#: C/gtkmm-tutorial-in.xml:3212(para)
msgid ""
"To specify that some text in the buffer should have specific formatting, you "
"must define a tag to hold that formatting information, and then apply that "
"tag to the region of text. For instance, to define the tag and its "
"properties:"
msgstr ""
"Para especificar que algún texto en el búfer deba tener un formato especial, "
"defina una etiqueta que contenta esa información de formato, y luego "
"aplíquela a la región de texto. Por ejemplo, para definir la etiqueta y sus "
"propiedades:"

#: C/gtkmm-tutorial-in.xml:3215(programlisting)
#, no-wrap
msgid ""
"Glib::RefPtr&lt;Gtk::TextBuffer::Tag&gt; refTagMatch =\n"
"    Gtk::TextBuffer::Tag::create();\n"
"refTagMatch-&gt;property_background() = \"orange\";"
msgstr ""
"Glib::RefPtr&lt;Gtk::TextBuffer::Tag&gt; refTagMatch =\n"
"    Gtk::TextBuffer::Tag::create();\n"
"refTagMatch-&gt;property_background() = \"orange\";"

#: C/gtkmm-tutorial-in.xml:3218(para)
msgid ""
"You can specify a name for the <classname>Tag</classname> when using the "
"<methodname>create()</methodname> method, but it is not necessary."
msgstr ""
"Puede especificar un nombre para la clase <classname>Tag</classname> cuando "
"use el método <methodname>create()</methodname>, pero no es necesario."

#: C/gtkmm-tutorial-in.xml:3223(para)
msgid "The <classname>Tag</classname> class has many other properties."
msgstr "La clase <classname>Tag</classname> tiene muchas otras propiedades."

#: C/gtkmm-tutorial-in.xml:3232(title)
msgid "TagTable"
msgstr "TagTable"

#: C/gtkmm-tutorial-in.xml:3234(para)
msgid ""
"Each <classname>Gtk::TextBuffer</classname> uses a <classname>Gtk::"
"TextBuffer::TagTable</classname>, which contains the <classname>Tag</"
"classname>s for that buffer. 2 or more <classname>TextBuffer</classname>s "
"may share the same <classname>TagTable</classname>. When you create "
"<classname>Tag</classname>s you should add them to the <classname>TagTable</"
"classname>. For instance:"
msgstr ""
"Cada <classname>Gtk::TextBuffer</classname> usa una <classname>Gtk::"
"TextBuffer::TagTable</classname>, que contiene las <classname>Tag</"
"classname> para ese búfer. Dos o más <classname>TextBuffer</classname> "
"pueden compartir la misma <classname>TagTable</classname>. Cuando cree las "
"<classname>Tag</classname>, añádalas a la <classname>TagTable</classname>. "
"Por ejemplo:"

#: C/gtkmm-tutorial-in.xml:3242(programlisting)
#, no-wrap
msgid ""
"Glib::RefPtr&lt;Gtk::TextBuffer::TagTable&gt; refTagTable =\n"
"    Gtk::TextBuffer::TagTable::create();\n"
"refTagTable-&gt;add(refTagMatch);\n"
"//Hopefully a future version of <application>gtkmm</application> will have a set_tag_table() method,\n"
"//for use after creation of the buffer.\n"
"Glib::RefPtr&lt;Gtk::TextBuffer&gt; refBuffer =\n"
"    Gtk::TextBuffer::create(refTagTable);"
msgstr ""
"Glib::RefPtr&lt;Gtk::TextBuffer::TagTable&gt; refTagTable =\n"
"    Gtk::TextBuffer::TagTable::create();\n"
"refTagTable-&gt;add(refTagMatch);\n"
"//Hopefully a future version of <application>gtkmm</application> will have a set_tag_table() method,\n"
"//for use after creation of the buffer.\n"
"Glib::RefPtr&lt;Gtk::TextBuffer&gt; refBuffer =\n"
"    Gtk::TextBuffer::create(refTagTable);"

#: C/gtkmm-tutorial-in.xml:3250(para)
msgid ""
"You can also use <methodname>get_tag_table()</methodname> to get, and maybe "
"modify, the <classname>TextBuffer</classname>'s default <classname>TagTable</"
"classname> instead of creating one explicitly."
msgstr ""
"También puede usar <methodname>get_tag_table()</methodname> para obtener, y "
"tal vez modificar, la <classname>TagTable</classname> predeterminada del "
"<classname>TextBuffer</classname> en lugar de crear una explícitamente."

#: C/gtkmm-tutorial-in.xml:3261(title)
msgid "Applying Tags"
msgstr "Aplicar etiquetas"

#: C/gtkmm-tutorial-in.xml:3262(para)
msgid ""
"If you have created a <classname>Tag</classname> and added it to the "
"<classname>TagTable</classname>, you may apply that tag to part of the "
"<classname>TextBuffer</classname> so that some of the text is displayed with "
"that formatting. You define the start and end of the range of text by "
"specifying <classname>Gtk::TextBuffer::iterator</classname>s. For instance:"
msgstr ""
"Si ha creado una <classname>Tag</classname> y la ha añadido a la "
"<classname>TagTable</classname>, podrá aplicarle esa etiqueta a parte del "
"<classname>TextBuffer</classname>, para que una parte del texto se muestre "
"con ese formato. Puede definir el inicio y el fin del rango de texto "
"especificando <classname>Gtk::TextBuffer::iterator</classname>. Por ejemplo:"

#: C/gtkmm-tutorial-in.xml:3269(programlisting)
#, no-wrap
msgid "refBuffer-&gt;apply_tag(refTagMatch, iterRangeStart, iterRangeStop);"
msgstr "refBuffer-&gt;apply_tag(refTagMatch, iterRangeStart, iterRangeStop);"

#: C/gtkmm-tutorial-in.xml:3270(para)
msgid ""
"Or you could specify the tag when first inserting the text: refBuffer-&gt;"
"insert_with_tag(iter, \"Some text\", refTagMatch);"
msgstr ""
"O puede especificar la etiqueta cuando inserta el texto por primera vez: "
"refBuffer-&gt;insert_with_tag(iter, \"Some text\", refTagMatch);"

#: C/gtkmm-tutorial-in.xml:3275(para)
msgid ""
"You can apply more than one <classname>Tag</classname> to the same text, by "
"using <methodname>apply_tag()</methodname> more than once, or by using "
"<methodname>insert_with_tags()</methodname>. The <classname>Tag</classname>s "
"might specify different values for the same properties, but you can resolve "
"these conflicts by using <methodname>Tag::set_priority()</methodname>."
msgstr ""
"Puede aplicar más de una <classname>Tag</classname> al mismo texto, usando "
"<methodname>apply_tag()</methodname> más de una vez, o usando "
"<methodname>insert_with_tags()</methodname>. Las <classname>Tag</classname> "
"podrían especificar valores diferentes para las mismas propiedades, pero "
"puede resolver estos conflictos usando <methodname>Tag::set_priority()</"
"methodname>."

#: C/gtkmm-tutorial-in.xml:3287(title)
msgid "Marks"
msgstr "Marcas"

#: C/gtkmm-tutorial-in.xml:3288(para)
msgid ""
"<classname>TextBuffer</classname> iterators are generally invalidated when "
"the text changes, but you can use a <classname>Gtk::TextBuffer::Mark</"
"classname> to remember a position in these situations. For instance,"
msgstr ""
"Generalmente se invalidan los iteradores del <classname>TextBuffer</"
"classname> cuando el texto cambia, pero puede usar una <classname>Gtk::"
"TextBuffer::Mark</classname> para recordar una posición en estas "
"situaciones. Por ejemplo,"

#: C/gtkmm-tutorial-in.xml:3293(programlisting)
#, no-wrap
msgid ""
"Glib::RefPtr&lt;Gtk::TextBuffer::Mark&gt; refMark =\n"
"    refBuffer-&gt;create_mark(iter);"
msgstr ""
"Glib::RefPtr&lt;Gtk::TextBuffer::Mark&gt; refMark =\n"
"    refBuffer-&gt;create_mark(iter);"

#: C/gtkmm-tutorial-in.xml:3296(para)
msgid ""
"You can then use the <methodname>get_iter()</methodname> method later to "
"create an iterator for the <classname>Mark</classname>'s new position."
msgstr ""
"Puede entonces usar el método <methodname>get_iter()</methodname> más tarde "
"para crear un iterador para la posición nueva de la <classname>Mark</"
"classname>."

#: C/gtkmm-tutorial-in.xml:3301(para)
msgid ""
"There are two built-in <classname>Mark</classname>s - <literal>insert</"
"literal> and <literal>select_bound</literal>, which you can access with "
"<classname>TextBuffer</classname>'s <methodname>get_insert()</methodname> "
"and <methodname>get_selection_bound()</methodname> methods."
msgstr ""
"Hay dos clases <classname>Mark</classname> incorporadas: <literal>insert</"
"literal> y <literal>select_bound</literal>, a las que puede acceder con los "
"métodos <methodname>get_insert()</methodname> y "
"<methodname>get_selection_bound()</methodname> del <classname>TextBuffer</"
"classname>."

#: C/gtkmm-tutorial-in.xml:3314(para)
msgid ""
"As mentioned above, each <classname>TextView</classname> has a "
"<classname>TextBuffer</classname>, and one or more <classname>TextView</"
"classname> can share the same <classname>TextBuffer</classname>."
msgstr ""
"Como se mencionó anteriormente, cada <classname>TextView</classname> tiene "
"un <classname>TextBuffer</classname>, y uno o más <classname>TextView</"
"classname> pueden compartir el mismo <classname>TextBuffer</classname>."

#: C/gtkmm-tutorial-in.xml:3321(para)
msgid ""
"Like the <classname>TreeView</classname>, you should probably put your "
"<classname>TextView</classname> inside a <classname>ScrolledWindow</"
"classname> to allow the user to see and move around the whole text area with "
"scrollbars."
msgstr ""
"Al igual que con el <classname>TreeView</classname>, probablemente deba "
"poner su <classname>TextView</classname> dentro de una "
"<classname>ScrolledWindow</classname> para permitirle al usuario ver y mover "
"toda el área de texto con barras de desplazamiento."

#: C/gtkmm-tutorial-in.xml:3331(title)
msgid "Default formatting"
msgstr "Formato predeterminado"

#: C/gtkmm-tutorial-in.xml:3332(para)
msgid ""
"<classname>TextView</classname> has various methods which allow you to "
"change the presentation of the buffer for this particular view. Some of "
"these may be overridden by the <classname>Gtk::TextTag</classname>s in the "
"buffer, if they specify the same things. For instance, "
"<methodname>set_left_margin()</methodname>, <methodname>set_right_margin()</"
"methodname>, <methodname>set_indent()</methodname>, etc."
msgstr ""
"Los <classname>TextView</classname> tienen varios métodos que le permiten "
"cambiar la presentación del búfer de esta vista particular. Algunos de estos "
"pueden anularse por los <classname>Gtk::TextTag</classname> en el búfer, si "
"especifican las mismas cosas. Por ejemplo, <methodname>set_left_margin()</"
"methodname>, <methodname>set_right_margin()</methodname>, "
"<methodname>set_indent()</methodname>, etc."

#: C/gtkmm-tutorial-in.xml:3343(title)
msgid "Scrolling"
msgstr "Desplazamiento"

#: C/gtkmm-tutorial-in.xml:3344(para)
msgid ""
"<classname>Gtk::TextView</classname> has various <methodname>scroll_to_*()</"
"methodname> methods. These allow you to ensure that a particular part of the "
"text buffer is visible. For instance, your application's Find feature might "
"use <methodname>Gtk::TextView::scroll_to_iter()</methodname> to show the "
"found text."
msgstr ""
"<classname>Gtk::TextView</classname> tiene varios métodos "
"<methodname>scroll_to_*()</methodname>. Estos le permiten asegurarse de que "
"una parte particular del búfer de texto es visible. Por ejemplo, la "
"característica «Encontrar» de su aplicación podría usar <methodname>Gtk::"
"TextView::scroll_to_iter()</methodname> para mostrar el texto encontrado."

#: C/gtkmm-tutorial-in.xml:3359(title)
msgid "Widgets and ChildAnchors"
msgstr "Widgets y ChildAnchors"

#: C/gtkmm-tutorial-in.xml:3360(para)
msgid ""
"You can embed widgets, such as <classname>Gtk::Button</classname>s, in the "
"text. Each such child widget needs a <classname>ChildAnchor</classname>. "
"ChildAnchors are associated with <classname>iterators</classname>. For "
"instance, to create a child anchor at a particular position, use "
"<methodname>Gtk::TextBuffer::create_child_anchor()</methodname>:"
msgstr ""
"Puede empotrar widgets, como <classname>Gtk::Button</classname> en el texto. "
"Cada widget hijo necesitará un <classname>ChildAnchor</classname>. Los "
"«ChildAnchor» están asociados a los <classname>iterators</classname>. Por "
"ejemplo, para crear un «ChildAnchor» en una posición particular, use "
"<methodname>Gtk::TextBuffer::create_child_anchor()</methodname>:"

#: C/gtkmm-tutorial-in.xml:3367(programlisting)
#, no-wrap
msgid ""
"Glib::RefPtr&lt;Gtk::TextChildAnchor&gt; refAnchor =\n"
"    refBuffer-&gt;create_child_anchor(iter);"
msgstr ""
"Glib::RefPtr&lt;Gtk::TextChildAnchor&gt; refAnchor =\n"
"    refBuffer-&gt;create_child_anchor(iter);"

#: C/gtkmm-tutorial-in.xml:3370(para)
msgid ""
"Then, to add a widget at that position, use <methodname>Gtk::TextView::"
"add_child_at_anchor()</methodname>:"
msgstr ""
"Luego, para añadir un widget en esa posición, use <methodname>Gtk::TextView::"
"add_child_at_anchor()</methodname>:"

#: C/gtkmm-tutorial-in.xml:3374(programlisting)
#, no-wrap
msgid "m_TextView.add_child_at_anchor(m_Button, refAnchor);"
msgstr "m_TextView.add_child_at_anchor(m_Button, refAnchor);"

#: C/gtkmm-tutorial-in.xml:3400(title)
msgid "Menus and Toolbars"
msgstr "Menús y barras de herramientas"

# En el inglés, cuando dice «you can arrange in menu...» debería decir «menus».
# Nicolás.
#: C/gtkmm-tutorial-in.xml:3402(para)
msgid ""
"There are specific APIs for Menus and toolbars, but you should usually deal "
"with them together, using the <classname>UIManager</classname> to define "
"<classname>Action</classname>s which you can then arrange in menus and "
"toolbars. In this way you can handle activation of the action instead of "
"responding to the menu and toolbar items separately. And you can enable or "
"disable both the menu and toolbar item via the action."
msgstr ""
"Hay API específicas para los menús y las barras de herramientas, pero "
"usualmente debe tratarlas juntas, usando el <classname>UIManager</classname> "
"para definir <classname>Action</classname> que puede ordenar en menús y "
"barras de herramientas. De esta forma, puede manejar la activación de la "
"acción en lugar de responder a los elementos del menú y las barras de "
"herramientas separadamente. Y puede activar o desactivar tanto el elemento "
"del menú como el de la barra de herramientas a través de la acción."

#: C/gtkmm-tutorial-in.xml:3410(para)
msgid ""
"This involves the use of the <classname>Gtk::ActionGroup</classname>, "
"<classname>Gtk::Action</classname>, and <classname>UIManager</classname> "
"classes, all of which should be instantiated via their <methodname>create()</"
"methodname> methods, which return <classname>RefPtr</classname>s."
msgstr ""
"Esto implica el uso de las clases <classname>Gtk::ActionGroup</classname>, "
"<classname>Gtk::Action</classname>, y <classname>UIManager</classname>, "
"todas las cuales deben instanciarse a través de sus métodos "
"<methodname>create()</methodname>, que devuelven <classname>RefPtr</"
"classname>."

#: C/gtkmm-tutorial-in.xml:3419(title)
msgid "Actions"
msgstr "Acciones"

#: C/gtkmm-tutorial-in.xml:3420(para)
msgid ""
"First create the <classname>Action</classname>s and add them to an "
"<classname>ActionGroup</classname>, with <methodname>ActionGroup::add()</"
"methodname>."
msgstr ""
"Primero cree las <classname>Action</classname>s y añádaselas a un "
"<classname>ActionGroup</classname>, con <methodname>ActionGroup::add()</"
"methodname>."

#: C/gtkmm-tutorial-in.xml:3426(para)
msgid ""
"The arguments to <methodname>Action::create()</methodname> specify the "
"action's name and how it will appear in menus and toolbars. Use stock items "
"where possible so that you don't need to specify the label, accelerator, "
"icon, and tooltips, and so you can use pre-existing translations."
msgstr ""
"Los argumentos de <methodname>Action::create()</methodname> especifican el "
"nombre de la acción y cómo aparecerá en los menús y las barras de "
"herramientas. Use elementos del almacén donde sea posible para que no "
"necesite especificar etiquetas, atajos, iconos ni consejos, y para poder "
"usar traducciones preexistentes."

#: C/gtkmm-tutorial-in.xml:3432(para)
msgid ""
"You can also specify a signal handler when calling <methodname>ActionGroup::"
"add()</methodname>. This signal handler will be called when the action is "
"activated via either a menu item or a toolbar button."
msgstr ""
"También puede especificar un manejador de señales cuando llame a "
"<methodname>ActionGroup::add()</methodname>. Se llamará a este manejador de "
"señales cuando se active la acción a través de un elemento del menú o un "
"botón de la barra de herramientas."

#: C/gtkmm-tutorial-in.xml:3437(para)
msgid "Note that you must specify actions for sub menus as well as menu items."
msgstr ""
"Tenga en cuenta que debe especificar acciones para submenús así como para "
"elementos del menú."

#: C/gtkmm-tutorial-in.xml:3439(para)
msgid "For instance:"
msgstr "Por ejemplo:"

#: C/gtkmm-tutorial-in.xml:3441(programlisting)
#, no-wrap
msgid ""
"m_refActionGroup = Gtk::ActionGroup::create();\n"
"\n"
"m_refActionGroup-&gt;add( Gtk::Action::create(\"MenuFile\", \"_File\") );\n"
"m_refActionGroup-&gt;add( Gtk::Action::create(\"New\", Gtk::Stock::NEW),\n"
"  sigc::mem_fun(*this, &amp;ExampleWindow::on_action_file_new) );\n"
"m_refActionGroup-&gt;add( Gtk::Action::create(\"ExportData\", \"Export Data\"),\n"
"  sigc::mem_fun(*this, &amp;ExampleWindow::on_action_file_open) );\n"
"m_refActionGroup-&gt;add( Gtk::Action::create(\"Quit\", Gtk::Stock::QUIT),\n"
"  sigc::mem_fun(*this, &amp;ExampleWindow::on_action_file_quit) );"
msgstr ""
"m_refActionGroup = Gtk::ActionGroup::create();\n"
"\n"
"m_refActionGroup-&gt;add( Gtk::Action::create(\"MenuFile\", \"_File\") );\n"
"m_refActionGroup-&gt;add( Gtk::Action::create(\"New\", Gtk::Stock::NEW),\n"
"  sigc::mem_fun(*this, &amp;ExampleWindow::on_action_file_new) );\n"
"m_refActionGroup-&gt;add( Gtk::Action::create(\"ExportData\", \"Export Data\"),\n"
"  sigc::mem_fun(*this, &amp;ExampleWindow::on_action_file_open) );\n"
"m_refActionGroup-&gt;add( Gtk::Action::create(\"Quit\", Gtk::Stock::QUIT),\n"
"  sigc::mem_fun(*this, &amp;ExampleWindow::on_action_file_quit) );"

#: C/gtkmm-tutorial-in.xml:3451(para)
msgid ""
"Note that this is where we specify the names of the actions as they will be "
"seen by users in menus and toolbars. Therefore, this is where you should "
"make strings translatable, by putting them inside the _() macro. When we use "
"the Gtk::Stock items, of course, translations are automatically available."
msgstr ""
"Tenga en cuenta que aquí es donde se especifican los nombres de las acciones "
"como las verán los usuarios en los menús y las barras de herramientas. Por "
"lo tanto, aquí es donde debe hacer las cadenas traducibles, poniéndolas "
"dentro de la macro _(). Cuando use los elementos de Gtk::Stock, las "
"traducciones estarán disponibles automáticamente, por supuesto."

#: C/gtkmm-tutorial-in.xml:3456(title)
msgid "UIManager"
msgstr "UIManager"

#: C/gtkmm-tutorial-in.xml:3457(para)
msgid ""
"Next you should create a <classname>UIManager</classname> and add the "
"<classname>ActionGroup</classname> to the <classname>UIManager</classname> "
"with <methodname>insert_action_group()</methodname> At this point is also a "
"good idea to tell the parent window to respond to the specified keyboard "
"shortcuts, by using <methodname>add_accel_group()</methodname>."
msgstr ""
"A continuación debe crear un <classname>UIManager</classname> y añadirle el "
"<classname>ActionGroup</classname> con <classname>insert_action_group()</"
"classname>. En este punto, también es una buena idea decirle a la ventana "
"madre que responda a los atajos del teclado especificados, usando "
"<methodname>add_accel_group()</methodname>."

#: C/gtkmm-tutorial-in.xml:3465(para) C/gtkmm-tutorial-in.xml:4855(para)
msgid "For instance,"
msgstr "Por ejemplo,"

#: C/gtkmm-tutorial-in.xml:3467(programlisting)
#, no-wrap
msgid ""
"Glib::RefPtr&lt;Gtk::UIManager&gt; m_refUIManager =\n"
"    Gtk::UIManager::create();\n"
"m_refUIManager-&gt;insert_action_group(m_refActionGroup);\n"
"add_accel_group(m_refUIManager-&gt;get_accel_group());"
msgstr ""
"Glib::RefPtr&lt;Gtk::UIManager&gt; m_refUIManager =\n"
"    Gtk::UIManager::create();\n"
"m_refUIManager-&gt;insert_action_group(m_refActionGroup);\n"
"add_accel_group(m_refUIManager-&gt;get_accel_group());"

#: C/gtkmm-tutorial-in.xml:3471(para)
msgid ""
"Then, you can define the actual visible layout of the menus and toolbars, "
"and add the UI layout to the <classname>UIManager</classname>. This \"ui "
"string\" uses an XML format, in which you should mention the names of the "
"actions that you have already created. For instance:"
msgstr ""
"Luego, puede definir la distribución visible real de los menús y las barras "
"de herramientas, y añadírsela al <classname>UIManager</classname>. Esta "
"«cadena de IU» usa un formato XML, en el que debe mencionar los nombre de "
"las acciones que ya ha creado. Por ejemplo:"

#: C/gtkmm-tutorial-in.xml:3477(programlisting)
#, no-wrap
msgid ""
"Glib::ustring ui_info =\n"
"    \"&lt;ui&gt;\"\n"
"    \"  &lt;menubar name='MenuBar'&gt;\"\n"
"    \"    &lt;menu action='MenuFile'&gt;\"\n"
"    \"      &lt;menuitem action='New'/&gt;\"\n"
"    \"      &lt;menuitem action='Open'/&gt;\"\n"
"    \"      &lt;separator/&gt;\"\n"
"    \"      &lt;menuitem action='Quit'/&gt;\"\n"
"    \"    &lt;/menu&gt;\"\n"
"    \"    &lt;menu action='MenuEdit'&gt;\"\n"
"    \"      &lt;menuitem action='Cut'/&gt;\"\n"
"    \"      &lt;menuitem action='Copy'/&gt;\"\n"
"    \"      &lt;menuitem action='Paste'/&gt;\"\n"
"    \"    &lt;/menu&gt;\"\n"
"    \"  &lt;/menubar&gt;\"\n"
"    \"  &lt;toolbar  name='ToolBar'&gt;\"\n"
"    \"    &lt;toolitem action='Open'/&gt;\"\n"
"    \"    &lt;toolitem action='Quit'/&gt;\"\n"
"    \"  &lt;/toolbar&gt;\"\n"
"    \"&lt;/ui&gt;\";\n"
"\n"
"m_refUIManager-&gt;add_ui_from_string(ui_info);"
msgstr ""
"Glib::ustring ui_info =\n"
"    \"&lt;ui&gt;\"\n"
"    \"  &lt;menubar name='MenuBar'&gt;\"\n"
"    \"    &lt;menu action='MenuFile'&gt;\"\n"
"    \"      &lt;menuitem action='New'/&gt;\"\n"
"    \"      &lt;menuitem action='Open'/&gt;\"\n"
"    \"      &lt;separator/&gt;\"\n"
"    \"      &lt;menuitem action='Quit'/&gt;\"\n"
"    \"    &lt;/menu&gt;\"\n"
"    \"    &lt;menu action='MenuEdit'&gt;\"\n"
"    \"      &lt;menuitem action='Cut'/&gt;\"\n"
"    \"      &lt;menuitem action='Copy'/&gt;\"\n"
"    \"      &lt;menuitem action='Paste'/&gt;\"\n"
"    \"    &lt;/menu&gt;\"\n"
"    \"  &lt;/menubar&gt;\"\n"
"    \"  &lt;toolbar  name='ToolBar'&gt;\"\n"
"    \"    &lt;toolitem action='Open'/&gt;\"\n"
"    \"    &lt;toolitem action='Quit'/&gt;\"\n"
"    \"  &lt;/toolbar&gt;\"\n"
"    \"&lt;/ui&gt;\";\n"
"\n"
"m_refUIManager-&gt;add_ui_from_string(ui_info);"

#: C/gtkmm-tutorial-in.xml:3500(para)
msgid ""
"Remember that these names are just the identifiers that we used when "
"creating the actions. They are not the text that the user will see in the "
"menus and toolbars. We provided those human-readable names when we created "
"the actions."
msgstr ""
"Recuerde que estos nombres son sólo identificadores que se usaron cuando se "
"crearon las acciones. No son el texto que el usuario verá en los menús y "
"barras de herramientas. Se han proporcionado esos nombres legibles por el "
"humano cuando se crearon las acciones."

#: C/gtkmm-tutorial-in.xml:3501(para)
msgid ""
"To instantiate a <classname>Gtk::MenuBar</classname> or <classname>Gtk::"
"Toolbar</classname> which you can actually show, you should use the "
"<methodname>UIManager::get_widget()</methodname> method, and then add the "
"widget to a container. For instance:"
msgstr ""
"Para instanciar una <classname>Gtk::MenuBar</classname> o una "
"<classname>Gtk::Toolbar</classname>, a la que en realidad puede mostrar, "
"debe usar el método <methodname>UIManager::get_widget()</methodname>, y "
"luego añadirle el widget a un contenedor. Por ejemplo:"

#: C/gtkmm-tutorial-in.xml:3507(programlisting)
#, no-wrap
msgid ""
"Gtk::Widget* pMenubar = m_refUIManager-&gt;get_widget(\"/MenuBar\");\n"
"pBox-&gt;add(*pMenuBar, Gtk::PACK_SHRINK);"
msgstr ""
"Gtk::Widget* pMenubar = m_refUIManager-&gt;get_widget(\"/MenuBar\");\n"
"pBox-&gt;add(*pMenuBar, Gtk::PACK_SHRINK);"

#: C/gtkmm-tutorial-in.xml:3513(title)
msgid "Popup Menus"
msgstr "Menús emergentes"

#: C/gtkmm-tutorial-in.xml:3514(para)
msgid ""
"<classname>Menus</classname> are normally just added to a window, but they "
"can also be displayed temporarily as the result of a mouse button click. For "
"instance, a context menu might be displayed when the user clicks their right "
"mouse button."
msgstr ""
"Normalmente, simplemente se añaden los <classname>Menus</classname> a la "
"ventana, pero también pueden mostrarse temporalmente como resultado de una "
"pulsación del botón del ratón. Por ejemplo, se puede mostrar un menú "
"contextual cuando el usuario pulsa el botón derecho de su ratón."

#: C/gtkmm-tutorial-in.xml:3521(para)
msgid ""
"The UI layout for a popup menu should use the <literal>popup</literal> node. "
"For instance:"
msgstr ""
"La distribución de la IU para un menú emergente debe usar el nodo "
"<literal>popup</literal>. Por ejemplo:"

#: C/gtkmm-tutorial-in.xml:3523(programlisting)
#, no-wrap
msgid ""
"Glib::ustring ui_info =\n"
"    \"&lt;ui&gt;\"\n"
"    \"  &lt;popup name='PopupMenu'&gt;\"\n"
"    \"    &lt;menuitem action='ContextEdit'/&gt;\"\n"
"    \"    &lt;menuitem action='ContextProcess'/&gt;\"\n"
"    \"    &lt;menuitem action='ContextRemove'/&gt;\"\n"
"    \"  &lt;/popup&gt;\"\n"
"    \"&lt;/ui&gt;\";\n"
"\n"
"m_refUIManager-&gt;add_ui_from_string(ui_info);"
msgstr ""
"Glib::ustring ui_info =\n"
"    \"&lt;ui&gt;\"\n"
"    \"  &lt;popup name='PopupMenu'&gt;\"\n"
"    \"    &lt;menuitem action='ContextEdit'/&gt;\"\n"
"    \"    &lt;menuitem action='ContextProcess'/&gt;\"\n"
"    \"    &lt;menuitem action='ContextRemove'/&gt;\"\n"
"    \"  &lt;/popup&gt;\"\n"
"    \"&lt;/ui&gt;\";\n"
"\n"
"m_refUIManager-&gt;add_ui_from_string(ui_info);"

#: C/gtkmm-tutorial-in.xml:3534(para)
msgid ""
"To show the popup menu, use <classname>Gtk::Menu</classname>'s "
"<methodname>popup()</methodname> method, providing the button identifier and "
"the time of activation, as provided by the <literal>button_press_event</"
"literal> signal, which you will need to handle anyway. For instance:"
msgstr ""
"Para mostrar el menú contextual, use el método <methodname>popup()</"
"methodname> del <classname>Gtk::Menu</classname>, proporcionándole el "
"identificador del botón y el tiempo de activación, como los proporciona la "
"señal <literal>button_press_event</literal> que, de todos modos, deberá "
"manejar. Por ejemplo:"

#: C/gtkmm-tutorial-in.xml:3540(programlisting)
#, no-wrap
msgid ""
"bool ExampleWindow::on_button_press_event(GdkEventButton* event)\n"
"{\n"
"  if( (event-&gt;type == GDK_BUTTON_PRESS) &amp;&amp;\n"
"      (event-&gt;button == 3) )\n"
"  {\n"
"    m_Menu_Popup-&gt;popup(event-&gt;button, event-&gt;time);\n"
"    return true; //It has been handled.\n"
"  }\n"
"  else\n"
"    return false;\n"
"}"
msgstr ""
"bool ExampleWindow::on_button_press_event(GdkEventButton* event)\n"
"{\n"
"  if( (event-&gt;type == GDK_BUTTON_PRESS) &amp;&amp;\n"
"      (event-&gt;button == 3) )\n"
"  {\n"
"    m_Menu_Popup-&gt;popup(event-&gt;button, event-&gt;time);\n"
"    return true; //It has been handled.\n"
"  }\n"
"  else\n"
"    return false;\n"
"}"

#: C/gtkmm-tutorial-in.xml:3557(title)
msgid "Main Menu example"
msgstr "Ejemplo de menú principal"

#: C/gtkmm-tutorial-in.xml:3560(title)
msgid "Main Menu"
msgstr "Menú principal"

#: C/gtkmm-tutorial-in.xml:3570(title)
msgid "Popup Menu example"
msgstr "Ejemplo de menú emergente"

#: C/gtkmm-tutorial-in.xml:3573(title)
msgid "Popup Menu"
msgstr "Menú emergente"

#: C/gtkmm-tutorial-in.xml:3588(title) C/gtkmm-tutorial-in.xml:3629(title)
msgid "ToolPalette"
msgstr "ToolPalette"

#: C/gtkmm-tutorial-in.xml:3590(para)
msgid ""
"A <classname>ToolPalette</classname> is similar to a <classname>Toolbar</"
"classname> but can contain a grid of items, categorized into groups. The "
"user may hide or expand each group. As in a toolbar, the items may be "
"displayed as only icons, as only text, or as icons with text."
msgstr ""
"Una <classname>ToolPalette</classname> es similar a una <classname>Toolbar</"
"classname>, pero puede contener una rejilla de elementos categorizados en "
"grupos. El usuario puede ocultar o expandir cada grupo. Al igual que en una "
"barra de herramientas, los elementos pueden aparecer sólo como iconos, como "
"sólo texto, o en forma de iconos con el texto."

#: C/gtkmm-tutorial-in.xml:3592(para)
msgid ""
"The <classname>ToolPalette</classname>'s items might be dragged or simply "
"activated. For instance, the user might drag objects to a canvas to create "
"new items there. Or the user might click an item to activate a certain brush "
"size in a drawing application."
msgstr ""
"Los elementos del <classname>ToolPalette</classname> pueden arrastrarse o "
"simplemente activarse. Por ejemplo, el usuario tal vez arrastre objetos a un "
"lienzo para crear elementos nuevos allí. O bien, el usuario podría pulsar "
"sobre un elemento para activar un determinado tamaño de pincel en una "
"aplicación de dibujo."

#: C/gtkmm-tutorial-in.xml:3593(para)
msgid ""
"<classname>ToolItemGroup</classname>s should be added to the tool pallete "
"via the base class's <function>Gtk::Container::add()</function> method, for "
"instance like so:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:3596(programlisting)
#, no-wrap
msgid ""
"\n"
"Gtk::ToolItemGroup* group_brushes =\n"
"  Gtk::manage(new Gtk::ToolItemGroup(\"Brushes\"));\n"
"m_ToolPalette.add(*group_brushes);\n"
msgstr ""
"\n"
"Gtk::ToolItemGroup* group_brushes =\n"
"  Gtk::manage(new Gtk::ToolItemGroup(\"Brushes\"));\n"
"m_ToolPalette.add(*group_brushes);\n"

#: C/gtkmm-tutorial-in.xml:3602(para)
msgid ""
"<classname>Gtk::ToolItem</classname>s can then be added to the group. For "
"instance, like so:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:3606(programlisting)
#, no-wrap
msgid ""
"\n"
"Gtk::ToolButton* button = Gtk::manage(new Gtk::ToolButton(icon, \"Big\"));\n"
"button-&gt;set_tooltip_text(\"Big Brush);\n"
"group_brushes-&gt;insert(*button);\n"
msgstr ""
"\n"
"Gtk::ToolButton* button = Gtk::manage(new Gtk::ToolButton(icon, \"Big\"));\n"
"button-&gt;set_tooltip_text(\"Big Brush);\n"
"group_brushes-&gt;insert(*button);\n"

#: C/gtkmm-tutorial-in.xml:3612(para)
msgid ""
"You might then handle the <classname>ToolButton</classname>'s "
"<literal>clicked</literal> signal. Alternatively, you could allow the item "
"to be dragged to another widget, by calling <methodname>Gtk::ToolPalette::"
"add_drag_dest()</methodname> and then using <methodname>Gtk::ToolPalette::"
"get_drag_item()</methodname> in the other widget's "
"<literal>drag_data_received</literal> signal handler."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3614(ulink)
msgid "ToolPalette Reference"
msgstr "Referencia de ToolPalette"

#: C/gtkmm-tutorial-in.xml:3615(ulink)
msgid "ToolItemGroup Reference"
msgstr "Referencia de ToolItemGroup"

#: C/gtkmm-tutorial-in.xml:3616(ulink)
msgid "ToolItem Reference"
msgstr "Referencia de ToolItem"

#: C/gtkmm-tutorial-in.xml:3620(para)
msgid ""
"Call <methodname>add_drag_dest()</methodname> to allow items or groups to be "
"dragged from the tool palette to a particular destination widget. You can "
"then use <methodname>get_drag_item()</methodname> to discover which ToolItem "
"or ToolItemGroup is being dragged. You can use <literal>dynamic_cast</"
"literal> to discover whether is it an item or a group. For instance, you "
"might use this in your <literal>drag_data_received</literal> signal handler, "
"to add a dropped item, or to show a suitable icon while dragging."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3621(para)
msgid ""
"See the <link linkend=\"chapter-draganddrop\">Drag and Drop</link> chapter "
"for general advice about Drag and Drop with gtkmm."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3624(title)
msgid "ToolPalette Example"
msgstr "Ejemplo de ToolPalette"

#: C/gtkmm-tutorial-in.xml:3626(para)
msgid ""
"This example adds a <classname>ToolPalette</classname> and a "
"<classname>DrawingArea</classname> to a window and allows the user to drag "
"icons from the tool palette to the drawing area. The tool palette contains "
"several groups of items. The combo boxes allow the user to change the style "
"and orientation of the tool palette."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3642(title)
msgid "Adjustments"
msgstr "Ajustes"

#: C/gtkmm-tutorial-in.xml:3644(para)
msgid ""
"<application>gtkmm</application> has various widgets that can be visually "
"adjusted using the mouse or the keyboard, such as the <classname>Range</"
"classname> widgets (described in the <link linkend=\"chapter-range-widgets"
"\">Range Widgets</link> section). There are also a few widgets that display "
"some adjustable part of a larger area, such as the <classname>Viewport</"
"classname> widget. These widgets have <classname>Gtk::Adjustment</classname> "
"objects that express this common part of their API."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3654(para)
msgid ""
"So that applications can react to changes, for instance when a user moves a "
"scrollbar, <classname>Gtk::Adjustment</classname> has a <literal>changed</"
"literal> signal. You can then use the <methodname>get_changed()</methodname> "
"method to discover the new value."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3662(title)
msgid "Creating an Adjustment"
msgstr "Crear un ajuste"

#: C/gtkmm-tutorial-in.xml:3664(para)
msgid "The <classname>Gtk::Adjustment</classname> constructor is as follows:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:3668(programlisting)
#, no-wrap
msgid ""
"Gtk::Adjustment(float value,\n"
"                float lower,\n"
"                float upper,\n"
"                float step_increment = 1,\n"
"                float page_increment = 10,\n"
"                float page_size = 0);"
msgstr ""
"Gtk::Adjustment(float value,\n"
"                float lower,\n"
"                float upper,\n"
"                float step_increment = 1,\n"
"                float page_increment = 10,\n"
"                float page_size = 0);"

#: C/gtkmm-tutorial-in.xml:3675(para)
msgid ""
"The <parameter>value</parameter> argument is the initial value of the "
"adjustment, usually corresponding to the topmost or leftmost position of an "
"adjustable widget. The <parameter>lower</parameter> and <parameter>upper</"
"parameter> arguments specifies the possible range of values which the "
"adjustment can hold. The <parameter>step_increment</parameter> argument "
"specifies the smaller of the two increments by which the user can change the "
"value, while the <parameter>page_increment</parameter> is the larger one. "
"The <parameter>page_size</parameter> argument usually corresponds somehow to "
"the visible area of a panning widget. The <parameter>upper</parameter> "
"argument is used to represent the bottom most or right most coordinate in a "
"panning widget's child."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3694(title)
msgid "Using Adjustments the Easy Way"
msgstr ""

#: C/gtkmm-tutorial-in.xml:3696(para)
msgid ""
"The adjustable widgets can be roughly divided into those which use and "
"require specific units for these values, and those which treat them as "
"arbitrary numbers."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3701(para)
msgid ""
"The group which treats the values as arbitrary numbers includes the "
"<classname>Range</classname> widgets (<classname>Scrollbar</classname> and "
"<classname>Scale</classname>), the <classname>ScaleButton</classname> "
"widget, and the <classname>SpinButton</classname> widget. These widgets are "
"typically \"adjusted\" directly by the user with the mouse or keyboard. They "
"will treat the <parameter>lower</parameter> and <parameter>upper</parameter> "
"values of an adjustment as a range within which the user can manipulate the "
"adjustment's <parameter>value</parameter>. By default, they will only modify "
"the <parameter>value</parameter> of an adjustment."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3713(para)
msgid ""
"The other group includes the <classname>Viewport</classname> widget and the "
"<classname>ScrolledWindow</classname> widget. All of these widgets use pixel "
"values for their adjustments. These are also typically adjusted indirectly "
"using scrollbars. While all widgets which use adjustments can either create "
"their own adjustments or use ones you supply, you'll generally want to let "
"this particular category of widgets create its own adjustments."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3722(para)
msgid ""
"If you share an adjustment object between a Scrollbar and a TextView widget, "
"manipulating the scrollbar will automagically adjust the TextView widget. "
"You can set it up like this:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:3727(programlisting)
#, no-wrap
msgid ""
"// creates its own adjustments\n"
"Gtk::TextView textview;\n"
"// uses the newly-created adjustment for the scrollbar as well\n"
"Gtk::Scrollbar vscrollbar (textview.get_vadjustment(), Gtk::ORIENTATION_VERTICAL);"
msgstr ""
"// creates its own adjustments\n"
"Gtk::TextView textview;\n"
"// uses the newly-created adjustment for the scrollbar as well\n"
"Gtk::Scrollbar vscrollbar (textview.get_vadjustment(), Gtk::ORIENTATION_VERTICAL);"

#: C/gtkmm-tutorial-in.xml:3735(title)
msgid "Adjustment Internals"
msgstr ""

#: C/gtkmm-tutorial-in.xml:3737(para)
msgid ""
"OK, you say, that's nice, but what if I want to create my own handlers to "
"respond when the user adjusts a <classname>Range</classname> widget or a "
"<classname>SpinButton</classname>. To access the value of a <classname>Gtk::"
"Adjustment</classname>, you can use the <methodname>get_value()</methodname> "
"and <methodname>set_value()</methodname> methods:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:3745(para)
msgid ""
"As mentioned earlier, <classname>Gtk::Adjustment</classname> can emit "
"signals. This is, of course, how updates happen automatically when you share "
"an <classname>Adjustment</classname> object between a <classname>Scrollbar</"
"classname> and another adjustable widget; all adjustable widgets connect "
"signal handlers to their adjustment's <literal>value_changed</literal> "
"signal, as can your program."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3754(para)
msgid ""
"So, for example, if you have a <classname>Scale</classname> widget, and you "
"want to change the rotation of a picture whenever its value changes, you "
"would create a signal handler like this:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:3759(programlisting)
#, no-wrap
msgid ""
"void cb_rotate_picture (Gtk::Widget *picture)\n"
"{\n"
"  picture-&gt;set_rotation (adj-&gt;value);\n"
"..."
msgstr ""
"void cb_rotate_picture (Gtk::Widget *picture)\n"
"{\n"
"  picture-&gt;set_rotation (adj-&gt;value);\n"
"..."

#: C/gtkmm-tutorial-in.xml:3763(para)
msgid "and connect it to the scale widget's adjustment like this:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:3766(programlisting)
#, no-wrap
msgid ""
"adj.value_changed.connect(sigc::bind&lt;Widget*&gt;(sigc::mem_fun(*this,\n"
"    &amp;cb_rotate_picture), picture));"
msgstr ""
"adj.value_changed.connect(sigc::bind&lt;Widget*&gt;(sigc::mem_fun(*this,\n"
"    &amp;cb_rotate_picture), picture));"

#: C/gtkmm-tutorial-in.xml:3769(para)
msgid ""
"What if a widget reconfigures the <parameter>upper</parameter> or "
"<parameter>lower</parameter> fields of its <classname>Adjustment</"
"classname>, such as when a user adds more text to a text widget? In this "
"case, it emits the <literal>changed</literal> signal."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3776(para)
msgid ""
"<classname>Range</classname> widgets typically connect a handler to this "
"signal, which changes their appearance to reflect the change - for example, "
"the size of the slider in a scrollbar will grow or shrink in inverse "
"proportion to the difference between the <parameter>lower</parameter> and "
"<parameter>upper</parameter> values of its <classname>Adjustment</classname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3785(para)
msgid ""
"You probably won't ever need to attach a handler to this signal, unless "
"you're writing a new type of range widget."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3789(programlisting)
#, no-wrap
msgid "adjustment-&gt;changed();"
msgstr "adjustment-&gt;changed();"

#: C/gtkmm-tutorial-in.xml:3796(title)
msgid "Widgets Without X-Windows"
msgstr ""

#: C/gtkmm-tutorial-in.xml:3798(para)
msgid ""
"Some Widgets do not have an associated X-Window, so they therefore do not "
"receive X events. This means that the signals described in the <link linkend="
"\"sec-xeventsignals\">X event signals</link> section will not be emitted. If "
"you want to capture events for these widgets you can use a special container "
"called <classname>Gtk::EventBox</classname>, which is described in the <link "
"linkend=\"sec-eventbox\">EventBox</link> section."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3807(para)
msgid "Here is a list of some of these Widgets:"
msgstr "Aquí hay una lista de estos widgets"

#: C/gtkmm-tutorial-in.xml:3810(programlisting)
#, fuzzy, no-wrap
#| msgid ""
#| "Gtk::Alignment\n"
#| "Gtk::Arrow\n"
#| "Gtk::AspectFrame\n"
#| "Gtk::Bin\n"
#| "Gtk::Box\n"
#| "Gtk::Button\n"
#| "Gtk::CheckButton\n"
#| "Gtk::Fixed\n"
#| "Gtk::Frame\n"
#| "Gtk::Grid\n"
#| "Gtk::Image\n"
#| "Gtk::Label\n"
#| "Gtk::MenuItem\n"
#| "Gtk::Notebook\n"
#| "Gtk::Paned\n"
#| "Gtk::RadioButton\n"
#| "Gtk::Range\n"
#| "Gtk::ScrolledWindow\n"
#| "Gtk::Separator\n"
#| "Gtk::Table\n"
#| "Gtk::Toolbar"
msgid ""
"Gtk::Alignment\n"
"Gtk::Arrow\n"
"Gtk::AspectFrame\n"
"Gtk::Bin\n"
"Gtk::Box\n"
"Gtk::Button\n"
"Gtk::CheckButton\n"
"Gtk::Fixed\n"
"Gtk::Frame\n"
"Gtk::Grid\n"
"Gtk::Image\n"
"Gtk::Label\n"
"Gtk::MenuItem\n"
"Gtk::Notebook\n"
"Gtk::Paned\n"
"Gtk::RadioButton\n"
"Gtk::Range\n"
"Gtk::ScrolledWindow\n"
"Gtk::Separator\n"
"Gtk::Table (deprecated from <application>gtkmm</application> version 3.4)\n"
"Gtk::Toolbar"
msgstr ""
"Gtk::Alignment\n"
"Gtk::Arrow\n"
"Gtk::AspectFrame\n"
"Gtk::Bin\n"
"Gtk::Box\n"
"Gtk::Button\n"
"Gtk::CheckButton\n"
"Gtk::Fixed\n"
"Gtk::Frame\n"
"Gtk::Grid\n"
"Gtk::Image\n"
"Gtk::Label\n"
"Gtk::MenuItem\n"
"Gtk::Notebook\n"
"Gtk::Paned\n"
"Gtk::RadioButton\n"
"Gtk::Range\n"
"Gtk::ScrolledWindow\n"
"Gtk::Separator\n"
"Gtk::Table\n"
"Gtk::Toolbar"

#: C/gtkmm-tutorial-in.xml:3832(para)
msgid ""
"These widgets are mainly used for decoration or layout, so you won't often "
"need to capture events on them. They are intended to have no X-Window in "
"order to improve performance."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3838(title) C/gtkmm-tutorial-in.xml:3882(title)
msgid "EventBox"
msgstr "EventBox"

#: C/gtkmm-tutorial-in.xml:3840(para)
msgid ""
"Some <application>gtkmm</application> widgets don't have associated X "
"windows; they draw on their parents' windows. Because of this, they cannot "
"receive events. Also, if they are incorrectly sized, they don't clip, so you "
"can get messy overwriting etc. To receive events on one of these widgets, "
"you can it inside an <classname>EventBox</classname> widget and then call "
"<methodname>Gtk::Widget::set_events()</methodname> on the EventBox before "
"showing it."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3848(para)
msgid ""
"Although the name <classname>EventBox</classname> emphasises the event-"
"handling method, the widget can also be used for clipping (and more; see the "
"example below)."
msgstr ""

#. <para>TODO: Why don't they have X Windows - explain clipping.
#. Also, how does this affect platform such as Windows and MacOS that don't use X.
#. </para>
#: C/gtkmm-tutorial-in.xml:3858(para)
msgid "The constructor for <classname>Gtk::EventBox</classname> is:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:3862(programlisting)
#, no-wrap
msgid "Gtk::EventBox();"
msgstr "Gtk::EventBox();"

#: C/gtkmm-tutorial-in.xml:3864(para)
msgid ""
"A child widget can be added to the <classname>EventBox</classname> using:"
msgstr ""
"Se puede agregar un widget hijo a <classname>EventBox</classname> utilizando:"

#: C/gtkmm-tutorial-in.xml:3868(programlisting)
#, no-wrap
msgid "event_box.add(child_widget);"
msgstr "event_box.add(child_widget);"

#: C/gtkmm-tutorial-in.xml:3874(para)
msgid ""
"The following example demonstrates both uses of an <classname>EventBox</"
"classname> - a label is created that is clipped to a small box, and set up "
"so that a mouse-click on the label causes the program to exit. Resizing the "
"window reveals varying amounts of the label."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3896(title)
msgid "Dialogs"
msgstr "Diálogos"

#: C/gtkmm-tutorial-in.xml:3898(para)
msgid ""
"Dialogs are used as secondary windows, to provide specific information or to "
"ask questions. <classname>Gtk::Dialog</classname> windows contain a few pre-"
"packed widgets to ensure consistency, and a <methodname>run()</methodname> "
"method which blocks until the user dismisses the dialog."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3905(para)
msgid ""
"There are several derived <classname>Dialog</classname> classes which you "
"might find useful. <classname>Gtk::MessageDialog</classname> is used for "
"most simple notifications. But at other times you might need to derive your "
"own dialog class to provide more complex functionality."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3912(para)
msgid ""
"To pack widgets into a custom dialog, you should pack them into the "
"<classname>Gtk::Box</classname>, available via <methodname>get_content_area()"
"</methodname>. To just add a <classname>Button</classname> to the bottom of "
"the <classname>Dialog</classname>, you could use the <methodname>add_button()"
"</methodname> method."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3920(para)
msgid ""
"The <methodname>run()</methodname> method returns an <literal>int</literal>. "
"This may be a value from the <literal>Gtk::ResponseType</literal> if the "
"user closed the button by clicking a standard button, or it could be the "
"custom response value that you specified when using <methodname>add_button()"
"</methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3929(title) C/gtkmm-tutorial-in.xml:3944(title)
msgid "MessageDialog"
msgstr "MessageDialog"

#: C/gtkmm-tutorial-in.xml:3930(para)
msgid ""
"<classname>MessageDialog</classname> is a convenience class, used to create "
"simple, standard message dialogs, with a message, an icon, and buttons for "
"user response. You can specify the type of message and the text in the "
"constructor, as well as specifying standard buttons via the <literal>Gtk::"
"ButtonsType</literal> enum."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3955(title)
msgid "FileChooserDialog"
msgstr "FileChooserDialog"

#: C/gtkmm-tutorial-in.xml:3956(para)
msgid ""
"The <classname>FileChooserDialog</classname> is suitable for use with \"Open"
"\" or \"Save\" menu items."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3960(para)
msgid ""
"Most of the useful member methods for this class are actually in the "
"<classname>Gtk::FileChooser</classname> base class."
msgstr ""

#: C/gtkmm-tutorial-in.xml:3971(title)
msgid "FileChooser"
msgstr "Selector de archivos"

#: C/gtkmm-tutorial-in.xml:3981(title) C/gtkmm-tutorial-in.xml:3994(title)
#, fuzzy
#| msgid "FileChooserDialog"
msgid "ColorChooserDialog"
msgstr "FileChooserDialog"

#: C/gtkmm-tutorial-in.xml:3982(para)
msgid ""
"The <classname>ColorChooserDialog</classname> allows the user to choose a "
"color. The <classname>ColorButton</classname> opens a color selection dialog "
"when it is clicked."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4005(title) C/gtkmm-tutorial-in.xml:4018(title)
msgid "FontChooserDialog"
msgstr "FontChooserDialog"

#: C/gtkmm-tutorial-in.xml:4006(para)
msgid ""
"The <classname>FontChooserDialog</classname> allows the user to choose a "
"font. The <classname>FontButton</classname> opens a font chooser dialog when "
"it is clicked."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4033(title)
msgid "The Drawing Area Widget"
msgstr "El widget de área de dibujo"

#: C/gtkmm-tutorial-in.xml:4034(para)
msgid ""
"The <classname>DrawingArea</classname> widget is a blank window that gives "
"you the freedom to create any graphic you desire. Along with that freedom "
"comes the responsibility to handle draw signals on the widget. When a widget "
"is first shown, or when it is covered and then uncovered again it needs to "
"redraw itself. Most widgets have code to do this, but the DrawingArea does "
"not, allowing you to write your own draw signal handler to determine how the "
"contents of the widget will be drawn. This is most often done by overriding "
"the virtual <methodname>on_draw()</methodname> member function."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4046(para)
msgid ""
"GTK+ uses the <ulink url=\"http://cairographics.org\">Cairo</ulink> drawing "
"API. With gtkmm, you may use the <ulink url=\"http://www.cairographics.org/"
"cairomm/\">cairomm</ulink> C++ API for cairo."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4051(para)
msgid ""
"You can draw very sophisticated shapes using Cairo, but the methods to do so "
"are quite basic. Cairo provides methods for drawing straight lines, curved "
"lines, and arcs (including circles). These basic shapes can be combined to "
"create more complex shapes and paths which can be filled with solid colors, "
"gradients, patterns, and other things. In addition, Cairo can perform "
"complex transformations, do compositing of images, and render antialiased "
"text."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4061(title)
msgid "Cairo and Pango"
msgstr "Cairo y Pango"

#: C/gtkmm-tutorial-in.xml:4062(para)
msgid ""
"Although Cairo can render text, it's not meant to be a replacement for "
"Pango. Pango is a better choice if you need to perform more advanced text "
"rendering such as wrapping or ellipsizing text. Drawing text with Cairo "
"should only be done if the text is part of a graphic."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4067(para)
msgid ""
"In this section of the tutorial, we'll cover the basic Cairo drawing model, "
"describe each of the basic drawing elements in some detail (with examples), "
"and then present a simple application that uses Cairo to draw a custom clock "
"widget."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4074(title)
msgid "The Cairo Drawing Model"
msgstr "El modelo de dibujo de Cairo"

#: C/gtkmm-tutorial-in.xml:4075(para)
msgid ""
"The basic concept of drawing in Cairo involves defining 'invisible' paths "
"and then stroking or filling them to make them visible."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4079(para)
msgid ""
"To do any drawing in <application>gtkmm</application> with Cairo, you must "
"first create a <classname>Cairo::Context</classname> object. This class "
"holds all of the graphics state parameters that describe how drawing is to "
"be done. This includes information such as line width, color, the surface to "
"draw to, and many other things. This allows the actual drawing functions to "
"take fewer arguments to simplify the interface. In <application>gtkmm</"
"application>, a <classname>Cairo::Context</classname> is created by calling "
"the <methodname>Gdk::Window::create_cairo_context()</methodname> function. "
"Since Cairo contexts are reference-counted objects, this function returns a "
"<classname>Cairo::RefPtr&lt;Cairo::Context&gt;</classname> object."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4092(para)
msgid ""
"The following example shows how to set up a Cairo context with a foreground "
"color of red and a width of 2. Any drawing functions that use this context "
"will use these settings."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4097(programlisting)
#, no-wrap
msgid ""
"Gtk::DrawingArea myArea;\n"
"Cairo::RefPtr&lt;Cairo::Context&gt; myContext = myArea.get_window()-&gt;create_cairo_context();\n"
"myContext-&gt;set_source_rgb(1.0, 0.0, 0.0);\n"
"myContext-&gt;set_line_width(2.0);"
msgstr ""
"Gtk::DrawingArea myArea;\n"
"Cairo::RefPtr&lt;Cairo::Context&gt; myContext = myArea.get_window()-&gt;create_cairo_context();\n"
"myContext-&gt;set_source_rgb(1.0, 0.0, 0.0);\n"
"myContext-&gt;set_line_width(2.0);"

#: C/gtkmm-tutorial-in.xml:4101(para)
msgid ""
"Each <classname>Cairo::Context</classname> is associated with a particular "
"<classname>Gdk::Window</classname>, so the first line of the above example "
"creates a <classname>Gtk::DrawingArea</classname> widget and the second line "
"uses its associated <classname>Gdk::Window</classname> to create a "
"<classname>Cairo::Context</classname> object. The final two lines change the "
"graphics state of the context."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4110(para)
msgid ""
"There are a number of graphics state variables that can be set for a Cairo "
"context. The most common context attributes are color (using "
"<methodname>set_source_rgb()</methodname> or <methodname>set_source_rgba()</"
"methodname> for translucent colors), line width (using "
"<methodname>set_line_width()</methodname>), line dash pattern (using "
"<methodname>set_dash()</methodname>), line cap style (using "
"<methodname>set_line_cap()</methodname>), and line join style (using "
"<methodname>set_line_join()</methodname>), and font styles (using "
"<methodname>set_font_size()</methodname>, <methodname>set_font_face()</"
"methodname> and others). There are many other settings as well, such as "
"transformation matrices, fill rules, whether to perform antialiasing, and "
"others. For further information, see the <ulink url=\"http://www."
"cairographics.org/cairomm/\">cairomm</ulink> API documentation."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4142(para)
msgid ""
"It is good practice to put all modifications to the graphics state between "
"<methodname>save()</methodname>/<methodname>restore()</methodname> function "
"calls. For example, if you have a function that takes a <classname>Cairo::"
"Context</classname> reference as an argument, you might implement it as "
"follows:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4148(programlisting)
#, no-wrap
msgid ""
"void doSomething(const Cairo::RefPtr&lt;Cairo::Context&gt;&amp; context, int x)\n"
"{\n"
"    context-&gt;save();\n"
"    // change graphics state\n"
"    // peform drawing operations\n"
"    context-&gt;restore();\n"
"}"
msgstr ""
"void doSomething(const Cairo::RefPtr&lt;Cairo::Context&gt;&amp; context, int x)\n"
"{\n"
"    context-&gt;save();\n"
"    // change graphics state\n"
"    // peform drawing operations\n"
"    context-&gt;restore();\n"
"}"

#: C/gtkmm-tutorial-in.xml:4125(para)
msgid ""
"The current state of a <classname>Cairo::Context</classname> can be saved to "
"an internal stack of saved states and later be restored to the state it was "
"in when you saved it. To do this, use the <methodname>save()</methodname> "
"method and the <methodname>restore()</methodname> method. This can be useful "
"if you need to temporarily change the line width and color (or any other "
"graphics setting) in order to draw something and then return to the previous "
"settings. In this situation, you could call <methodname>Cairo::Context::save"
"()</methodname>, change the graphics settings, draw the lines, and then call "
"<methodname>Cairo::Context::restore()</methodname> to restore the original "
"graphics state. Multiple calls to <methodname>save()</methodname> and "
"<methodname>restore()</methodname> can be nested; each call to "
"<methodname>restore()</methodname> restores the state from the matching "
"paired <methodname>save()</methodname>. <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4157(para)
msgid ""
"The virtual <methodname>on_draw()</methodname> method provides a Cairo "
"context that you shall use for drawing in the <classname>Gtk::DrawingArea</"
"classname> widget. It is not necessary to save and restore this Cairo "
"context in <methodname>on_draw()</methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4165(title)
msgid "Drawing Straight Lines"
msgstr "Dibujar Lineas Rectas"

#: C/gtkmm-tutorial-in.xml:4174(para)
msgid ""
"Since the Cairo graphics library was written with support for multiple "
"output targets (the X window system, PNG images, OpenGL, etc), there is a "
"distinction between user-space and device-space coordinates. The mapping "
"between these two coordinate systems defaults to one-to-one so that integer "
"values map roughly to pixels on the screen, but this setting can be adjusted "
"if desired. Sometimes it may be useful to scale the coordinates so that the "
"full width and height of a window both range from 0 to 1 (the 'unit square') "
"or some other mapping that works for your application. This can be done with "
"the <methodname>Cairo::Context::scale()</methodname> function."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4166(para)
msgid ""
"Now that we understand the basics of the Cairo graphics library, we're "
"almost ready to start drawing. We'll start with the simplest of drawing "
"elements: the straight line. But first you need to know a little bit about "
"Cairo's coordinate system. The origin of the Cairo coordinate system is "
"located in the upper-left corner of the window with positive x values to the "
"right and positive y values going down. <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4189(para)
msgid ""
"In this example, we'll construct a small but fully functional "
"<application>gtkmm</application> program and draw some lines into the "
"window. The lines are drawn by creating a path and then stroking it. A path "
"is created using the functions <methodname>Cairo::Context::move_to()</"
"methodname> and <methodname>Cairo::Context::line_to()</methodname>. The "
"function <methodname>move_to()</methodname> is similar to the act of lifting "
"your pen off of the paper and placing it somewhere else -- no line is drawn "
"between the point you were at and the point you moved to. To draw a line "
"between two points, use the <methodname>line_to()</methodname> function."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4201(para)
msgid ""
"After you've finished creating your path, you still haven't drawn anything "
"visible yet. To make the path visible, you must use the function "
"<methodname>stroke()</methodname> which will stroke the current path with "
"the line width and style specified in your <classname>Cairo::Context</"
"classname> object. After stroking, the current path will be cleared so that "
"you can start on your next path."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4210(para)
msgid ""
"Many Cairo drawing functions have a <methodname>_preserve()</methodname> "
"variant. Normally drawing functions such as <methodname>clip()</methodname>, "
"<methodname>fill()</methodname>, or <methodname>stroke()</methodname> will "
"clear the current path. If you use the <methodname>_preserve()</methodname> "
"variant, the current path will be retained so that you can use the same path "
"with the next drawing function."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4220(title) C/gtkmm-tutorial-in.xml:4338(title)
msgid "Drawing Area - Lines"
msgstr "Área de dibujo: líneas"

#: C/gtkmm-tutorial-in.xml:4228(para)
msgid ""
"This program contains a single class, <classname>MyArea</classname>, which "
"is a subclass of <classname>Gtk::DrawingArea</classname> and contains an "
"<methodname>on_draw()</methodname> member function. This function is called "
"whenever the image in the drawing area needs to be redrawn. It is passed a "
"<classname>Cairo::RefPtr</classname> pointer to a <classname>Cairo::Context</"
"classname> that we use for the drawing. The actual drawing code sets the "
"color we want to use for drawing by using <methodname>set_source_rgb()</"
"methodname> which takes arguments defining the Red, Green, and Blue "
"components of the desired color (valid values are between 0 and 1). After "
"setting the color, we created a new path using the functions "
"<methodname>move_to()</methodname> and <methodname>line_to()</methodname>, "
"and then stroked this path with <methodname>stroke()</methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4245(title)
msgid "Drawing with relative coordinates"
msgstr "Dibujar con coordenadas relativas"

#: C/gtkmm-tutorial-in.xml:4246(para)
msgid ""
"In the example above we drew everything using absolute coordinates. You can "
"also draw using relative coordinates. For a straight line, this is done with "
"the function <methodname>Cairo::Context::rel_line_to()</methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4252(title)
msgid "Line styles"
msgstr "Estilos de línea"

#: C/gtkmm-tutorial-in.xml:4253(para)
msgid ""
"In addition to drawing basic straight lines, there are a number of things "
"that you can customize about a line. You've already seen examples of setting "
"a line's color and width, but there are others as well."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4259(para)
msgid ""
"If you've drawn a series of lines that form a path, you may want them to "
"join together in a certain way. Cairo offers three different ways to join "
"lines together: Miter, Bevel, and Round. These are show below:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4266(title)
msgid "Different join types in Cairo"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4271(para)
msgid ""
"The line join style is set using the function <methodname>Cairo::Context::"
"set_line_join()</methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4275(para)
msgid ""
"Line ends can have different styles as well. The default style is for the "
"line to start and stop exactly at the destination points of the line. This "
"is called a Butt cap. The other options are Round (uses a round ending, with "
"the center of the circle at the end point) or Square (uses a squared ending, "
"with the center of the square at the end point). This setting is set using "
"the function <methodname>Cairo::Context::set_line_cap()</methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4285(para)
msgid ""
"There are other things you can customize as well, including creating dashed "
"lines and other things. For more information, see the Cairo API "
"documentation."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4292(title)
#, fuzzy
#| msgid "Drawing Straight Lines"
msgid "Drawing thin lines"
msgstr "Dibujar Lineas Rectas"

#: C/gtkmm-tutorial-in.xml:4293(para)
msgid ""
"If you try to draw one pixel wide lines, you may notice that the line "
"sometimes comes up blurred and wider than it ought to be. This happens "
"because Cairo will try to draw from the selected position, to both sides "
"(half to each), so if you're positioned right on the intersection of the "
"pixels, and want a one pixel wide line, Cairo will try to use half of each "
"adjacent pixel, which isn't possible (a pixel is the smallest unit "
"possible). This happens when the width of the line is an odd number of "
"pixels (not just one pixel)."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4303(para)
msgid ""
"The trick is to position in the middle of the pixel where you want the line "
"to be drawn, and thus guaranteeing you get the desired results. See <ulink "
"url=\"http://cairographics.org/FAQ/#sharp_lines\">Cairo FAQ</ulink>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4310(title)
#, fuzzy
#| msgid "Drawing Area - Lines"
msgid "Drawing Area - Thin Lines"
msgstr "Área de dibujo: líneas"

#: C/gtkmm-tutorial-in.xml:4321(title)
msgid "Drawing Curved Lines"
msgstr "Dibujar líneas curvas"

#: C/gtkmm-tutorial-in.xml:4322(para)
msgid ""
"In addition to drawing straight lines Cairo allows you to easily draw curved "
"lines (technically a cubic Bézier spline) using the <methodname>Cairo::"
"Context::curve_to()</methodname> and <methodname>Cairo::Context::rel_curve_to"
"()</methodname> functions. These functions take coordinates for a "
"destination point as well as coordinates for two 'control' points. This is "
"best explained using an example, so let's dive in."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4333(para)
msgid ""
"This simple application draws a curve with Cairo and displays the control "
"points for each end of the curve."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4345(para)
msgid ""
"The only difference between this example and the straight line example is in "
"the <methodname>on_draw()</methodname> function, but there are a few new "
"concepts and functions introduced here, so let's examine them briefly."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4351(para)
msgid ""
"We make a call to <methodname>Cairo::Context::scale()</methodname>, passing "
"in the width and height of the drawing area. This scales the user-space "
"coordinate system such that the width and height of the widget are both "
"equal to 1.0 'units'. There's no particular reason to scale the coordinate "
"system in this case, but sometimes it can make drawing operations easier."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4360(para)
msgid ""
"The call to <methodname>Cairo::Context::curve_to()</methodname> should be "
"fairly self-explanatory. The first pair of coordinates define the control "
"point for the beginning of the curve. The second set of coordinates define "
"the control point for the end of the curve, and the last set of coordinates "
"define the destination point. To make the concept of control points a bit "
"easier to visualize, a line has been draw from each control point to the end-"
"point on the curve that it is associated with. Note that these control point "
"lines are both translucent. This is achieved with a variant of "
"<methodname>set_source_rgb()</methodname> called <methodname>set_source_rgba"
"()</methodname>. This function takes a fourth argument specifying the alpha "
"value of the color (valid values are between 0 and 1)."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4378(title)
msgid "Drawing Arcs and Circles"
msgstr "Dibujar arcos y círculos"

#: C/gtkmm-tutorial-in.xml:4379(para)
msgid ""
"With Cairo, the same function is used to draw arcs, circles, or ellipses: "
"<methodname>Cairo::Context::arc()</methodname>. This function takes five "
"arguments. The first two are the coordinates of the center point of the arc, "
"the third argument is the radius of the arc, and the final two arguments "
"define the start and end angle of the arc. All angles are defined in "
"radians, so drawing a circle is the same as drawing an arc from 0 to 2 * "
"M_PI radians. An angle of 0 is in the direction of the positive X axis (in "
"user-space). An angle of M_PI/2 radians (90 degrees) is in the direction of "
"the positive Y axis (in user-space). Angles increase in the direction from "
"the positive X axis toward the positive Y axis. So with the default "
"transformation matrix, angles increase in a clockwise direction. (Remember "
"that the positive Y axis points downwards.)"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4400(programlisting)
#, no-wrap
msgid ""
"context-&gt;save();\n"
"context-&gt;translate(x, y);\n"
"context-&gt;scale(width / 2.0, height / 2.0);\n"
"context-&gt;arc(0.0, 0.0, 1.0, 0.0, 2 * M_PI);\n"
"context-&gt;restore();"
msgstr ""
"context-&gt;save();\n"
"context-&gt;translate(x, y);\n"
"context-&gt;scale(width / 2.0, height / 2.0);\n"
"context-&gt;arc(0.0, 0.0, 1.0, 0.0, 2 * M_PI);\n"
"context-&gt;restore();"

#: C/gtkmm-tutorial-in.xml:4394(para)
msgid ""
"To draw an ellipse, you can scale the current transformation matrix by "
"different amounts in the X and Y directions. For example, to draw an ellipse "
"with center at <varname>x</varname>, <varname>y</varname> and size "
"<varname>width</varname>, <varname>height</varname>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4408(para)
msgid ""
"Here's an example of a simple program that draws an arc, a circle and an "
"ellipse into a drawing area."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4413(title)
msgid "Drawing Area - Arcs"
msgstr "Área de dibujo: arcos"

#: C/gtkmm-tutorial-in.xml:4422(para)
msgid ""
"There are a couple of things to note about this example code. Again, the "
"only real difference between this example and the previous ones is the "
"<methodname>on_draw()</methodname> function, so we'll limit our focus to "
"that function. In addition, the first part of the function is nearly "
"identical to the previous examples, so we'll skip that portion."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4430(para)
msgid ""
"Note that in this case, we've expressed nearly everything in terms of the "
"height and width of the window, including the width of the lines. Because of "
"this, when you resize the window, everything scales with the window. Also "
"note that there are three drawing sections in the function and each is "
"wrapped with a <methodname>save()</methodname>/<methodname>restore()</"
"methodname> pair so that we're back at a known state after each drawing."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4439(para)
msgid ""
"The section for drawing an arc introduces one new function, "
"<methodname>close_path()</methodname>. This function will in effect draw a "
"straight line from the current point back to the first point in the path. "
"There is a significant difference between calling <methodname>close_path()</"
"methodname> and manually drawing a line back to the starting point, however. "
"If you use <methodname>close_path()</methodname>, the lines will be nicely "
"joined together. If you use <methodname>line_to()</methodname> instead, the "
"lines will end at the same point, but Cairo won't do any special joining."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4452(title)
msgid "Drawing counter-clockwise"
msgstr "Dibujar en sentido anti-horario"

#: C/gtkmm-tutorial-in.xml:4453(para)
msgid ""
"The function <methodname>Cairo::Context::arc_negative()</methodname> is "
"exactly the same as <methodname>Cairo::Context::arc()</methodname> but the "
"angles go the opposite direction."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4465(title)
msgid "Drawing Text"
msgstr "Dibujar texto"

#: C/gtkmm-tutorial-in.xml:4467(title)
msgid "Drawing Text with Pango"
msgstr "Dibujar texto con Pango"

#: C/gtkmm-tutorial-in.xml:4468(para)
msgid ""
"Text is drawn via Pango Layouts. The easiest way to create a "
"<classname>Pango::Layout</classname> is to use <methodname>Gtk::Widget::"
"create_pango_layout()</methodname>. Once created, the layout can be "
"manipulated in various ways, including changing the text, font, etc. "
"Finally, the layout can be rendered using the <methodname>Pango::Layout::"
"show_in_cairo_context()</methodname> method."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4480(para)
msgid ""
"Here is an example of a program that draws some text, some of it upside-"
"down. The Printing chapter contains another <link linkend=\"sec-printing-"
"example\">example</link> of drawing text."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4486(title)
#, fuzzy
#| msgid "Drawing Area - Lines"
msgid "Drawing Area - Text"
msgstr "Área de dibujo: líneas"

#: C/gtkmm-tutorial-in.xml:4503(title)
msgid "Drawing Images"
msgstr "Dibujar imágenes"

#: C/gtkmm-tutorial-in.xml:4504(para)
msgid ""
"There is a method for drawing from a <classname>Gdk::Pixbuf</classname> to a "
"<classname>Cairo::Context</classname>. A <classname>Gdk::Pixbuf</classname> "
"buffer is a useful wrapper around a collection of pixels, which can be read "
"from files, and manipulated in various ways."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4511(para)
msgid ""
"Probably the most common way of creating <classname>Gdk::Pixbuf</classname>s "
"is to use <methodname>Gdk::Pixbuf::create_from_file()</methodname>, which "
"can read an image file, such as a png file into a pixbuf ready for rendering."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4518(para)
msgid ""
"The <classname>Gdk::Pixbuf</classname> can be rendered by setting it as the "
"source pattern of the Cairo context with <methodname>Gdk::Cairo::"
"set_source_pixbuf()</methodname>. Then draw the image with either "
"<methodname>Cairo::Context::paint()</methodname> (to draw the whole image), "
"or <methodname>Cairo::Context::rectangle()</methodname> and "
"<methodname>Cairo::Context::fill()</methodname> (to fill the specified "
"rectangle). <methodname>set_source_pixbuf()</methodname> is not a member of "
"<classname>Cairo::Context</classname>. It takes a <classname>Cairo::Context</"
"classname> as its first parameter."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4529(para)
msgid ""
"Here is a small bit of code to tie it all together: (Note that usually you "
"wouldn't load the image every time in the draw signal handler! It's just "
"shown here to keep it all together.)"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4534(programlisting)
#, no-wrap
msgid ""
"bool MyArea::on_draw(const Cairo::RefPtr&lt;Cairo::Context&gt;&amp; cr)\n"
"{\n"
"  Glib::RefPtr&lt;Gdk::Pixbuf&gt; image = Gdk::Pixbuf::create_from_file(\"myimage.png\");\n"
"  // Draw the image at 110, 90, except for the outermost 10 pixels.\n"
"  Gdk::Cairo::set_source_pixbuf(cr, image, 100, 80);\n"
"  cr-&gt;rectangle(110, 90, image-&gt;get_width()-20, image-&gt;get_height()-20);\n"
"  cr-&gt;fill();\n"
"  return true;\n"
"}"
msgstr ""
"bool MyArea::on_draw(const Cairo::RefPtr&lt;Cairo::Context&gt;&amp; cr)\n"
"{\n"
"  Glib::RefPtr&lt;Gdk::Pixbuf&gt; image = Gdk::Pixbuf::create_from_file(\"myimage.png\");\n"
"  // Draw the image at 110, 90, except for the outermost 10 pixels.\n"
"  Gdk::Cairo::set_source_pixbuf(cr, image, 100, 80);\n"
"  cr-&gt;rectangle(110, 90, image-&gt;get_width()-20, image-&gt;get_height()-20);\n"
"  cr-&gt;fill();\n"
"  return true;\n"
"}"

#: C/gtkmm-tutorial-in.xml:4545(para)
msgid "Here is an example of a simple program that draws an image."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4549(title)
msgid "Drawing Area - Image"
msgstr "Dibujar área: imagen"

#: C/gtkmm-tutorial-in.xml:4569(title)
msgid "Example Application: Creating a Clock with Cairo"
msgstr "Ejemplo de aplicación: crear un reloj con Cairo"

#: C/gtkmm-tutorial-in.xml:4570(para)
msgid ""
"Now that we've covered the basics of drawing with Cairo, let's try to put it "
"all together and create a simple application that actually does something. "
"The following example uses Cairo to create a custom <classname>Clock</"
"classname> widget. The clock has a second hand, a minute hand, and an hour "
"hand, and updates itself every second."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4582(para)
msgid ""
"As before, almost all of the interesting stuff is done in the draw signal "
"handler <methodname>on_draw()</methodname>. Before we dig into the draw "
"signal handler, notice that the constructor for the <classname>Clock</"
"classname> widget connects a handler function <methodname>on_timeout()</"
"methodname> to a timer with a timeout period of 1000 milliseconds (1 "
"second). This means that <methodname>on_timeout()</methodname> will get "
"called once per second. The sole responsibility of this function is to "
"invalidate the window so that <application>gtkmm</application> will be "
"forced to redraw it."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4593(para)
msgid ""
"Now let's take a look at the code that performs the actual drawing. The "
"first section of <methodname>on_draw()</methodname> should be pretty "
"familiar by now. This example again scales the coordinate system to be a "
"unit square so that it's easier to draw the clock as a percentage of window "
"size so that it will automatically scale when the window size is adjusted. "
"Furthermore, the coordinate system is scaled over and down so that the (0, "
"0) coordinate is in the very center of the window."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4603(para)
msgid ""
"The function <methodname>Cairo::Context::paint()</methodname> is used here "
"to set the background color of the window. This function takes no arguments "
"and fills the current surface (or the clipped portion of the surface) with "
"the source color currently active. After setting the background color of the "
"window, we draw a circle for the clock outline, fill it with white, and then "
"stroke the outline in black. Notice that both of these actions use the "
"<methodname>_preserve</methodname> variant to preserve the current path, and "
"then this same path is clipped to make sure than our next lines don't go "
"outside the outline of the clock."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4615(para)
msgid ""
"After drawing the outline, we go around the clock and draw ticks for every "
"hour, with a larger tick at 12, 3, 6, and 9. Now we're finally ready to "
"implement the time-keeping functionality of the clock, which simply involves "
"getting the current values for hours, minutes and seconds, and drawing the "
"hands at the correct angles."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4627(para)
msgid ""
"<classname>Gtk::Widget</classname> has several methods and signals which are "
"prefixed with \"drag_\". These are used for Drag and Drop."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4632(title)
msgid "Sources and Destinations"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4633(para)
msgid ""
"Things are dragged from <literal>sources</literal> to be dropped on "
"<literal>destinations</literal>. Each source and destination has infomation "
"about the data formats that it can send or receive, provided by "
"<classname>Gtk::TargetEntry</classname> items. A drop destination will only "
"accept a dragged item if they both share a compatible <classname>Gtk::"
"TargetEntry</classname> item. Appropriate signals will then be emitted, "
"telling the signal handlers which <classname>Gtk::TargetEntry</classname> "
"was used."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4646(para)
msgid "target: A name, such as \"STRING\""
msgstr ""

#: C/gtkmm-tutorial-in.xml:4647(para)
msgid ""
"info: An identifier which will be sent to your signals to tell you which "
"TargetEntry was used."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4648(para)
msgid ""
"flags: Used only for drag and drop, this specifies whether the data may be "
"dragged to other widgets and applications, or only to the same ones."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4643(para)
msgid ""
"<classname>Gtk::TargetEntry</classname> objects contain this information: "
"<placeholder-1/>"
msgstr ""
"Los objetos <classname>Gtk::TargetEntry</classname> contienen esta "
"información: <placeholder-1/>"

#: C/gtkmm-tutorial-in.xml:4656(para)
msgid ""
"<classname>Widgets</classname> can be identified as sources or destinations "
"using these <classname>Gtk::Widget</classname> methods:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4660(programlisting)
#, no-wrap
msgid ""
"void drag_source_set(const ArrayHandle_TargetEntry&amp; targets,\n"
"      GdkModifierType start_button_mask, GdkDragAction actions);"
msgstr ""
"void drag_source_set(const ArrayHandle_TargetEntry&amp; targets,\n"
"      GdkModifierType start_button_mask, GdkDragAction actions);"

#: C/gtkmm-tutorial-in.xml:4665(para)
msgid ""
"<literal>targets</literal> is a container of <classname>Gtk::TargetEntry</"
"classname> (<classname>std::list&lt;Gtk::TargetEntry&gt;</classname> or "
"<classname>std::vector&lt;Gtk::TargetEntry&gt;</classname>, for instance) "
"elements."
msgstr ""
"<literal>targets</literal> es un contenedor de elementos <classname>Gtk::"
"TargetEntry</classname> (<classname>std::list&lt;Gtk::TargetEntry&gt;</"
"classname> or <classname>std::vector&lt;Gtk::TargetEntry&gt;</classname>, "
"por ejemplo)."

#: C/gtkmm-tutorial-in.xml:4674(para)
msgid ""
"<literal>start_button_mask</literal> is an ORed combination of values, which "
"specify which modifier key or mouse button must be pressed to start the drag."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4681(para)
msgid ""
"<literal>actions</literal> is an ORed combination of values, which specified "
"which Drag and Drop operations will be possible from this source - for "
"instance, copy, move, or link. The user can choose between the actions by "
"using modifier keys, such as <keycap>Shift</keycap> to change from "
"<literal>copy</literal> to <literal>move</literal>, and this will be shown "
"by a different cursor."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4692(programlisting)
#, no-wrap
msgid ""
"void drag_dest_set(const ArrayHandle_TargetEntry&amp; targets,\n"
"    GtkDestDefaults flags, GdkDragAction actions);"
msgstr ""
"void drag_dest_set(const ArrayHandle_TargetEntry&amp; targets,\n"
"    GtkDestDefaults flags, GdkDragAction actions);"

#: C/gtkmm-tutorial-in.xml:4697(para)
msgid ""
"<literal>flags</literal> is an ORed combination of values which indicates "
"how the widget will respond visually to Drag and Drop items."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4703(para)
msgid ""
"<literal>actions</literal> indicates the Drag and Drop actions which this "
"destination can receive - see the description above."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4713(para)
msgid ""
"When a drop destination has accepted a dragged item, certain signals will be "
"emitted, depending on what action has been selected. For instance, the user "
"might have held down the <keycap>Shift</keycap> key to specify a "
"<literal>move</literal> rather than a <literal>copy</literal>. Remember that "
"the user can only select the actions which you have specified in your calls "
"to <methodname>drag_dest_set()</methodname> and <methodname>drag_source_set()"
"</methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4724(title) C/gtkmm-tutorial-in.xml:4847(title)
msgid "Copy"
msgstr "Copiar"

#: C/gtkmm-tutorial-in.xml:4728(para)
msgid "<literal>drag_begin</literal>: Provides DragContext."
msgstr "<literal>drag_begin</literal>: proporciona DragContext."

#: C/gtkmm-tutorial-in.xml:4729(para)
msgid ""
"<literal>drag_motion</literal>: Provides DragContext and coordinates. You "
"can call the drag_status() method of the DragContext to indicate which "
"target will be accepted."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4730(para)
msgid ""
"<literal>drag_get</literal>: Provides <literal>info</literal> about the "
"dragged data format, and a <literal>GtkSelectionData</literal> structure, in "
"which you should put the requested data."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4731(para)
msgid "<literal>drag_drop</literal>: Provides DragContext and coordinates."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4732(para)
msgid "<literal>drag_end</literal>: Provides DragContext."
msgstr "<literal>drag_end</literal>: proporciona DragContext."

#: C/gtkmm-tutorial-in.xml:4725(para)
msgid ""
"The source widget will emit these signals, in this order: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4739(para)
msgid ""
"<literal>drag_data_received</literal>: Provides <literal>info</literal> "
"about the dragged data format, and a <literal>GtkSelectionData</literal> "
"structure which contains the dropped data. You should call the "
"<methodname>drag_finish()</methodname> method of the <literal>DragContext</"
"literal> to indicate whether the operation was successful."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4735(para)
msgid ""
"The destination widget will emit this signal, after the source destination "
"has emitted the <literal>drag_get</literal> signal: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4754(title)
msgid "Move"
msgstr "Mover"

#: C/gtkmm-tutorial-in.xml:4757(para)
msgid ""
"<literal>drag_delete</literal>: Gives the source the opportunity to delete "
"the original data if that's appropriate."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4755(para)
msgid ""
"During a <literal>move</literal>, the source widget will also emit this "
"signal: <placeholder-1/>"
msgstr ""
"Mientras se realice un <literal>movimiento</literal>, el widget origen "
"también emitirá esta señal: <placeholder-1/>"

#: C/gtkmm-tutorial-in.xml:4771(title)
msgid "DragContext"
msgstr "DragContext"

#: C/gtkmm-tutorial-in.xml:4772(para)
msgid ""
"The drag and drop signals provide a DragContext, which contains some "
"information about the drag and drop operation and can be used to influence "
"the process. For instance, you can discover the source widget, or change the "
"drag and drop icon, by using the <methodname>set_icon()</methodname> "
"methods. More importantly, you should call the <methodname>drag_finish()</"
"methodname> method from your <literal>drag_data_received</literal> signal "
"handler to indicate whether the drop was successful."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4785(para)
msgid ""
"Here is a very simple example, demonstrating a drag and drop <literal>Copy</"
"literal> operation:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4796(para)
msgid "There is a more complex example in examples/others/dnd."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4805(title)
msgid "The Clipboard"
msgstr "El portapapeles"

#: C/gtkmm-tutorial-in.xml:4806(para)
msgid ""
"Simple text copy-paste functionality is provided for free by widgets such as "
"Gtk::Entry and Gtk::TextView, but you might need special code to deal with "
"your own data formats. For instance, a drawing program would need special "
"code to allow copy and paste within a view, or between documents."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4808(para)
msgid ""
"<classname>Gtk::Clipboard</classname> is a singleton. You can get the one "
"and only instance with <methodname>Gtk::Clipboard::get()</methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4813(para)
msgid ""
"So your application doesn't need to wait for clipboard operations, "
"particularly between the time when the user chooses Copy and then later "
"chooses Paste, most <classname>Gtk::Clipboard</classname> methods take "
"<classname>sigc::slot</classname>s which specify callback methods. When "
"<classname>Gtk::Clipboard</classname> is ready, it will call these methods, "
"either providing the requested data, or asking for data."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4825(title)
msgid "Targets"
msgstr "Objetivos"

#: C/gtkmm-tutorial-in.xml:4826(para)
msgid ""
"Different applications contain different types of data, and they might make "
"that data available in a variety of formats. <application>gtkmm</"
"application> calls these data types <literal>target</literal>s."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4830(para)
msgid ""
"For instance, gedit can supply and receive the <literal>\"UTF8_STRING\"</"
"literal> target, so you can paste data into gedit from any application that "
"supplies that target. Or two different image editing applications might "
"supply and receive a variety of image formats as targets. As long as one "
"application can receive one of the targets that the other supplies then you "
"will be able to copy data from one to the other."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4834(para)
msgid ""
"A target can be in a variety of binary formats. This chapter, and the "
"examples, assume that the data is 8-bit text. This would allow us to use an "
"XML format for the clipboard data. However this would probably not be "
"appropriate for binary data such as images. <classname>Gtk::Clipboard</"
"classname> provides overloads that allow you to specify the format in more "
"detail if necessary."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4843(para)
msgid ""
"The <link linkend=\"chapter-draganddrop\">Drag and Drop</link> API uses the "
"same mechanism. You should probably use the same data targets and formats "
"for both Clipboard and Drag and Drap operations."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4848(para)
msgid ""
"When the user asks to copy some data, you should tell the "
"<classname>Clipboard</classname> what targets are available, and provide the "
"callback methods that it can use to get the data. At this point you should "
"store a copy of the data, to be provided when the clipboard calls your "
"callback method in repsonse to a paste."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4857(programlisting)
#, no-wrap
msgid ""
"Glib::RefPtr&lt;Gtk::Clipboard&gt; refClipboard = Gtk::Clipboard::get();\n"
"\n"
"//Targets:\n"
"std::list&lt;Gtk::TargetEntry&gt; listTargets;\n"
"listTargets.push_back( Gtk::TargetEntry(\"example_custom_target\") );\n"
"listTargets.push_back( Gtk::TargetEntry(\"UTF8_STRING\") );\n"
"\n"
"refClipboard-&gt;set( listTargets,\n"
"    sigc::mem_fun(*this, &amp;ExampleWindow::on_clipboard_get),\n"
"    sigc::mem_fun(*this, &amp;ExampleWindow::on_clipboard_clear) );"
msgstr ""
"Glib::RefPtr&lt;Gtk::Clipboard&gt; refClipboard = Gtk::Clipboard::get();\n"
"\n"
"//Targets:\n"
"std::list&lt;Gtk::TargetEntry&gt; listTargets;\n"
"listTargets.push_back( Gtk::TargetEntry(\"example_custom_target\") );\n"
"listTargets.push_back( Gtk::TargetEntry(\"UTF8_STRING\") );\n"
"\n"
"refClipboard-&gt;set( listTargets,\n"
"    sigc::mem_fun(*this, &amp;ExampleWindow::on_clipboard_get),\n"
"    sigc::mem_fun(*this, &amp;ExampleWindow::on_clipboard_clear) );"

#: C/gtkmm-tutorial-in.xml:4868(para)
msgid ""
"Your callback will then provide the store data when the user chooses to "
"paste the data. For instance:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4870(programlisting)
#, no-wrap
msgid ""
"void ExampleWindow::on_clipboard_get(\n"
"    Gtk::SelectionData&amp; selection_data, guint info)\n"
"{\n"
"  const Glib::ustring target = selection_data.get_target();\n"
"\n"
"  if(target == \"example_custom_target\")\n"
"    selection_data.set(\"example_custom_target\", m_ClipboardStore);\n"
"}"
msgstr ""
"void ExampleWindow::on_clipboard_get(\n"
"    Gtk::SelectionData&amp; selection_data, guint info)\n"
"{\n"
"  const Glib::ustring target = selection_data.get_target();\n"
"\n"
"  if(target == \"example_custom_target\")\n"
"    selection_data.set(\"example_custom_target\", m_ClipboardStore);\n"
"}"

#: C/gtkmm-tutorial-in.xml:4878(para)
msgid ""
"The <literal>ideal</literal> example below can supply more than one "
"clipboard target."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4882(para)
msgid ""
"The clear callback allows you to free the memory used by your stored data "
"when the clipboard replaces its data with something else."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4888(title)
msgid "Paste"
msgstr "Pegar"

#: C/gtkmm-tutorial-in.xml:4889(para)
msgid ""
"When the user asks to paste data from the <classname>Clipboard</classname>, "
"you should request a specific format and provide a callback method which "
"will be called with the actual data. For instance:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4894(programlisting)
#, no-wrap
msgid ""
"refClipboard-&gt;request_contents(\"example_custom_target\",\n"
"    sigc::mem_fun(*this, &amp;ExampleWindow::on_clipboard_received) );"
msgstr ""
"refClipboard-&gt;request_contents(\"example_custom_target\",\n"
"    sigc::mem_fun(*this, &amp;ExampleWindow::on_clipboard_received) );"

#: C/gtkmm-tutorial-in.xml:4897(para)
msgid "Here is an example callback method:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4899(programlisting)
#, no-wrap
msgid ""
"void ExampleWindow::on_clipboard_received(\n"
"    const Gtk::SelectionData&amp; selection_data)\n"
"{\n"
"  Glib::ustring clipboard_data = selection_data.get_data_as_string();\n"
"  //Do something with the pasted data.\n"
"}"
msgstr ""
"void ExampleWindow::on_clipboard_received(\n"
"    const Gtk::SelectionData&amp; selection_data)\n"
"{\n"
"  Glib::ustring clipboard_data = selection_data.get_data_as_string();\n"
"  //Do something with the pasted data.\n"
"}"

#: C/gtkmm-tutorial-in.xml:4907(title)
msgid "Discovering the available targets"
msgstr "Descubrir los objetivos disponibles"

#: C/gtkmm-tutorial-in.xml:4908(para)
msgid ""
"To find out what targets are currently available on the "
"<classname>Clipboard</classname> for pasting, call the "
"<methodname>request_targets()</methodname> method, specifying a method to be "
"called with the information. For instance:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4914(programlisting)
#, no-wrap
msgid ""
"refClipboard-&gt;request_targets( sigc::mem_fun(*this,\n"
"    &amp;ExampleWindow::on_clipboard_received_targets) );"
msgstr ""
"refClipboard-&gt;request_targets( sigc::mem_fun(*this,\n"
"    &amp;ExampleWindow::on_clipboard_received_targets) );"

#: C/gtkmm-tutorial-in.xml:4917(para)
msgid ""
"In your callback, compare the list of available targets with those that your "
"application supports for pasting. You could enable or disable a Paste menu "
"item, depending on whether pasting is currently possible. For instance:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4920(programlisting)
#, no-wrap
msgid ""
"void ExampleWindow::on_clipboard_received_targets(\n"
"  const Glib::StringArrayHandle&amp; targets_array)\n"
"{\n"
"  // Get the list of available clipboard targets:\n"
"  std::list&lt;std::string&gt; targets = targets_array;\n"
"\n"
"  const bool bPasteIsPossible =\n"
"    std::find(targets.begin(), targets.end(),\n"
"      example_target_custom) != targets.end();\n"
"\n"
"  // Enable/Disable the Paste button appropriately:\n"
"  m_Button_Paste.set_sensitive(bPasteIsPossible);\n"
"}"
msgstr ""
"void ExampleWindow::on_clipboard_received_targets(\n"
"  const Glib::StringArrayHandle&amp; targets_array)\n"
"{\n"
"  // Get the list of available clipboard targets:\n"
"  std::list&lt;std::string&gt; targets = targets_array;\n"
"\n"
"  const bool bPasteIsPossible =\n"
"    std::find(targets.begin(), targets.end(),\n"
"      example_target_custom) != targets.end();\n"
"\n"
"  // Enable/Disable the Paste button appropriately:\n"
"  m_Button_Paste.set_sensitive(bPasteIsPossible);\n"
"}"

#: C/gtkmm-tutorial-in.xml:4939(title) C/gtkmm-tutorial-in.xml:5332(title)
msgid "Simple"
msgstr "Simple"

#: C/gtkmm-tutorial-in.xml:4940(para)
msgid ""
"This example allows copy and pasting of application-specific data, using the "
"standard text target. Although this is simple, it's not ideal because it "
"does not identify the <classname>Clipboard</classname> data as being of a "
"particular type."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4948(title)
msgid "Clipboard - Simple"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4958(title)
msgid "Ideal"
msgstr "Ideal"

#: C/gtkmm-tutorial-in.xml:4961(simpara)
msgid ""
"Defines a custom clipboard target, though the format of that target is still "
"text."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4962(simpara)
msgid ""
"It supports pasting of 2 targets - both the custom one and a text one that "
"creates an arbitrary text representation of the custom data."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4963(simpara)
msgid ""
"It uses <methodname>request_targets()</methodname> and the "
"<literal>owner_change</literal> signal and disables the Paste button if it "
"can't use anything on the clipboard."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4959(para)
msgid "This is like the simple example, but it <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4968(title)
msgid "Clipboard - Ideal"
msgstr ""

#: C/gtkmm-tutorial-in.xml:4984(title)
msgid "Printing"
msgstr "Impresión"

#: C/gtkmm-tutorial-in.xml:4986(para)
msgid ""
"At the application development level, <application>gtkmm</application>'s "
"printing API provides dialogs that are consistent across applications and "
"allows us of Cairo's common drawing API, with Pango-driven text rendering. "
"In the implementation of this common API, platform-specific backends and "
"printer-specific drivers are used."
msgstr ""

#: C/gtkmm-tutorial-in.xml:4992(title)
msgid "PrintOperation"
msgstr "PrintOperation"

#: C/gtkmm-tutorial-in.xml:4994(para)
msgid ""
"The primary object is <classname>Gtk::PrintOperation</classname>, allocated "
"for each print operation. To handle page drawing connect to its signals, or "
"inherit from it and override the default virtual signal handlers. "
"<classname>PrintOperation</classname> automatically handles all the settings "
"affecting the print loop."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5011(para)
msgid ""
"<literal>begin_print</literal>: You must handle this signal, because this is "
"where you create and set up a <classname>Pango::Layout</classname> using the "
"provided <classname>Gtk::PrintContext</classname>, and break up your "
"printing output into pages."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5021(para)
msgid ""
"<literal>paginate</literal>: Pagination is potentially slow so if you need "
"to monitor it you can call the <methodname>PrintOperation::set_show_progress"
"()</methodname> method and handle this signal."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5035(para)
msgid ""
"<literal>request_page_setup</literal>: Provides a <classname>PrintContext</"
"classname>, page number and <classname>Gtk::PageSetup</classname>. Handle "
"this signal if you need to modify page setup on a per-page basis."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5044(para)
msgid ""
"<literal>draw_page</literal>: You must handle this signal, which provides a "
"<classname>PrintContext</classname> and a page number. The "
"<classname>PrintContext</classname> should be used to create a "
"<classname>Cairo::Context</classname> into which the provided page should be "
"drawn. To render text, iterate over the <classname>Pango::Layout</classname> "
"you created in the <literal>begin_print</literal> handler."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5030(para)
msgid ""
"For each page that needs to be rendered, the following signals are emitted: "
"<placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5059(para)
msgid ""
"<literal>end_print</literal>: A handler for it is a safe place to free any "
"resources related to a <classname>PrintOperation</classname>. If you have "
"your custom class that inherits from <classname>PrintOperation</classname>, "
"it is naturally simpler to do it in the destructor."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5069(para)
msgid ""
"<literal>done</literal>: This signal is emitted when printing is finished, "
"meaning when the print data is spooled. Note that the provided <literal>Gtk::"
"PrintOperationResult</literal> may indicate that an error occurred. In any "
"case you probably want to notify the user about the final status."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5079(para)
msgid ""
"<literal>status_changed</literal>: Emitted whenever a print job's status "
"changes, until it is finished. Call the <methodname>PrintOperation::"
"set_track_print_status()</methodname> method to monitor the job status after "
"spooling. To see the status, use <methodname>get_status()</methodname> or "
"<methodname>get_status_string()</methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5005(para)
msgid ""
"The <methodname>PrintOperation::run()</methodname> method starts the print "
"loop, during which various signals are emitted: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5101(title)
msgid "Page setup"
msgstr "Configuración de página"

#: C/gtkmm-tutorial-in.xml:5103(para)
msgid ""
"The <classname>PrintOperation</classname> class has a method called "
"<methodname>set_default_page_setup()</methodname> which selects the default "
"paper size, orientation and margins. To show a page setup dialog from your "
"application, use the <methodname>Gtk::run_page_setup_dialog()</methodname> "
"method, which returns a <classname>Gtk::PageSetup</classname> object with "
"the chosen settings. Use this object to update a <classname>PrintOperation</"
"classname> and to access the selected <classname>Gtk::PaperSize</classname>, "
"<literal>Gtk::PageOrientation</literal> and printer-specific margins."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5113(para)
msgid ""
"You should save the chosen <classname>Gtk::PageSetup</classname> so you can "
"use it again if the page setup dialog is shown again."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5117(programlisting)
#, no-wrap
msgid ""
"\n"
"//Within a class that inherits from Gtk::Window and keeps m_refPageSetup and m_refSettings as members...\n"
"Glib::RefPtr&lt;Gtk::PageSetup&gt; new_page_setup = Gtk::run_page_setup_dialog(*this, m_refPageSetup, m_refSettings);\n"
"m_refPageSetup = new_page_setup;\n"
msgstr ""
"\n"
"//Within a class that inherits from Gtk::Window and keeps m_refPageSetup and m_refSettings as members...\n"
"Glib::RefPtr&lt;Gtk::PageSetup&gt; new_page_setup = Gtk::run_page_setup_dialog(*this, m_refPageSetup, m_refSettings);\n"
"m_refPageSetup = new_page_setup;\n"

#: C/gtkmm-tutorial-in.xml:5116(para) C/gtkmm-tutorial-in.xml:5181(para)
#: C/gtkmm-tutorial-in.xml:9479(para)
msgid "For instance, <placeholder-1/>"
msgstr "Por ejemplo, <placeholder-1/>"

#: C/gtkmm-tutorial-in.xml:5128(para)
msgid ""
"The Cairo coordinate system, in the <literal>draw_page</literal> handler, is "
"automatically rotated to the current page orientation. It is normally within "
"the printer margins, but you can change that via the "
"<methodname>PrintOperation::set_use_full_page()</methodname> method. The "
"default measurement unit is device pixels. To select other units, use the "
"<methodname>PrintOperation::set_unit()</methodname> method."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5140(title)
msgid "Rendering text"
msgstr "Renderizar texto"

#: C/gtkmm-tutorial-in.xml:5142(para)
msgid ""
"Text rendering is done using Pango. The <classname>Pango::Layout</classname> "
"object for printing should be created by calling the "
"<methodname>PrintContext::create_pango_layout()</methodname> method. The "
"<classname>PrintContext</classname> object also provides the page metrics, "
"via <methodname>get_width()</methodname> and <methodname>get_height()</"
"methodname>. The number of pages can be set with <methodname>PrintOperation::"
"set_n_pages()</methodname>. To actually render the Pango text in "
"<literal>on_draw_page</literal>, get a <classname>Cairo::Context</classname> "
"with <methodname>PrintContext::get_cairo_context()</methodname> and show the "
"<classname>Pango::LayoutLine</classname>s that appear within the requested "
"page number."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5157(para)
msgid ""
"See <link linkend=\"sec-printing-example-simple\">an example</link> of "
"exactly how this can be done."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5165(title)
msgid "Asynchronous operations"
msgstr "Operaciones asíncronas"

#: C/gtkmm-tutorial-in.xml:5167(para)
msgid ""
"By default, <methodname>PrintOperation::run()</methodname> returns when a "
"print operation is completed. If you need to run a non-blocking print "
"operation, call <methodname>PrintOperation::set_allow_async()</methodname>. "
"Note that <methodname>set_allow_async()</methodname> is not supported on all "
"platforms, however the <literal>done</literal> signal will still be emitted."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5174(para)
msgid ""
"<methodname>run()</methodname> may return "
"<literal>PRINT_OPERATION_RESULT_IN_PROGRESS</literal>. To track status and "
"handle the result or error you need to implement signal handlers for the "
"<literal>done</literal> and <literal>status_changed</literal> signals:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5182(programlisting)
#, no-wrap
msgid ""
"\n"
"// in class ExampleWindow's method...\n"
"Glib::RefPtr&lt;PrintOperation&gt; op = PrintOperation::create();\n"
"// ...set up op...\n"
"op-&gt;signal_done().connect(sigc::bind(sigc::mem_fun(*this, &amp;ExampleWindow::on_printoperation_done), op));\n"
"// run the op\n"
msgstr ""
"\n"
"// in class ExampleWindow's method...\n"
"Glib::RefPtr&lt;PrintOperation&gt; op = PrintOperation::create();\n"
"// ...set up op...\n"
"op-&gt;signal_done().connect(sigc::bind(sigc::mem_fun(*this, &amp;ExampleWindow::on_printoperation_done), op));\n"
"// run the op\n"

#: C/gtkmm-tutorial-in.xml:5192(programlisting)
#, no-wrap
msgid ""
"\n"
"void ExampleWindow::on_printoperation_done(Gtk::PrintOperationResult result, const Glib::RefPtr&lt;PrintOperation&gt;&amp; op)\n"
"{\n"
"  if (result == Gtk::PRINT_OPERATION_RESULT_ERROR)\n"
"    //notify user\n"
"  else if (result == Gtk::PRINT_OPERATION_RESULT_APPLY)\n"
"    //Update PrintSettings with the ones used in this PrintOperation\n"
"\n"
"  if (! op-&gt;is_finished())\n"
"    op-&gt;signal_status_changed().connect(sigc::bind(sigc::mem_fun(*this, &amp;ExampleWindow::on_printoperation_status_changed), op));\n"
"}\n"
msgstr ""
"\n"
"void ExampleWindow::on_printoperation_done(Gtk::PrintOperationResult result, const Glib::RefPtr&lt;PrintOperation&gt;&amp; op)\n"
"{\n"
"  if (result == Gtk::PRINT_OPERATION_RESULT_ERROR)\n"
"    //notify user\n"
"  else if (result == Gtk::PRINT_OPERATION_RESULT_APPLY)\n"
"    //Update PrintSettings with the ones used in this PrintOperation\n"
"\n"
"  if (! op-&gt;is_finished())\n"
"    op-&gt;signal_status_changed().connect(sigc::bind(sigc::mem_fun(*this, &amp;ExampleWindow::on_printoperation_status_changed), op));\n"
"}\n"

#: C/gtkmm-tutorial-in.xml:5191(para)
msgid ""
"Second, check for an error and connect to the <literal>status_changed</"
"literal> signal. For instance: <placeholder-1/>"
msgstr ""
"Segundo, comprobar si hay errores y conectar la señal "
"<literal>status_changed</literal>. Por ejemplo: <placeholder-1/>"

#: C/gtkmm-tutorial-in.xml:5207(programlisting)
#, no-wrap
msgid ""
"\n"
"void ExampleWindow::on_printoperation_status_changed(const Glib::RefPtr&lt;PrintFormOperation&gt;&amp; op)\n"
"{\n"
"  if (op-&gt;is_finished())\n"
"    //the print job is finished\n"
"  else\n"
"    //get the status with get_status() or get_status_string()\n"
"\n"
"  //update UI\n"
"}\n"
msgstr ""
"\n"
"void ExampleWindow::on_printoperation_status_changed(const Glib::RefPtr&lt;PrintFormOperation&gt;&amp; op)\n"
"{\n"
"  if (op-&gt;is_finished())\n"
"    //the print job is finished\n"
"  else\n"
"    //get the status with get_status() or get_status_string()\n"
"\n"
"  //update UI\n"
"}\n"

#: C/gtkmm-tutorial-in.xml:5206(para)
msgid "Finally, check the status. For instance, <placeholder-1/>"
msgstr "Por último, comprobar el estado. Por ejemplo, <placeholder-1/>"

#: C/gtkmm-tutorial-in.xml:5223(title)
msgid "Export to PDF"
msgstr "Exportar a PDF"

#: C/gtkmm-tutorial-in.xml:5227(programlisting)
#, no-wrap
msgid ""
"\n"
"Glib::RefPtr&lt;Gtk::PrintOperation&gt; op = Gtk::PrintOperation::create();\n"
"// ...set up op...\n"
"op-&gt;set_export_filename(\"test.pdf\");\n"
"Gtk::PrintOperationResult res = op-&gt;run(Gtk::PRINT_OPERATION_ACTION_EXPORT);\n"
msgstr ""
"\n"
"Glib::RefPtr&lt;Gtk::PrintOperation&gt; op = Gtk::PrintOperation::create();\n"
"// ...set up op...\n"
"op-&gt;set_export_filename(\"test.pdf\");\n"
"Gtk::PrintOperationResult res = op-&gt;run(Gtk::PRINT_OPERATION_ACTION_EXPORT);\n"

#: C/gtkmm-tutorial-in.xml:5224(para)
msgid ""
"The 'Print to file' option is available in the print dialog, without the "
"need for extra implementation. However, it is sometimes useful to generate a "
"pdf file directly from code. For instance, <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5239(title)
msgid "Extending the print dialog"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5246(para)
msgid ""
"Set the title of the tab via <methodname>PrintOperation::set_custom_tab_label"
"()</methodname>, create a new widget and return it from the "
"<literal>create_custom_widget</literal> signal handler. You'll probably want "
"this to be a container widget, packed with some others."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5256(para)
msgid ""
"Get the data from the widgets in the <literal>custom_widget_apply</literal> "
"signal handler."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5241(para)
msgid "You may add a custom tab to the print dialog: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5271(programlisting)
#, no-wrap
msgid ""
"\n"
"Gtk::Widget* CustomPrintOperation::on_create_custom_widget()\n"
"{\n"
"  set_custom_tab_label(\"My custom tab\");\n"
"\n"
"  Gtk::Box* hbox = new Gtk::Box(Gtk::ORIENTATION_HORIZONTAL, 8);\n"
"  hbox-&gt;set_border_width(6);\n"
"\n"
"  Gtk::Label* label = Gtk::manage(new Gtk::Label(\"Enter some text: \"));\n"
"  hbox-&gt;pack_start(*label, false, false);\n"
"  label-&gt;show();\n"
"\n"
"  hbox-&gt;pack_start(m_Entry, false, false);\n"
"  m_Entry.show();\n"
"\n"
"  return hbox;\n"
"}\n"
"\n"
"void CustomPrintOperation::on_custom_widget_apply(Gtk::Widget* /* widget */)\n"
"{\n"
"  Glib::ustring user_input = m_Entry.get_text();\n"
"  //...\n"
"}\n"
msgstr ""
"\n"
"Gtk::Widget* CustomPrintOperation::on_create_custom_widget()\n"
"{\n"
"  set_custom_tab_label(\"My custom tab\");\n"
"\n"
"  Gtk::Box* hbox = new Gtk::Box(Gtk::ORIENTATION_HORIZONTAL, 8);\n"
"  hbox-&gt;set_border_width(6);\n"
"\n"
"  Gtk::Label* label = Gtk::manage(new Gtk::Label(\"Enter some text: \"));\n"
"  hbox-&gt;pack_start(*label, false, false);\n"
"  label-&gt;show();\n"
"\n"
"  hbox-&gt;pack_start(m_Entry, false, false);\n"
"  m_Entry.show();\n"
"\n"
"  return hbox;\n"
"}\n"
"\n"
"void CustomPrintOperation::on_custom_widget_apply(Gtk::Widget* /* widget */)\n"
"{\n"
"  Glib::ustring user_input = m_Entry.get_text();\n"
"  //...\n"
"}\n"

#: C/gtkmm-tutorial-in.xml:5264(para)
msgid ""
"Although the <literal>custom_widget_apply</literal> signal provides the "
"widget you previously created, to simplify things you can keep the widgets "
"you expect to contain some user input as class members. For example, let's "
"say you have a <classname>Gtk::Entry</classname> called <literal>m_Entry</"
"literal> as a member of your <classname>CustomPrintOperation</classname> "
"class: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5298(para)
msgid "The example in examples/book/printing/advanced demonstrates this."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5305(title)
msgid "Preview"
msgstr "Vista previa"

#: C/gtkmm-tutorial-in.xml:5311(programlisting)
#, no-wrap
msgid ""
"\n"
"// in a class that inherits from Gtk::Window...\n"
"Glib::RefPtr&lt;PrintOperation&gt; op = PrintOperation::create();\n"
"// ...set up op...\n"
"op-&gt;run(Gtk::PRINT_OPERATION_ACTION_PREVIEW, *this);\n"
msgstr ""
"\n"
"// in a class that inherits from Gtk::Window...\n"
"Glib::RefPtr&lt;PrintOperation&gt; op = PrintOperation::create();\n"
"// ...set up op...\n"
"op-&gt;run(Gtk::PRINT_OPERATION_ACTION_PREVIEW, *this);\n"

#: C/gtkmm-tutorial-in.xml:5307(para)
msgid ""
"The native GTK+ print dialog has a preview button, but you may also start a "
"preview directly from an application: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5319(para)
msgid ""
"On Unix, the default preview handler uses an external viewer program. On "
"Windows, the native preview dialog will be shown. If necessary you may "
"override this behaviour and provide a custom preview dialog. See the example "
"located in /examples/book/printing/advanced."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5334(para)
msgid ""
"The following example demonstrates how to print some input from a user "
"interface. It shows how to implement <literal>on_begin_print</literal> and "
"<literal>on_draw_page</literal>, as well as how to track print status and "
"update the print settings."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5342(title)
msgid "Printing - Simple"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5357(title)
msgid "Recently Used Documents"
msgstr "Documentos usados recientemente"

#: C/gtkmm-tutorial-in.xml:5359(para)
msgid ""
"<application>gtkmm</application> provides an easy way to manage recently "
"used documents. The classes involved in implementing this functionality are "
"<classname>RecentManager</classname>, <classname>RecentChooserDialog</"
"classname>, <classname>RecentChooserMenu</classname>, "
"<classname>RecentChooserWidget</classname>, <classname>RecentAction</"
"classname>, and <classname>RecentFilter</classname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5369(para)
msgid ""
"Each item in the list of recently used files is identified by its URI, and "
"can have associated metadata. The metadata can be used to specify how the "
"file should be displayed, a description of the file, its mime type, which "
"application registered it, whether it's private to the registering "
"application, and several other things."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5377(title)
msgid "RecentManager"
msgstr "RecentManager"

#: C/gtkmm-tutorial-in.xml:5378(para)
msgid ""
"<classname>RecentManager</classname> acts as a database of recently used "
"files. You use this class to register new files, remove files from the list, "
"or look up recently used files. There is one list of recently used files per "
"user."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5384(para)
msgid ""
"You can create a new <classname>RecentManager</classname>, but you'll most "
"likely just want to use the default one. You can get a reference to the "
"default <classname>RecentManager</classname> with <methodname>get_default()</"
"methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5390(para)
msgid ""
"<classname>RecentManager</classname> is the model of a model-view pattern, "
"where the view is a class that implements the <classname>RecentChooser</"
"classname> interface."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5396(title)
msgid "Adding Items to the List of Recent Files"
msgstr "Agregar elementos a la lista de archivos recientes"

#: C/gtkmm-tutorial-in.xml:5397(para)
msgid ""
"To add a new file to the list of recent documents, in the simplest case, you "
"only need to provide the URI. For example:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5401(programlisting)
#, no-wrap
msgid ""
"Glib::RefPtr&lt;Gtk::RecentManager&gt; recent_manager = Gtk::RecentManager::get_default();\n"
"recent_manager-&gt;add_item(uri);"
msgstr ""
"Glib::RefPtr&lt;Gtk::RecentManager&gt; recent_manager = Gtk::RecentManager::get_default();\n"
"recent_manager-&gt;add_item(uri);"

#: C/gtkmm-tutorial-in.xml:5403(para)
msgid ""
"If you want to register a file with metadata, you can pass a "
"<classname>RecentManager::Data</classname> parameter to <methodname>add_item"
"()</methodname>. The metadata that can be set on a particular file item is "
"as follows:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5411(para)
msgid ""
"<varname>app_exec</varname>: The command line to be used to launch this "
"resource. This string may contain the \"f\" and \"u\" escape characters "
"which will be expanded to the resource file path and URI respectively"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5417(para)
msgid ""
"<varname>app_name</varname>: The name of the application that registered the "
"resource"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5421(para)
msgid ""
"<varname>description</varname>: A short description of the resource as a "
"UTF-8 encoded string"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5425(para)
msgid ""
"<varname>display_name</varname>: The name of the resource to be used for "
"display as a UTF-8 encoded string"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5429(para)
msgid ""
"<varname>groups</varname>: A list of groups associated with this item. "
"Groups are essentially arbitrary strings associated with a particular "
"resource. They can be thought of as 'categories' (such as \"email\", "
"\"graphics\", etc) or tags for the resource."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5435(para)
msgid ""
"<varname>is_private</varname>: Whether this resource should be visible only "
"to applications that have registered it or not"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5439(para)
msgid "<varname>mime_type</varname>: The MIME type of the resource"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5442(para)
msgid ""
"In addition to adding items to the list, you can also look up items from the "
"list and modify or remove items."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5448(title)
msgid "Looking up Items in the List of Recent Files"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5449(para)
msgid ""
"To look up recently used files, <classname>RecentManager</classname> "
"provides several functions. To look up a specific item by its URI, you can "
"use the <methodname>lookup_item()</methodname> function, which will return a "
"<classname>RecentInfo</classname> class. If the specified URI did not exist "
"in the list of recent files, <methodname>lookup_item()</methodname> throws a "
"<classname>RecentManagerError</classname> exception. For example:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5458(programlisting)
#, no-wrap
msgid ""
"Glib::RefPtr&lt;Gtk::RecentInfo&gt; info;\n"
"try\n"
"{\n"
"  info = recent_manager-&gt;lookup_item(uri);\n"
"}\n"
"catch(const Gtk::RecentManagerError&amp; ex)\n"
"{\n"
"  std::cerr &lt;&lt; \"RecentManagerError: \" &lt;&lt; ex.what() &lt;&lt; std::endl;\n"
"}\n"
"if (info)\n"
"{\n"
"  // item was found\n"
"}"
msgstr ""
"Glib::RefPtr&lt;Gtk::RecentInfo&gt; info;\n"
"try\n"
"{\n"
"  info = recent_manager-&gt;lookup_item(uri);\n"
"}\n"
"catch(const Gtk::RecentManagerError&amp; ex)\n"
"{\n"
"  std::cerr &lt;&lt; \"RecentManagerError: \" &lt;&lt; ex.what() &lt;&lt; std::endl;\n"
"}\n"
"if (info)\n"
"{\n"
"  // item was found\n"
"}"

#: C/gtkmm-tutorial-in.xml:5471(para)
msgid ""
"A <classname>RecentInfo</classname> object is essentially an object "
"containing all of the metadata about a single recently-used file. You can "
"use this object to look up any of the properties listed <link linkend=\"list-"
"file-metadata\">above</link>."
msgstr ""
"Un objeto <classname>RecentInfo</classname> es esencialmente un objeto que "
"contiene todos los metadatos de un solo archivo utilizado recientemente. "
"Puede utilizar este objeto para buscar cualquiera de las propiedades "
"enumeradas <link linkend=\"list-file-metadata\">anteriormente</link>."

#: C/gtkmm-tutorial-in.xml:5477(para)
msgid ""
"If you don't want to look for a specific URI, but instead want to get a list "
"of all recently used items, <classname>RecentManager</classname> provides "
"the <methodname>get_items()</methodname> function. The return value of this "
"function is a <classname>std::vector</classname> of all recently used files. "
"The following code demonstrates how you might get a list of recently used "
"files:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5485(programlisting)
#, no-wrap
msgid "std::vector&lt; Glib::RefPtr&lt;Gtk::RecentInfo&gt; &gt; info_list = recent_manager-&gt;get_items();"
msgstr "std::vector&lt; Glib::RefPtr&lt;Gtk::RecentInfo&gt; &gt; info_list = recent_manager-&gt;get_items();"

#: C/gtkmm-tutorial-in.xml:5486(para)
msgid ""
"The maximum age of items in the recently used files list can be set with "
"<methodname>Gtk::Settings::property_gtk_recent_files_max_age()</methodname>. "
"Default value: 30 days."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5493(title)
msgid "Modifying the List of Recent Files"
msgstr "Modificar la lista de archivos recientes"

#: C/gtkmm-tutorial-in.xml:5494(para)
msgid ""
"There may be times when you need to modify the list of recent files. For "
"instance, if a file is moved or renamed, you may need to update the file's "
"location in the recent files list so that it doesn't point to an incorrect "
"location. You can update an item's location by using <methodname>move_item()"
"</methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5501(para)
msgid ""
"In addition to changing a file's URI, you can also remove items from the "
"list, either one at a time or by clearing them all at once. The former is "
"accomplished with <methodname>remove_item()</methodname>, the latter with "
"<methodname>purge_items()</methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5508(para)
msgid ""
"The functions <methodname>move_item()</methodname>, <methodname>remove_item()"
"</methodname> and <methodname>purge_items()</methodname> have no effect on "
"the actual files that are referred to by the URIs, they only modify the list "
"of recent files."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5520(title)
msgid "RecentChooser"
msgstr "RecentChooser"

#: C/gtkmm-tutorial-in.xml:5521(para)
msgid ""
"<classname>RecentChooser</classname> is an interface that can be implemented "
"by widgets displaying the list of recently used files. <application>gtkmm</"
"application> provides four built-in implementations for choosing recent "
"files: <classname>RecentChooserWidget</classname>, "
"<classname>RecentChooserDialog</classname>, <classname>RecentChooserMenu</"
"classname>, and <classname>RecentAction</classname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5530(para)
msgid ""
"<classname>RecentChooserWidget</classname> is a simple widget for displaying "
"a list of recently used files. <classname>RecentChooserWidget</classname> is "
"the basic building block for <classname>RecentChooserDialog</classname>, but "
"you can embed it into your user interface if you want to."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5537(para)
msgid ""
"<classname>RecentChooserMenu</classname> and <classname>RecentAction</"
"classname> allow you to list recently used files as a menu."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5543(title)
msgid "Simple RecentChooserDialog example"
msgstr "Ejemplo de RecentChooserDialog"

#: C/gtkmm-tutorial-in.xml:5544(para)
msgid ""
"Shown below is a simple example of how to use the "
"<classname>RecentChooserDialog</classname> and the <classname>RecentAction</"
"classname> classes in a program. This simple program has a menubar with a "
"<guimenuitem>Recent Files Dialog</guimenuitem> menu item. When you select "
"this menu item, a dialog pops up showing the list of recently used files."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5554(para)
msgid ""
"If this is the first time you're using a program that uses the Recent Files "
"framework, the dialog may be empty at first. Otherwise it should show the "
"list of recently used documents registered by other applications."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5561(para)
msgid ""
"After selecting the <guimenuitem>Recent Files Dialog</guimenuitem> menu "
"item, you should see something similar to the following window."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5570(para)
msgid ""
"The constructor for <classname>ExampleWindow</classname> creates the menu "
"using <classname>UIManager</classname> (see <xref linkend=\"chapter-menus-"
"and-toolbars\"/> for more information). It then adds the menu and the "
"toolbar to the window."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5578(title)
msgid "Filtering Recent Files"
msgstr "Filtrar los archivos recientes"

#: C/gtkmm-tutorial-in.xml:5579(para)
msgid ""
"For any of the <classname>RecentChooser</classname> classes, if you don't "
"wish to display all of the items in the list of recent files, you can filter "
"the list to show only those that you want. You can filter the list with the "
"help of the <classname>RecentFilter</classname> class. This class allows you "
"to filter recent files by their name (<methodname>add_pattern()</"
"methodname>), their mime type (<methodname>add_mime_type()</methodname>), "
"the application that registered them (<methodname>add_application()</"
"methodname>), or by a custom filter function (<methodname>add_custom()</"
"methodname>). It also provides the ability to filter based on how long ago "
"the file was modified and which groups it belongs to."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5592(para)
msgid ""
"After you've created and set up the filter to match only the items you want, "
"you can apply a filter to a chooser widget with the "
"<methodname>RecentChooser::add_filter()</methodname> function."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5602(title)
msgid "Plugs and Sockets"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5604(title) C/gtkmm-tutorial-in.xml:5761(title)
msgid "Overview"
msgstr "Vista general"

#: C/gtkmm-tutorial-in.xml:5605(para)
msgid ""
"From time to time, it may be useful to be able to embed a widget from "
"another application within your application. <application>gtkmm</"
"application> allows you to do this with the <classname>Gtk::Socket</"
"classname> and <classname>Gtk::Plug</classname> classes. It is not "
"anticipated that very many applications will need this functionality, but in "
"the rare case that you need to display a widget that is running in a "
"completely different process, these classes can be very helpful."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5614(para)
msgid ""
"The communication between a <classname>Socket</classname> and a "
"<classname>Plug</classname> follows the XEmbed protocol. This protocol has "
"also been implemented in other toolkits (e.g. Qt), which allows the same "
"level of integration when embedding a Qt widget in GTK+ or vice versa."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5620(para)
msgid ""
"The way that <classname>Sockets</classname> and <classname>Plugs</classname> "
"work together is through their window ids. Both a <classname>Socket</"
"classname> and a <classname>Plug</classname> have IDs that can be retrieved "
"with their <methodname>get_id()</methodname> member functions. The use of "
"these IDs will be explained below in <xref linkend=\"sec-connecting-plugs-"
"sockets\"/>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5629(title)
msgid "Sockets"
msgstr "Sockets"

#: C/gtkmm-tutorial-in.xml:5630(para)
msgid ""
"A <classname>Socket</classname> is a special kind of container widget that "
"provides the ability to embed widgets from one process into another process "
"in a way that is transparent to the user."
msgstr ""
"Un <classname>Socket</classname> es un tipo especial de widget contenedor "
"que ofrece la posibilidad de incorporar widgets de un proceso en otro "
"proceso de manera que sea transparente para el usuario."

#: C/gtkmm-tutorial-in.xml:5637(title)
msgid "Plugs"
msgstr "Plugs"

#: C/gtkmm-tutorial-in.xml:5638(para)
msgid ""
"A <classname>Plug</classname> is a special kind of Window that can be "
"plugged into a <classname>Socket</classname>. Besides the normal properties "
"and methods of <classname>Gtk::Window</classname>, a <classname>Plug</"
"classname> provides a constructor that takes the ID of a <classname>Socket</"
"classname>, which will automatically embed the <classname>Plug</classname> "
"into the <classname>Socket</classname> that matches that ID."
msgstr ""
"Un <classname>Plug</classname> es un tipo especial de ventana que se puede "
"conectar a un <classname>Socket</classname>. Además de las propiedades y los "
"métodos normales de <classname>Gtk::Window</classname>, un <classname>Plug</"
"classname> proporciona un constructor que toma el ID de un "
"<classname>Socket</classname>, lo que automáticamente incrusta el "
"<classname>Plug</classname> en el <classname>Socket</classname> que coincide "
"con el ID."

#: C/gtkmm-tutorial-in.xml:5647(para)
msgid ""
"Since a <classname>Plug</classname> is just a special type of "
"<classname>Gtk::Window</classname> class, you can add containers or widgets "
"to it like you would to any other window."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5654(title)
msgid "Connecting Plugs and Sockets"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5655(para)
msgid ""
"After a <classname>Socket</classname> or <classname>Plug</classname> object "
"is realized, you can obtain its ID with its <methodname>get_id()</"
"methodname> function. This ID can then be shared with other processes so "
"that other processes know how to connect to eachother."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5666(para)
msgid ""
"Create a <classname>Socket</classname> object in one process and pass the ID "
"of that <classname>Socket</classname> to another process so that it can "
"create a <classname>Plug</classname> object by specifying the given "
"<classname>Socket</classname> ID in its constructor. There is no way to "
"assign a <classname>Plug</classname> to a particular <classname>Socket</"
"classname> after creation, so you must pass the <classname>Socket</"
"classname> ID to the <classname>Plug</classname>'s constructor."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5679(para)
msgid ""
"Create a <classname>Plug</classname> independantly from any particular "
"<classname>Socket</classname> and pass the ID of the <classname>Plug</"
"classname> to other processes that need to use it. The ID of the "
"<classname>Plug</classname> can be associated with a particular "
"<classname>Socket</classname> object using the <methodname>Socket::add_id()</"
"methodname> function. This is the approach used in the example below."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5662(para)
msgid "There are two basic strategies that can be used: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5694(title)
msgid "Plugs and Sockets Example"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5695(para)
msgid ""
"The following is a simple example of using sockets and plugs. The method of "
"communication between processes is deliberately kept very simple: The "
"<classname>Plug</classname> writes its ID out to a text file named "
"<filename>plug.id</filename> and the process with the socket reads the ID "
"from this files. In a real program, you may want to use a more sophisticated "
"method of inter-process communication."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5704(para)
msgid ""
"This example creates two executable programs: <filename>socket</filename> "
"and <filename>plug</filename>. The idea is that <filename>socket</filename> "
"has an application window that will embed a widget from the <filename>plug</"
"filename> program. The way this example is designed, <filename>plug</"
"filename> must be running first before starting <filename>socket</filename>. "
"To see the example in action, execute the following commands in order from "
"within the example directory:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5713(para)
msgid ""
"Start the <filename>plug</filename> program and send it to the background "
"(or just use a different terminal)."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5717(screen)
#, no-wrap
msgid "$ ./plug &amp;"
msgstr "$ ./plug &amp;"

#: C/gtkmm-tutorial-in.xml:5718(para)
msgid "After which you should see something like the following:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5721(screen)
#, no-wrap
msgid "The window ID is: 69206019"
msgstr "El ID de la ventana es: 69206019"

#: C/gtkmm-tutorial-in.xml:5722(para)
msgid "Then start the <filename>socket</filename> program:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5723(screen)
#, no-wrap
msgid "$ ./socket"
msgstr "$ ./socket"

#: C/gtkmm-tutorial-in.xml:5724(para)
msgid ""
"After starting <filename>socket</filename>, you should see the following "
"output in the terminal:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5728(screen)
#, no-wrap
msgid ""
"I've been embedded.\n"
"A plug was added"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5730(para)
msgid ""
"The first line of output is from <filename>plug</filename>, after it has "
"been notified that it has been embedded inside of a <classname>Socket</"
"classname>. The second line was emitted by <filename>socket</filename> in "
"response to its <methodname>plug_added</methodname> signal. If everything "
"was done as described above, the <filename>socket</filename> window should "
"look roughly like the following:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5742(para)
msgid ""
"If for some reason the <classname>Socket</classname> couldn't attach the "
"<classname>Plug</classname>, the window would look something like this:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5753(title)
msgid "Keyboard Events"
msgstr "Eventos de teclado"

#: C/gtkmm-tutorial-in.xml:5754(para)
msgid ""
"X events differ in some ways from other signals. These differences are "
"described in the <link linkend=\"sec-xeventsignals\">X Event signals</link> "
"section in the appendix. Here we will use keyboard events to show how X "
"events can be used in a program."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5762(para)
msgid ""
"Whenever you press or release a key, an event is emitted. You can connect a "
"signal handler to handle such events."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5766(para)
msgid ""
"To receive the keyboard events, you must first call the <methodname>Gtk::"
"Widget::add_events()</methodname> function with a bit mask of the events "
"you're interested in. The event signal handler will receive an argument that "
"depends on the type of event. For keyboard events it's a <type>GdkEventKey*</"
"type>. As discribed in the <link linkend=\"sec-xeventsignals\">appendix</"
"link>, the event signal handler returns a <type>bool</type> value, to "
"indicate that the signal is fully handled (<literal>true</literal>) or allow "
"event propagation (<literal>false</literal>)."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5777(para)
msgid ""
"To determine which key was pressed or released, you read the value of "
"<varname>GdkEventKey::keyval</varname> and compare it with a constant in the "
"<filename>&lt;gdk/gdkkeysyms.h&gt;</filename> header file. The states of "
"modifier keys (shift, ctrl, etc.) are available as bit-flags in "
"<varname>GdkEventKey::state</varname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5786(programlisting)
#, no-wrap
msgid ""
"\n"
"bool on_key_press_or_release_event(GdkEventKey* event)\n"
"{\n"
"  if (event-&gt;type == GDK_KEY_PRESS &amp;&amp;\n"
"    event-&gt;keyval == GDK_KEY_1 &amp;&amp;\n"
"    (event-&gt;state &amp; (GDK_SHIFT_MASK | GDK_CONTROL_MASK | GDK_MOD1_MASK)) == GDK_MOD1_MASK)\n"
"  {\n"
"    handle_alt_1_press(); // GDK_MOD1_MASK is normally the Alt key\n"
"    return true;\n"
"  }\n"
"  return false;\n"
"}\n"
"\n"
"Gtk::Entry m_entry; // in a class definition\n"
"\n"
"// in the class constructor\n"
"m_entry.signal_key_press_event().connect( sigc::ptr_fun(&amp;on_key_press_or_release_event) );\n"
"m_entry.signal_key_release_event().connect( sigc::ptr_fun(&amp;on_key_press_or_release_event) );\n"
"m_entry.add_events(Gdk::KEY_PRESS_MASK | Gdk::KEY_RELEASE_MASK);\n"
msgstr ""
"\n"
"bool on_key_press_or_release_event(GdkEventKey* event)\n"
"{\n"
"  if (event-&gt;type == GDK_KEY_PRESS &amp;&amp;\n"
"    event-&gt;keyval == GDK_KEY_1 &amp;&amp;\n"
"    (event-&gt;state &amp; (GDK_SHIFT_MASK | GDK_CONTROL_MASK | GDK_MOD1_MASK)) == GDK_MOD1_MASK)\n"
"  {\n"
"    handle_alt_1_press(); // GDK_MOD1_MASK is normally the Alt key\n"
"    return true;\n"
"  }\n"
"  return false;\n"
"}\n"
"\n"
"Gtk::Entry m_entry; // in a class definition\n"
"\n"
"// in the class constructor\n"
"m_entry.signal_key_press_event().connect( sigc::ptr_fun(&amp;on_key_press_or_release_event) );\n"
"m_entry.signal_key_release_event().connect( sigc::ptr_fun(&amp;on_key_press_or_release_event) );\n"
"m_entry.add_events(Gdk::KEY_PRESS_MASK | Gdk::KEY_RELEASE_MASK);\n"

#: C/gtkmm-tutorial-in.xml:5784(para) C/gtkmm-tutorial-in.xml:7861(para)
msgid "Here's a simple example: <placeholder-1/>"
msgstr "Un ejemplo sencillo: <placeholder-1/>"

#: C/gtkmm-tutorial-in.xml:5810(para)
msgid ""
"In this example there are three keyboard shortcuts: <keycap>Alt</keycap>"
"+<keycap>1</keycap> selects the first radio button, <keycap>Alt</keycap>"
"+<keycap>2</keycap> selects the second one, and the <keycap>Esc</keycap> key "
"hides (closes) the window. The default event signal handler is overridden, "
"as described in the <link linkend=\"sec-overriding-default-signal-handlers"
"\">Overriding default signal handlers</link> section in the appendix."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5821(title)
msgid "Keyboard Events - Simple"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5832(title)
msgid "Event Propagation"
msgstr "Propagación de eventos"

#: C/gtkmm-tutorial-in.xml:5833(para)
msgid ""
"Event propagation means that, when an event is emitted on a particular "
"widget, it can be passed to its parent widget (and that widget can pass it "
"to its parent, and so on) and, if the parent has an event handler, that "
"handler will be called."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5839(para)
msgid ""
"Contrary to other events, keyboard events are first sent to the toplevel "
"window (<classname>Gtk::Window</classname>), where it will be checked for "
"any keyboard shortcuts that may be set (accelerator keys and mnemonics, used "
"for selecting menu items from the keyboard). After this (and assuming the "
"event wasn't handled), it is sent to the widget which has focus, and the "
"propagation begins from there."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5847(para)
msgid ""
"The event will propagate until it reaches the top-level widget, or until you "
"stop the propagation by returning <literal>true</literal> from an event "
"handler."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5852(para)
msgid ""
"Notice, that after canceling an event, no other function will be called "
"(even if it is from the same widget)."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5859(para)
#, fuzzy
#| msgid ""
#| "In this example there are three event handlers, one in the "
#| "<classname>Gtk::Entry</classname>, one in the <classname>Gtk::Grid</"
#| "classname> and one in the <classname>Gtk::Window</classname>."
msgid ""
"In this example there are three event handlers that are called after "
"<classname>Gtk::Window</classname>'s default event handler, one in the "
"<classname>Gtk::Entry</classname>, one in the <classname>Gtk::Grid</"
"classname> and one in the <classname>Gtk::Window</classname>."
msgstr ""
"En este ejemplo hay tres manejadores de eventos, uno en la <classname>Gtk::"
"Entry</classname>, uno en el <classname>Gtk::Grid</classname> y uno en la "
"<classname>Gtk::Window</classname>."

#: C/gtkmm-tutorial-in.xml:5865(para)
msgid ""
"In the <classname>Gtk::Window</classname>, we have also the default handler "
"overridden (<methodname>on_key_release_event()</methodname>), and another "
"handler being called before the default handler "
"(<methodname>windowKeyReleaseBefore()</methodname>)."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5871(para)
msgid ""
"The purpose of this example is to show the steps the event takes when it is "
"emitted."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5874(para)
msgid ""
"When you write in the entry, a key release event will be emitted, which will "
"go first to the toplevel window (<classname>Gtk::Window</classname>), since "
"we have one event handler set to be called before, that's what is called "
"first (<methodname>windowKeyReleaseBefore()</methodname>). Then the default "
"handler is called (which we have overridden), and after that the event is "
"sent to the widget that has focus, the <classname>Entry</classname> in our "
"example and, depending on whether we let it propagate, it can reach the "
"<classname>Grid</classname>'s and the <classname>Window</classname>'s event "
"handlers. If it propagates, the text you're writing will appear in the "
"<classname>Label</classname> above the <classname>Entry</classname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5889(title)
msgid "Keyboard Events - Event Propagation"
msgstr "Eventos de teclado: propagación de eventos"

#: C/gtkmm-tutorial-in.xml:5901(title)
msgid "Timeouts, I/O and Idle Functions"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5904(title)
msgid "Timeouts"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5906(para)
msgid ""
"You may be wondering how to make <application>gtkmm</application> do useful "
"work while it's idling along. Happily, you have several options. Using the "
"following methods you can create a timeout method that will be called every "
"few milliseconds."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5913(programlisting)
#, no-wrap
msgid ""
"\n"
"sigc::connection Glib::SignalTimeout::connect(const sigc::slot&lt;bool&gt;&amp; slot, unsigned int interval, int priority = Glib::PRIORITY_DEFAULT);\n"
msgstr ""
"\n"
"sigc::connection Glib::SignalTimeout::connect(const sigc::slot&lt;bool&gt;&amp; slot, unsigned int interval, int priority = Glib::PRIORITY_DEFAULT);\n"

#: C/gtkmm-tutorial-in.xml:5918(para)
msgid ""
"The first argument is a <classname>slot</classname> you wish to have called "
"when the timeout occurs. The second argument is the number of milliseconds "
"between calls to that method. You receive a <classname>sigc::connection</"
"classname> object that can be used to deactivate the connection using its "
"<methodname>disconnect()</methodname> method:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5928(programlisting)
#, no-wrap
msgid ""
"\n"
"my_connection.disconnect();\n"
msgstr ""
"\n"
"my_connection.disconnect();\n"

#: C/gtkmm-tutorial-in.xml:5940(programlisting)
#, no-wrap
msgid ""
"\n"
"bool MyCallback() { std::cout &lt;&lt; \"Hello World!\\n\" &lt;&lt; std::endl; return true; }\n"
msgstr ""
"\n"
"bool MyCallback() { std::cout &lt;&lt; \"Hello World!\\n\" &lt;&lt; std::endl; return true; }\n"

#: C/gtkmm-tutorial-in.xml:5933(para)
msgid ""
"Another way of destroying the connection is your signal handler. It has to "
"be of the type <classname>sigc::slot&lt;bool&gt;</classname>. As you see "
"from the definition your signal handler has to return a value of the type "
"<literal>bool</literal>. A definition of a sample method might look like "
"this: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5946(para)
msgid ""
"You can stop the timeout method by returning <literal>false</literal> from "
"your signal handler. Therefore, if you want your method to be called "
"repeatedly, it should return <literal>true</literal>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5952(para)
msgid "Here's an example of this technique:"
msgstr "Un ejemplo de esta técnica:"

#: C/gtkmm-tutorial-in.xml:5961(title)
msgid "Monitoring I/O"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5963(para)
msgid ""
"A nifty feature of Glib (one of the libraries underlying <application>gtkmm</"
"application>) is the ability to have it check for data on a file descriptor "
"for you. This is especially useful for networking applications. The "
"following method is used to do this:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5971(programlisting)
#, no-wrap
msgid ""
"\n"
"sigc::connection Glib::SignalInput::connect(const sigc::slot&lt;bool,Glib::IOCondition&gt;&amp; slot,\n"
"                                    int fd, Glib::IOCondition condition,\n"
"                                    int priority = Glib::PRIORITY_DEFAULT);\n"
msgstr ""
"\n"
"sigc::connection Glib::SignalInput::connect(const sigc::slot&lt;bool,Glib::IOCondition&gt;&amp; slot,\n"
"                                    int fd, Glib::IOCondition condition,\n"
"                                    int priority = Glib::PRIORITY_DEFAULT);\n"

#: C/gtkmm-tutorial-in.xml:5978(para)
msgid ""
"The first argument is a slot you wish to have called when then the specified "
"event (see argument 3) occurs on the file descriptor you specify using "
"argument two. Argument three may be one or more (using <literal>|</literal>) "
"of:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:5988(para)
msgid ""
"Glib::IO_IN - Call your method when there is data ready for reading on your "
"file descriptor."
msgstr ""

#: C/gtkmm-tutorial-in.xml:5996(para)
msgid ""
"Glib::IO_OUT - Call your method when the file descriptor is ready for "
"writing."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6004(para)
msgid ""
"Glib::IO_PRI - Call your method when the file descriptor has urgent data to "
"be read."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6011(para)
msgid ""
"Glib::IO_ERR - Call your method when an error has occurred on the file "
"descriptor."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6018(para)
msgid ""
"Glib::IO_HUP - Call your method when hung up (the connection has been broken "
"usually for pipes and sockets)."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6025(para)
msgid ""
"The return value is a <classname>sigc::connection</classname> that may be "
"used to stop monitoring this file descriptor using its <methodname>disconnect"
"()</methodname> method. The <parameter>slot</parameter> signal handler "
"should be declared as follows:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6032(programlisting)
#, no-wrap
msgid ""
"\n"
"bool input_callback(Glib::IOCondition condition);\n"
msgstr ""
"\n"
"bool input_callback(Glib::IOCondition condition);\n"

#: C/gtkmm-tutorial-in.xml:6037(para)
msgid ""
"where <parameter>condition</parameter> is as specified above. As usual the "
"slot is created with <function>sigc::mem_fun()</function> (for a member "
"method of an object.), or <function>sigc::ptr_fun()</function> (for a "
"function)."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6044(para)
msgid ""
"A little example follows. To use the example just execute it from a "
"terminal; it doesn't create a window. It will create a pipe named "
"<literal>testfifo</literal> in the current directory. Then start another "
"shell and execute <literal>echo \"Hello\" &gt; testfifo</literal>. The "
"example will print each line you enter until you execute <literal>echo \"Q\" "
"&gt; testfifo</literal>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6058(title)
msgid "Idle Functions"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6060(para)
msgid ""
"If you want to specify a method that gets called when nothing else is "
"happening, use the following:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6065(programlisting)
#, no-wrap
msgid ""
"\n"
"sigc::connection  Glib::SignalIdle::connect(const sigc::slot&lt;bool&gt;&amp; slot, int priority = Glib::PRIORITY_DEFAULT_IDLE);\n"
msgstr ""
"\n"
"sigc::connection  Glib::SignalIdle::connect(const sigc::slot&lt;bool&gt;&amp; slot, int priority = Glib::PRIORITY_DEFAULT_IDLE);\n"

#: C/gtkmm-tutorial-in.xml:6070(para)
msgid ""
"This causes <application>gtkmm</application> to call the specified method "
"whenever nothing else is happening. You can add a priority (lower numbers "
"are higher priorities). There are two ways to remove the signal handler: "
"calling <methodname>disconnect()</methodname> on the <classname>sigc::"
"connection</classname> object, or returning <literal>false</literal> in the "
"signal handler, which should be declared as follows:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6080(programlisting)
#, no-wrap
msgid ""
"\n"
"bool idleFunc();\n"
msgstr ""
"\n"
"bool idleFunc();\n"

#: C/gtkmm-tutorial-in.xml:6085(para)
msgid ""
"Since this is very similar to the methods above this explanation should be "
"sufficient to understand what's going on. However, here's a little example:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6092(para)
msgid ""
"This example points out the difference of idle and timeout methods a little. "
"If you need methods that are called periodically, and speed is not very "
"important, then you want timeout methods. If you want methods that are "
"called as often as possible (like calculating a fractal in background), then "
"use idle methods."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6100(para)
msgid ""
"Try executing the example and increasing the system load. The upper progress "
"bar will increase steadily; the lower one will slow down."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6110(title)
msgid "Memory management"
msgstr "Gestión de la memoria"

#: C/gtkmm-tutorial-in.xml:6116(title)
msgid "Normal C++ memory management"
msgstr "Gestión normal de la memoria en C++"

#: C/gtkmm-tutorial-in.xml:6118(para)
msgid ""
"<application>gtkmm</application> allows the programmer to control the "
"lifetime (that is, the construction and destruction) of any widget in the "
"same manner as any other C++ object. This flexibility allows you to use "
"<literal>new</literal> and <literal>delete</literal> to create and destroy "
"objects dynamically or to use regular class members (that are destroyed "
"automatically when the class is destroyed) or to use local instances (that "
"are destroyed when the instance goes out of scope). This flexibility is not "
"present in some C++ GUI toolkits, which restrict the programmer to only a "
"subset of C++'s memory management features."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6130(para)
msgid "Here are some examples of normal C++ memory management:"
msgstr "Algunos ejemplos de gestión normal de la memoria en C++:"

#: C/gtkmm-tutorial-in.xml:6133(title)
msgid "Class Scope widgets"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6135(para)
msgid ""
"If a programmer does not need dynamic memory allocation, automatic widgets "
"in class scope may be used. One advantage of automatic widgets in class "
"scope is that memory management is grouped in one place. The programmer does "
"not risk memory leaks from failing to <literal>delete</literal> a widget."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6142(para)
msgid ""
"The primary disadvantages of using class scope widgets are revealing the "
"class implementation rather than the class interface in the class header. "
"Class scope widgets also require Automatic widgets in class scope suffer the "
"same disadvantages as any other class scope automatic variable."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6150(programlisting)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtkmm/button.h&gt;\n"
"class Foo\n"
"{\n"
"private:\n"
"  Gtk::Button theButton;\n"
"  // will be destroyed when the Foo object is destroyed\n"
"};\n"
msgstr ""
"\n"
"#include &lt;gtkmm/button.h&gt;\n"
"class Foo\n"
"{\n"
"private:\n"
"  Gtk::Button theButton;\n"
"  // will be destroyed when the Foo object is destroyed\n"
"};\n"

#: C/gtkmm-tutorial-in.xml:6163(title)
msgid "Function scope widgets"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6171(programlisting)
#, no-wrap
msgid ""
"\n"
"{\n"
"  Gtk::Button aButton;\n"
"  aButton.show();\n"
"  ...\n"
"  kit.run();\n"
"}\n"
msgstr ""
"\n"
"{\n"
"  Gtk::Button aButton;\n"
"  aButton.show();\n"
"  ...\n"
"  kit.run();\n"
"}\n"

#: C/gtkmm-tutorial-in.xml:6165(para)
msgid ""
"If a programmer does not need a class scope widget, a function scope widget "
"may also be used. The advantages to function scope over class scope are the "
"increased data hiding and reduced dependencies. <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6183(title)
msgid "Dynamic allocation with new and delete"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6185(para)
msgid ""
"Although, in most cases, the programmer will prefer to allow containers to "
"automatically destroy their children using <function>manage()</function> "
"(see below), the programmer is not required to use <function>manage()</"
"function>. The traditional <literal>new</literal> and <literal>delete</"
"literal> operators may also be used."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6195(programlisting)
#, no-wrap
msgid ""
"\n"
"Gtk::Button* pButton = new Gtk::Button(\"Test\");\n"
"\n"
"// do something useful with pButton\n"
"\n"
"delete pButton;\n"
msgstr ""
"\n"
"Gtk::Button* pButton = new Gtk::Button(\"Test\");\n"
"\n"
"// do something useful with pButton\n"
"\n"
"delete pButton;\n"

#: C/gtkmm-tutorial-in.xml:6193(para)
msgid ""
"<placeholder-1/> Here, the programmer deletes pButton to prevent a memory "
"leak."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6210(title)
msgid "Managed Widgets"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6212(para)
msgid ""
"Alternatively, you can let a widget's container control when the widget is "
"destroyed. In most cases, you want a widget to last only as long as the "
"container it is in. To delegate the management of a widget's lifetime to its "
"container, first create it with <function>manage()</function> and pack it "
"into its container with <methodname>add()</methodname>. Now, the widget will "
"be destroyed whenever its container is destroyed."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6222(title)
msgid "Dynamic allocation with manage() and add()"
msgstr "Asignación dinamica mediante el uso de manage() y add()"

#: C/gtkmm-tutorial-in.xml:6224(para)
msgid ""
"<application>gtkmm</application> provides the <function>manage()</function> "
"function and <methodname>add()</methodname> methods to create and destroy "
"widgets. Every widget except a top-level window must be added or packed into "
"a container in order to be displayed. The <function>manage()</function> "
"function marks a packed widget so that when the widget is added to a "
"container, the container becomes responsible for deleting the widget."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6234(programlisting)
#, no-wrap
msgid ""
"\n"
"MyWidget::MyWidget()\n"
"{\n"
"  Gtk::Button* pButton = manage(new Gtk::Button(\"Test\"));\n"
"  add(*pButton); //add aButton to MyWidget\n"
"}\n"
msgstr ""
"\n"
"MyWidget::MyWidget()\n"
"{\n"
"  Gtk::Button* pButton = manage(new Gtk::Button(\"Test\"));\n"
"  add(*pButton); //add aButton to MyWidget\n"
"}\n"

#: C/gtkmm-tutorial-in.xml:6233(para)
msgid ""
"<placeholder-1/> Now, when objects of type <classname>MyWidget</classname> "
"are destroyed, the button will also be deleted. It is no longer necessary to "
"delete pButton to free the button's memory; its deletion has been delegated "
"to the <classname>MyWidget</classname> object."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6248(para)
msgid ""
"<application>gtkmm</application> also provides the <methodname>set_manage()</"
"methodname> method for all widgets. This can be used to generate the same "
"result as <function>manage()</function>, but is more tedious:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6254(para)
msgid "foo.add( (w=new Gtk::Label(\"Hello\"), w-&gt;set_manage(), &amp;w) );"
msgstr "foo.add( (w=new Gtk::Label(\"Hello\"), w-&gt;set_manage(), &amp;w) );"

#: C/gtkmm-tutorial-in.xml:6258(para)
msgid "is the same as"
msgstr "es lo mismo que"

#: C/gtkmm-tutorial-in.xml:6262(para)
msgid "foo.add( manage(new Gtk::Label(\"Hello\")) );"
msgstr "foo.add( manage(new Gtk::Label(\"Hello\")) );"

#: C/gtkmm-tutorial-in.xml:6266(para)
msgid ""
"Of course, a top level container will not be added to another container. The "
"programmer is responsible for destroying the top level container using one "
"of the traditional C++ techniques. For instance, your top-level Window might "
"just be an instance in your <function>main()</function> function.."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6278(title)
msgid "Shared resources"
msgstr "Recursos compartidos"

#: C/gtkmm-tutorial-in.xml:6280(para)
msgid ""
"Some objects, such as <classname>Gdk::Pixbuf</classname>s and "
"<classname>Pango::Font</classname>s, are obtained from a shared store. "
"Therefore you cannot instantiate your own instances. These classes typically "
"inherit from <classname>Glib::Object</classname>. Rather than requiring you "
"to reference and unreference these objects, <application>gtkmm</application> "
"uses the <classname>Glib::RefPtr&lt;&gt;</classname> smartpointer. Cairomm "
"has its own smartpointer, <classname>Cairo::RefPtr&lt;&gt;</classname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6293(programlisting)
#, no-wrap
msgid ""
"\n"
"Glib::RefPtr&lt;Gdk::Pixbuf&gt; pixbuf = Gdk::Pixbuf::create_from_file(filename);\n"
msgstr ""
"\n"
"Glib::RefPtr&lt;Gdk::Pixbuf&gt; pixbuf = Gdk::Pixbuf::create_from_file(filename);\n"

#: C/gtkmm-tutorial-in.xml:6290(para)
msgid ""
"Objects such as <classname>Gdk::Pixbuf</classname> can only be instantiated "
"with a <methodname>create()</methodname> function. For instance, "
"<placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6302(programlisting)
#, no-wrap
msgid ""
"\n"
"int width = 0;\n"
"if(pixbuf)\n"
"{\n"
"  width = pixbuf-&gt;get_width();\n"
"}\n"
msgstr ""
"\n"
"int width = 0;\n"
"if(pixbuf)\n"
"{\n"
"  width = pixbuf-&gt;get_width();\n"
"}\n"

#: C/gtkmm-tutorial-in.xml:6298(para)
msgid ""
"You have no way of getting a bare <classname>Gdk::Pixbuf</classname>. In the "
"example, <varname>pixbuf</varname> is a smart pointer, so you can do this, "
"much like a normal pointer: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6311(para)
msgid ""
"When <varname>pixbuf</varname> goes out of scope an <methodname>unref()</"
"methodname> will happen in the background and you don't need to worry about "
"it anymore. There's no <literal>new</literal> so there's no <literal>delete</"
"literal>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6319(programlisting)
#, no-wrap
msgid ""
"\n"
"Glib::RefPtr&lt;Gdk::Pixbuf&gt; pixbuf2 = pixbuf;\n"
msgstr ""
"\n"
"Glib::RefPtr&lt;Gdk::Pixbuf&gt; pixbuf2 = pixbuf;\n"

#: C/gtkmm-tutorial-in.xml:6317(para)
msgid ""
"If you copy a <classname>RefPtr</classname>, for instance <placeholder-1/> , "
"or if you pass it as a method argument or a return type, then "
"<classname>RefPtr</classname> will do any necessary referencing to ensure "
"that the instance will not be destroyed until the last <classname>RefPtr</"
"classname> has gone out of scope."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6327(para)
msgid ""
"See the <link linkend=\"chapter-refptr\">appendix</link> for detailed "
"information about RefPtr."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6332(para)
msgid "Bjarne Stroustrup, \"The C++ Programming Language\" - section 14.4.2"
msgstr "Bjarne Stroustrup, «The C++ Programming Language»: sección 14.4.2"

#: C/gtkmm-tutorial-in.xml:6335(para)
msgid "Nicolai M. Josuttis, \"The C++ Standard Library\" - section 4.2"
msgstr "Nicolai M. Josuttis, «The C++ Standard Library» - sección 4.2"

#: C/gtkmm-tutorial-in.xml:6328(para)
msgid ""
"If you wish to learn more about smartpointers, you might look in these "
"books: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6346(title)
msgid "Glade and Gtk::Builder"
msgstr "Glade y Gtk::Builder"

#: C/gtkmm-tutorial-in.xml:6347(para)
msgid ""
"Although you can use C++ code to instantiate and arrange widgets, this can "
"soon become tedious and repetitive. And it requires a recompilation to show "
"changes. The <application>Glade</application> application allows you to "
"layout widgets on screen and then save an XML description of the "
"arrangement. Your application can then use the <application>Gtk::Builder</"
"application> API to load that XML file at runtime and obtain a pointer to "
"specifically named widget instances."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6360(simpara)
msgid "Less C++ code is required."
msgstr "Se requiere menos código en C++"

#: C/gtkmm-tutorial-in.xml:6361(simpara)
msgid "UI changes can be seen more quickly, so UIs are able to improve."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6362(simpara)
msgid "Designers without programming skills can create and edit UIs."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6357(para)
msgid "This has the following advantages: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6366(para)
msgid ""
"You still need C++ code to deal with User Interface changes triggered by "
"user actions, but using <application>Gtk::Builder</application> for the "
"widget layout allows you to focus on implementing that functionality."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6373(title)
msgid "Loading the .glade file"
msgstr "Cargar el archivo .glade"

#: C/gtkmm-tutorial-in.xml:6378(programlisting)
#, no-wrap
msgid ""
"\n"
"Glib::RefPtr&lt;Gtk::Builder&gt; builder = Gtk::Builder::create_from_file(\"basic.glade\");\n"
msgstr ""
"\n"
"Glib::RefPtr&lt;Gtk::Builder&gt; builder = Gtk::Builder::create_from_file(\"basic.glade\");\n"

#: C/gtkmm-tutorial-in.xml:6374(para)
msgid ""
"<classname>Gtk::Builder</classname> must be used via a <classname>Glib::"
"RefPtr</classname>. Like all such classes, you need to use a "
"<methodname>create()</methodname> method to instantiate it. For instance, "
"<placeholder-1/> This will instantiate the windows defined in the .glade "
"file, though they will not be shown immediately unless you have specified "
"that via the <guilabel>Properties</guilabel> window in <application>Glade</"
"application>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6387(programlisting)
#, no-wrap
msgid ""
"\n"
"Glib::RefPtr&lt;Gtk::Builder&gt; builder = Gtk::Builder::create_from_file(\"basic.glade\", \"treeview_products\");\n"
msgstr ""
"\n"
"Glib::RefPtr&lt;Gtk::Builder&gt; builder = Gtk::Builder::create_from_file(\"basic.glade\", \"treeview_products\");\n"

#: C/gtkmm-tutorial-in.xml:6386(para)
msgid ""
"To instantiate just one window, or just one of the child widgets, you can "
"specify the name of a widget as the second parameter. For instance, "
"<placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6395(title)
msgid "Accessing widgets"
msgstr "Acceso a widgets"

#: C/gtkmm-tutorial-in.xml:6403(programlisting)
#, no-wrap
msgid ""
"\n"
"Gtk::Dialog* pDialog = 0;\n"
"builder-&gt;get_widget(\"DialogBasic\", pDialog);\n"
msgstr ""
"\n"
"Gtk::Dialog* pDialog = 0;\n"
"builder-&gt;get_widget(\"DialogBasic\", pDialog);\n"

#: C/gtkmm-tutorial-in.xml:6397(para)
msgid ""
"To access a widget, for instance to <methodname>show()</methodname> a "
"dialog, use the <methodname>get_widget()</methodname> method, providing the "
"widget's name. This name should be specified in the <application>Glade</"
"application> Properties window. If the widget could not be found, or is of "
"the wrong type, then the pointer will be set to 0. <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6409(para)
msgid ""
"<application>Gtk::Builder</application> checks for a null pointer, and "
"checks that the widget is of the expected type, and will show warnings on "
"the command line about these."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6415(para)
msgid ""
"Remember that you are not instantiating a widget with <methodname>get_widget"
"()</methodname>, you are just obtaining a pointer to one that already "
"exists. You will always receive a pointer to the same instance when you call "
"<methodname>get_widget()</methodname> on the same <classname>Gtk::Builder</"
"classname>, with the same widget name. The widgets are instantiated during "
"<methodname>Gtk::Builder::create_from_file()</methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6424(para)
msgid ""
"<methodname>get_widget()</methodname> returns child widgets that are "
"<function>manage()</function>ed (see the <link linkend=\"chapter-memory"
"\">Memory Management</link> chapter), so they will be deleted when their "
"parent container is deleted. So, if you get only a child widget from "
"<application>Gtk::Builder</application>, instead of a whole window, then you "
"must either put it in a <classname>Container</classname> or delete it. "
"<classname>Windows</classname> (such as <classname>Dialogs</classname>) "
"cannot be managed because they have no parent container, so you must delete "
"them at some point."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6438(para)
msgid ""
"This simple example shows how to load a <application>Glade</application> "
"file at runtime and access the widgets with <application>Gtk::Builder</"
"application>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6451(title)
msgid "Using derived widgets"
msgstr "Usar widgets derivados"

#: C/gtkmm-tutorial-in.xml:6452(para)
msgid ""
"You can use <application>Glade</application> to layout your own custom "
"widgets derived from <application>gtkmm</application> widget classes. This "
"keeps your code organized and encapsulated. Of course you won't see the "
"exact appearance and properties of your derived widget in "
"<application>Glade</application>, but you can specify its location and child "
"widgets and the properties of its <application>gtkmm</application> base "
"class."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6461(programlisting)
#, no-wrap
msgid ""
"\n"
"DerivedDialog* pDialog = 0;\n"
"builder-&gt;get_widget_derived(\"DialogBasic\", pDialog);\n"
msgstr ""
"\n"
"DerivedDialog* pDialog = 0;\n"
"builder-&gt;get_widget_derived(\"DialogBasic\", pDialog);\n"

#: C/gtkmm-tutorial-in.xml:6460(para)
msgid ""
"Use <methodname>Gtk::Builder::get_widget_derived()</methodname> like so: "
"<placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6467(para)
msgid ""
"Your derived class must have a constructor that takes a pointer to the "
"underlying C type, and the <classname>Gtk::Builder</classname> instance. All "
"relevant classes of <application>gtkmm</application> typedef their "
"underlying C type as <classname>BaseObjectType</classname> (<classname>Gtk::"
"Dialog</classname> typedefs <classname>BaseObjectType</classname> as "
"<type>GtkDialog</type>, for instance)."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6477(programlisting)
#, no-wrap
msgid ""
"\n"
"DerivedDialog::DerivedDialog(BaseObjectType* cobject, const Glib::RefPtr&lt;Gtk::Builder&gt;&amp; builder)\n"
": Gtk::Dialog(cobject)\n"
"{\n"
"}\n"
msgstr ""
"\n"
"DerivedDialog::DerivedDialog(BaseObjectType* cobject, const Glib::RefPtr&lt;Gtk::Builder&gt;&amp; builder)\n"
": Gtk::Dialog(cobject)\n"
"{\n"
"}\n"

#: C/gtkmm-tutorial-in.xml:6474(para)
msgid ""
"You must call the base class's constructor in the initialization list, "
"providing the C pointer. For instance, <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6489(programlisting)
#, no-wrap
msgid ""
"\n"
"DerivedDialog::DerivedDialog(BaseObjectType* cobject, const Glib::RefPtr&lt;Gtk::Builder&gt;&amp; builder)\n"
": Gtk::Dialog(cobject),\n"
"  m_builder(builder),\n"
"  m_pButton(0)\n"
"{\n"
"  //Get the Glade-instantiated Button, and connect a signal handler:\n"
"  m_builder-&gt;get_widget(\"quit_button\", m_pButton);\n"
"  if(m_pButton)\n"
"  {\n"
"    m_pButton-&gt;signal_clicked().connect( sigc::mem_fun(*this, &amp;DerivedDialog::on_button_quit) );\n"
"  }\n"
"}\n"
msgstr ""
"\n"
"DerivedDialog::DerivedDialog(BaseObjectType* cobject, const Glib::RefPtr&lt;Gtk::Builder&gt;&amp; builder)\n"
": Gtk::Dialog(cobject),\n"
"  m_builder(builder),\n"
"  m_pButton(0)\n"
"{\n"
"  //Get the Glade-instantiated Button, and connect a signal handler:\n"
"  m_builder-&gt;get_widget(\"quit_button\", m_pButton);\n"
"  if(m_pButton)\n"
"  {\n"
"    m_pButton-&gt;signal_clicked().connect( sigc::mem_fun(*this, &amp;DerivedDialog::on_button_quit) );\n"
"  }\n"
"}\n"

#: C/gtkmm-tutorial-in.xml:6485(para)
msgid ""
"You could then encapsulate the manipulation of the child widgets in the "
"constructor of the derived class, maybe using <methodname>get_widget()</"
"methodname> or <methodname>get_widget_derived()</methodname> again. For "
"instance, <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6507(para)
msgid ""
"This example shows how to load a <application>Glade</application> file at "
"runtime and access the widgets via a derived class."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6520(title)
msgid "Internationalization and Localization"
msgstr "Internacionalización y localización"

#: C/gtkmm-tutorial-in.xml:6522(para)
msgid ""
"<application>gtkmm</application> applications can easily support multiple "
"languages, including non-European languages such as Chinese and right-to-"
"left languages such as Arabic. An appropriately-written and translated "
"<application>gtkmm</application> application will use the appropriate "
"language at runtime based on the user's environment."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6528(para)
msgid ""
"You might not anticipate the need to support additional languages, but you "
"can never rule it out. And it's easier to develop the application properly "
"in the first place rather than retrofitting later."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6534(para)
msgid ""
"The process of writing source code that allows for translation is called "
"<literal>internationalization</literal>, often abbreviated to <literal>i18n</"
"literal>. The <literal>Localization</literal> process, sometimes abbreviated "
"as <literal>l10n</literal>, provides translated text for other languages, "
"based on that source code."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6542(para)
msgid ""
"The main activity in the internationalization process is finding strings "
"seen by users and marking them for translation. You do not need to do it all "
"at once - if you set up the necessary project infrastructure correctly then "
"your application will work normally regardless of how many strings you've "
"covered."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6550(para)
msgid ""
"String literals should be typed in the source code in English, but "
"surrounded by a macro. The <application>gettext</application> (or intltool) "
"utility can then extract the marked strings for tramslation, and substitute "
"the translated text at runtime."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6558(title)
msgid "Preparing your project"
msgstr "Preparar su proyecto"

#: C/gtkmm-tutorial-in.xml:6561(para)
msgid ""
"In the instructions below we will assume that you will not be using "
"<application>gettext</application> directly, but <application>intltool</"
"application>, which was written specifically for <literal>GNOME</literal>. "
"<application>intltool</application> uses <function>gettext()</function>, "
"which extracts strings from source code, but <application>intltool</"
"application> can also combine strings from other files, for example from "
"desktop menu details, and GUI resource files such as <application>Glade</"
"application> files, into standard <application>gettext</"
"application><filename>.pot/.po</filename> files."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6572(para)
msgid ""
"We also assume that you are using autotools (e.g. <application>automake</"
"application> and <application>autoconf</application>) to build your project, "
"and that you are using <ulink url=\"http://svn.gnome.org/viewcvs/gnome-"
"common/trunk/autogen.sh?view=markup\"><literal>./autogen.sh</literal> from "
"<application>gnome-common</application></ulink>, which, among other things, "
"takes care of some <application>intltool</application> initialization."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6585(para)
msgid ""
"Create a sub-directory named <literal>po</literal> in your project's root "
"directory. This directory will eventually contain all of your translations. "
"Within it, create a file named <literal>LINGUAS</literal> and a file named "
"<literal>POTFILES.in</literal>. It is common practice to also create a "
"<literal>ChangeLog</literal> file in the <literal>po</literal> directory so "
"that translators can keep track of translation changes."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6595(para)
msgid ""
"<literal>LINGUAS</literal> contains an alphabetically sorted list of codes "
"identifying the languages for which your program is translated (comment "
"lines starting with a <literal>#</literal> are ignored). Each language code "
"listed in the <literal>LINGUAS</literal> file must have a corresponding "
"<literal>.po</literal> file. So, if your program has German and Japanese "
"translations, your <literal>LINGUAS</literal> file would look like this:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6604(programlisting)
#, no-wrap
msgid ""
"# keep this file sorted alphabetically, one language code per line\n"
"de\n"
"ja"
msgstr ""
"# keep this file sorted alphabetically, one language code per line\n"
"de\n"
"ja"

#: C/gtkmm-tutorial-in.xml:6607(para)
msgid ""
"(In addition, you'd have the files <literal>ja.po</literal> and <literal>de."
"po</literal> in your <literal>po</literal> directory which contain the "
"German and Japanese translations, respectively.)"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6614(para)
msgid ""
"<literal>POTFILES.in</literal> is a list of paths to all files which contain "
"strings marked up for translation, starting from the project root directory. "
"So for example, if your project sources were located in a subdirectory named "
"<literal>src</literal>, and you had two files that contained strings that "
"should be translated, your <literal>POTFILES.in</literal> file might look "
"like this:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6623(programlisting)
#, no-wrap
msgid ""
"src/main.cc\n"
"src/other.cc"
msgstr ""
"src/main.cc\n"
"src/other.cc"

#: C/gtkmm-tutorial-in.xml:6626(para)
msgid ""
"If you are using <application>gettext</application> directly, you can only "
"mark strings for translation if they are in source code file. However, if "
"you use <application>intltool</application>, you can mark strings for "
"translation in a variety of other file formats, including "
"<application>Glade</application> UI files, xml, <ulink url=\"http://"
"standards.freedesktop.org/desktop-entry-spec/latest/\">.desktop files</"
"ulink> and several more. So, if you have designed some of the application UI "
"in <application>Glade</application> then also add your <filename>.glade</"
"filename> files to the list in <literal>POTFILES.in</literal>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6639(para)
msgid ""
"Now that there is a place to put your translations, you need to initialize "
"<application>intltool</application> and <application>gettext</application>. "
"Add the following code to your <literal>configure.ac</literal>, substituting "
"'programname' with the name of your program:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6646(programlisting)
#, no-wrap
msgid ""
"IT_PROG_INTLTOOL([0.35.0])\n"
"\n"
"GETTEXT_PACKAGE=programname\n"
"AC_SUBST(GETTEXT_PACKAGE)\n"
"AC_DEFINE_UNQUOTED([GETTEXT_PACKAGE], [\"$GETTEXT_PACKAGE\"],\n"
"                   [The domain to use with gettext])\n"
"AM_GLIB_GNU_GETTEXT\n"
"\n"
"PROGRAMNAME_LOCALEDIR=[${datadir}/locale]\n"
"AC_SUBST(PROGRAMNAME_LOCALEDIR)"
msgstr ""
"IT_PROG_INTLTOOL([0.35.0])\n"
"\n"
"GETTEXT_PACKAGE=programname\n"
"AC_SUBST(GETTEXT_PACKAGE)\n"
"AC_DEFINE_UNQUOTED([GETTEXT_PACKAGE], [\"$GETTEXT_PACKAGE\"],\n"
"                   [The domain to use with gettext])\n"
"AM_GLIB_GNU_GETTEXT\n"
"\n"
"PROGRAMNAME_LOCALEDIR=[${datadir}/locale]\n"
"AC_SUBST(PROGRAMNAME_LOCALEDIR)"

#: C/gtkmm-tutorial-in.xml:6657(para)
msgid ""
"This <varname>PROGRAMNAME_LOCALEDIR</varname> variable will be used later in "
"the <literal>Makefile.am</literal> file, to define a macro that will be used "
"when you initialize <application>gettext</application> in your source code."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6668(para)
msgid ""
"Add <literal>po</literal> to the <literal>SUBDIRS</literal> variable. "
"Without this, your translations won't get built and installed when you build "
"the program"
msgstr ""
"Añada <literal>po</literal> a la variable <literal>SUBDIRS</literal>. Sin "
"esto, las traducciones no se construirán al construir el programa."

#: C/gtkmm-tutorial-in.xml:6675(programlisting)
#, no-wrap
msgid ""
"INTLTOOL_FILES = intltool-extract.in \\\n"
"                 intltool-merge.in \\\n"
"                 intltool-update.in"
msgstr ""
"INTLTOOL_FILES = intltool-extract.in \\\n"
"                 intltool-merge.in \\\n"
"                 intltool-update.in"

#: C/gtkmm-tutorial-in.xml:6673(para)
msgid "Define <literal>INTLTOOL_FILES</literal> as: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6681(para)
msgid ""
"Add <literal>INTLTOOL_FILES</literal> to the <literal>EXTRA_DIST</literal> "
"list of files. This ensures that when you do a <command>make dist</command>, "
"these commands will be included in the source tarball."
msgstr ""
"Añada <literal>INTLTOOL_FILES</literal> a la lista de archivos "
"<literal>EXTRA_DIST</literal>. Esto asegura que cuando hace un <command>make "
"dist</command>, este comando se incluya en el archivo fuente."

#: C/gtkmm-tutorial-in.xml:6691(programlisting)
#, no-wrap
msgid ""
"DISTCLEANFILES = ... intltool-extract \\\n"
"                 intltool-merge \\\n"
"                 intltool-update \\\n"
"                 po/.intltool-merge-cache"
msgstr ""
"DISTCLEANFILES = ... intltool-extract \\\n"
"                 intltool-merge \\\n"
"                 intltool-update \\\n"
"                 po/.intltool-merge-cache"

#: C/gtkmm-tutorial-in.xml:6689(para)
msgid "Update your <literal>DISTCLEANFILES</literal>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6664(para)
msgid "In the top-level Makefile.am: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6700(para)
msgid ""
"In your <literal>src/Makefile.am</literal>, update your "
"<literal>AM_CPPFLAGS</literal> to add the following preprocessor macro "
"definition:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6705(programlisting)
#, no-wrap
msgid "AM_CPPFLAGS = ... -DPROGRAMNAME_LOCALEDIR=\\\"${PROGRAMNAME_LOCALEDIR}\\\""
msgstr "AM_CPPFLAGS = ... -DPROGRAMNAME_LOCALEDIR=\\\"${PROGRAMNAME_LOCALEDIR}\\\""

#: C/gtkmm-tutorial-in.xml:6706(para)
msgid ""
"This macro will be used when you initialize <literal>gettext</literal> in "
"your source code."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6713(title)
msgid "Marking strings for translation"
msgstr "Marcar cadenas para traducir"

#: C/gtkmm-tutorial-in.xml:6715(para)
msgid ""
"String literals should be typed in the source code in English, but they "
"should be surrounded by a call to the <function>gettext()</function> "
"function. These strings will be extracted for translation and the "
"translations may be used at runtime instead of the original English strings."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6723(para)
msgid ""
"The <application>GNU gettext</application> package allows you to mark "
"strings in source code, extract those strings for translation, and use the "
"translated strings in your application."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6735(programlisting)
#, no-wrap
msgid "display_message(\"Getting ready for i18n.\");"
msgstr "display_message(\"Getting ready for i18n.\");"

#: C/gtkmm-tutorial-in.xml:6737(programlisting)
#, no-wrap
msgid "display_message(_(\"Getting ready for i18n.\"));"
msgstr "display_message(_(\"Getting ready for i18n.\"));"

#: C/gtkmm-tutorial-in.xml:6729(para)
msgid ""
"However, <application>Glib</application> defines <function>gettext()</"
"function> support macros which are shorter wrappers in an easy-to-use form. "
"To use these macros, include <literal>&lt;glibmm/i18n.h&gt;</literal>, and "
"then, for example, substitute: <placeholder-1/> with: <placeholder-2/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6748(programlisting)
#, no-wrap
msgid "xgettext -a -o my-strings --omit-header *.cc *.h"
msgstr "xgettext -a -o my-strings --omit-header *.cc *.h"

#: C/gtkmm-tutorial-in.xml:6740(para)
msgid ""
"For reference, it is possible to generate a file which contains all strings "
"which appear in your code, even if they are not marked for translation, "
"together with file name and line number references. To generate such a file "
"named <literal>my-strings</literal>, execute the following command, within "
"the source code directory: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6755(programlisting)
#, no-wrap
msgid ""
"bindtextdomain(GETTEXT_PACKAGE, PROGRAMNAME_LOCALEDIR);\n"
"bind_textdomain_codeset(GETTEXT_PACKAGE, \"UTF-8\");\n"
"textdomain(GETTEXT_PACKAGE);"
msgstr ""
"bindtextdomain(GETTEXT_PACKAGE, PROGRAMNAME_LOCALEDIR);\n"
"bind_textdomain_codeset(GETTEXT_PACKAGE, \"UTF-8\");\n"
"textdomain(GETTEXT_PACKAGE);"

#: C/gtkmm-tutorial-in.xml:6751(para)
msgid ""
"Finally, to let you program use the translation for the current locale, add "
"this code to the beginning of your <filename>main.cc</filename> file, to "
"initialize gettext. <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6761(title)
msgid "How gettext works"
msgstr "Cómo funciona gettext"

#: C/gtkmm-tutorial-in.xml:6763(para)
msgid ""
"<application>intltool</application> / <application>xgettext</application> "
"script extracts the strings and puts them in a <filename>mypackage.pot</"
"filename> file. The translators of your application create their "
"translations by first copying this <filename>.pot</filename> file to a "
"<filename>localename.po</filename> file. A locale identifies a language and "
"an encoding for that language, including date and numerical formats. Later, "
"when the text in your source code has changed, the <literal>msmerge</"
"literal> script is used to update the <filename>localename.po</filename> "
"files from the regenerated <filename>.pot</filename> file."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6777(para)
msgid ""
"At install time, the <filename>.po</filename> files are converted to a "
"binary format (with the extension <filename>.mo</filename>) and placed in a "
"system-wide directory for locale files, for example <filename>/usr/share/"
"locale/</filename>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6784(para)
msgid ""
"When the application runs, the <application>gettext</application> library "
"checks the system-wide directory to see if there is a <filename>.mo</"
"filename> file for the user's locale environment (you can set the locale "
"with, for instance, \"export LANG=de_DE.UTF-8\" from a bash console). Later, "
"when the program reaches a <literal>gettext</literal> call, it looks for a "
"translation of a particular string. If none is found, the original string is "
"used."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6796(title)
msgid "Testing and adding translations"
msgstr "Comprobar y añadir las traducciones"

#: C/gtkmm-tutorial-in.xml:6803(programlisting)
#, no-wrap
msgid "intltool-update --pot"
msgstr "intltool-update --pot"

#: C/gtkmm-tutorial-in.xml:6798(para)
msgid ""
"To convince yourself that you've done well, you may wish to add a "
"translation for a new locale. In order to do that, go to the <filename>po</"
"filename> subdirectory of your project and execute the following command: "
"<placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6806(para)
msgid ""
"That will create a file named <filename>programname.pot</filename>. Now copy "
"that file to <filename>languagecode.po</filename>, such as <filename>de.po</"
"filename> or <filename>hu.po</filename>. Also add that language code to "
"<literal>LINGUAS</literal>. The <filename>.po</filename> file contains a "
"header and a list of English strings, with space for the translated strings "
"to be entered. Make sure you set the encoding of the <filename>.po</"
"filename> file (specified in the header, but also as content) to "
"<literal>UTF-8</literal>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6819(para)
msgid ""
"It's possible that certain strings will be marked as <literal>fuzzy</"
"literal> in the <filename>.po</filename> file. These translations will not "
"substitute the original string. To make them appear, simply remove the "
"<literal>fuzzy</literal> tag."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6829(title)
msgid "Resources"
msgstr "Recursos"

#: C/gtkmm-tutorial-in.xml:6838(ulink)
msgid "Internationalizing GNOME applications"
msgstr "Internacionalizar aplicaciones de GNOME"

#: C/gtkmm-tutorial-in.xml:6845(ulink)
msgid "Intltool README"
msgstr "README de intltool"

#: C/gtkmm-tutorial-in.xml:6851(ulink)
msgid "How to use GNOME CVS as a Translator"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6857(ulink)
msgid "gettext manual"
msgstr "manual de gettext"

#: C/gtkmm-tutorial-in.xml:6863(literal)
msgid "gtkmm_hello"
msgstr "gtkmm_hello"

#: C/gtkmm-tutorial-in.xml:6863(ulink) C/gtkmm-tutorial-in.xml:6869(ulink)
msgid "<placeholder-1/> example package"
msgstr "<placeholder-1/> paquete de ejemplo"

#: C/gtkmm-tutorial-in.xml:6869(literal)
msgid "gnomemm_hello"
msgstr "gnomemm_hello"

#: C/gtkmm-tutorial-in.xml:6831(para)
msgid ""
"More information about what lies behind the internationalization and "
"localization process is presented and demonstrated in: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6879(title)
msgid "Expecting UTF8"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6880(para)
msgid ""
"A properly internationalized application will not make assumptions about the "
"number of bytes in a character. That means that you shouldn't use pointer "
"arithmetic to step through the characters in a string, and it means you "
"shouldn't use <classname>std::string</classname> or standard C functions "
"such as <function>strlen()</function> because they make the same assumption."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6887(para)
msgid ""
"However, you probably already avoid bare char* arrays and pointer arithmetic "
"by using <classname>std::string</classname>, so you just need to start using "
"<classname>Glib::ustring</classname> instead. See the <link linkend=\"sec-"
"basics-ustring\">Basics</link> chapter about <classname>Glib::ustring</"
"classname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6895(title)
msgid "Glib::ustring and std::iostreams"
msgstr "Glib::ustring y std::iostreams"

#: C/gtkmm-tutorial-in.xml:6912(programlisting)
#, no-wrap
msgid ""
"std::ostringstream output;\n"
"output.imbue(std::locale(\"\")); // use the user's locale for this stream\n"
"output &lt;&lt; percentage &lt;&lt; \" % done\";\n"
"label-&gt;set_text(Glib::locale_to_utf8(output.str()));"
msgstr ""
"std::ostringstream output;\n"
"output.imbue(std::locale(\"\")); // use the user's locale for this stream\n"
"output &lt;&lt; percentage &lt;&lt; \" % done\";\n"
"label-&gt;set_text(Glib::locale_to_utf8(output.str()));"

#. <para>TODO: This section is not clear - it needs to spell things out more clearly and obviously.</para>
#: C/gtkmm-tutorial-in.xml:6897(para)
msgid ""
"Unfortunately, the integration with the standard iostreams is not completely "
"foolproof. <application>gtkmm</application> converts <classname>Glib::"
"ustring</classname>s to a locale-specific encoding (which usually is not "
"UTF-8) if you output them to an <classname>ostream</classname> with "
"<function>operator&lt;&lt;</function>. Likewise, retrieving <classname>Glib::"
"ustrings</classname> from <classname>istream</classname> with "
"<function>operator&gt;&gt;</function> causes a conversion in the opposite "
"direction. But this scheme breaks down if you go through a <classname>std::"
"string</classname>, e.g. by inputting text from a stream to a "
"<classname>std::string</classname> and then implicitly converting it to a "
"<classname>Glib::ustring</classname>. If the string contained non-ASCII "
"characters and the current locale is not UTF-8 encoded, the result is a "
"corrupted <classname>Glib::ustring</classname>. You can work around this "
"with a manual conversion. For instance, to retrieve the <classname>std::"
"string</classname> from a <classname>ostringstream</classname>: "
"<placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6922(title)
msgid "Pitfalls"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6924(para)
msgid ""
"There are a few common mistakes that you would discover eventually yourself. "
"But this section might help you to avoid them."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6927(title)
msgid "Same strings, different semantics"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6929(para)
msgid ""
"Sometimes two english strings are identical but have different meanings in "
"different contexts, so they would probably not be identical when translated. "
"Since the English strings are used as look-up keys, this causes problems."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6933(para)
msgid ""
"In these cases, you should add extra characters to the strings. For "
"instance, use <literal>\"jumps[noun]\"</literal> and <literal>\"jumps"
"[verb]\"</literal> instead of just <literal>\"jumps\"</literal>) and strip "
"them again outside the <function>gettext</function> call. If you add extra "
"characters you should also add a comment for the translators before the "
"<function>gettext</function> call. Such comments will be shown in the "
"<filename>.po</filename> files. For instance:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6943(programlisting)
#, no-wrap
msgid ""
"// note to translators: don't translate the \"[noun]\" part - it is\n"
"// just here to distinguish the string from another \"jumps\" string\n"
"text = strip(gettext(\"jumps[noun]\"), \"[noun]\");"
msgstr ""
"// note to translators: don't translate the \"[noun]\" part - it is\n"
"// just here to distinguish the string from another \"jumps\" string\n"
"text = strip(gettext(\"jumps[noun]\"), \"[noun]\");"

#: C/gtkmm-tutorial-in.xml:6949(title)
msgid "Composition of strings"
msgstr "Composición de cadenas"

#: C/gtkmm-tutorial-in.xml:6951(para)
msgid ""
"C programmers use <function>sprintf()</function> to compose and concatenate "
"strings. C++ favours streams, but unfortunately, this approach makes "
"translation difficult, because each fragment of text is translated "
"separately, without allowing the translators to rearrange them according to "
"the grammar of the language."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6958(para)
msgid "For instance, this code would be problematic:"
msgstr "Por ejemplo, este código podría ser problemático:"

#: C/gtkmm-tutorial-in.xml:6960(programlisting)
#, no-wrap
msgid ""
"std::cout &lt;&lt; _(\"Current amount: \") &lt;&lt; amount\n"
"          &lt;&lt; _(\" Future: \") &lt;&lt; future &lt;&lt; std::endl;\n"
"\n"
"label.set_text(_(\"Really delete \") + filename + _(\" now?\"));"
msgstr ""
"std::cout &lt;&lt; _(\"Current amount: \") &lt;&lt; amount\n"
"          &lt;&lt; _(\" Future: \") &lt;&lt; future &lt;&lt; std::endl;\n"
"\n"
"label.set_text(_(\"Really delete \") + filename + _(\" now?\"));"

#: C/gtkmm-tutorial-in.xml:6965(para)
msgid ""
"So you should either avoid this situation or revert to the C-style "
"<function>sprintf()</function>. One possible solution is the <ulink url="
"\"http://www.cs.auc.dk/~olau/compose/\">compose library</ulink> which "
"supports syntax such as:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6972(programlisting)
#, no-wrap
msgid "label.set_text(compose(_(\"Really delete %1 now?\"), filename));"
msgstr "label.set_text(compose(_(\"Really delete %1 now?\"), filename));"

#: C/gtkmm-tutorial-in.xml:6976(title)
msgid "Assuming the displayed size of strings"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6978(para)
msgid ""
"You never know how much space a string will take on screen when translated. "
"It might very possibly be twice the size of the original English string. "
"Luckily, most <application>gtkmm</application> widgets will expand at "
"runtime to the required size."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6982(title)
msgid "Unusual words"
msgstr "Palabras poco frecuentes"

#: C/gtkmm-tutorial-in.xml:6984(para)
msgid ""
"You should avoid cryptic abbreviations, slang, or jargon. They are usually "
"difficult to translate, and are often difficult for even native speakers to "
"understand. For instance, prefer \"application\" to \"app\""
msgstr ""

#: C/gtkmm-tutorial-in.xml:6990(title)
msgid "Using non-ASCII characters in strings"
msgstr ""

#: C/gtkmm-tutorial-in.xml:6992(para)
msgid ""
"Currently, <application>gettext</application> does not support non-ASCII "
"characters (i.e. any characters with a code above 127) in source code. For "
"instance, you cannot use the copyright sign (©)."
msgstr ""

#: C/gtkmm-tutorial-in.xml:6998(para)
msgid ""
"To work around this, you could write a comment in the source code just "
"before the string, telling the translators to use the special character if "
"it is available in their languages. For english, you could then make an "
"American English <filename>en_US.po</filename> translation which used that "
"special charactger."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7006(title)
msgid "Getting help with translations"
msgstr "Obtener ayuda con las traducciones"

#: C/gtkmm-tutorial-in.xml:7008(para)
msgid ""
"If your program is free software, there is a whole <literal>GNOME</literal> "
"subproject devoted to helping you make translations, the <ulink url=\"http://"
"developer.gnome.org/projects/gtp/\"><literal>GNOME</literal> Translation "
"Project</ulink>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7013(para)
msgid ""
"The way it works is that you contact the gnome-i18n mailing list to find out "
"how the translators can access your <filename>po/</filename> subdirectory, "
"and to add your project to the big <ulink url=\"http://developer.gnome.org/"
"projects/gtp/status/\">status tables</ulink>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7020(para)
msgid ""
"Then you make sure you update the file <filename>POTFILES.in</filename> in "
"the <filename>po/</filename> subdirectory (<command>intltool-update -M</"
"command> can help with this) so that the translators always access updated "
"<filename>myprogram.pot</filename> files, and simply freeze the strings at "
"least a couple of days before you make a new release, announcing it on gnome-"
"i18n. Depending on the number of strings your program contains and how "
"popular it is, the translations will then start to tick in as "
"<filename>languagename.po</filename> files."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7032(para)
msgid ""
"Note that most language teams only consist of 1-3 persons, so if your "
"program contains a lot of strings, it might last a while before anyone has "
"the time to look at it. Also, most translators do not want to waste their "
"time (translating is a very time-consuming task) so if they do not assess "
"your project as being really serious (in the sense that it is polished and "
"being maintained) they may decide to spend their time on some other project."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7044(title) C/gtkmm-tutorial-in.xml:7162(title)
msgid "Custom Widgets"
msgstr "Widgets personalizados"

#: C/gtkmm-tutorial-in.xml:7046(para)
msgid ""
"<application>gtkmm</application> makes it very easy to derive new widgets by "
"inheriting from an existing widget class, either by deriving from a "
"container and adding child widgets, or by deriving from a single-item "
"widget, and changing its behaviour. But you might occasionally find that no "
"suitable starting point already exists. In this case, you can implement a "
"widget from scratch."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7053(title)
msgid "Custom Containers"
msgstr "Contenedores personalizados"

#: C/gtkmm-tutorial-in.xml:7056(para)
msgid ""
"<methodname>get_request_mode_vfunc()</methodname>: Return what <literal>Gtk::"
"SizeRequestMode</literal> is preferred by the container."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7057(para)
msgid ""
"<methodname>get_preferred_width_vfunc()</methodname>: Calculate the minimum "
"and natural width of the container."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7058(para)
msgid ""
"<methodname>get_preferred_height_vfunc()</methodname>: Calculate the minimum "
"and natural height of the container."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7059(para)
msgid ""
"<methodname>get_preferred_width_for_height_vfunc()</methodname>: Calculate "
"the minimum and natural width of the container, if it would be given the "
"specified height."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7060(para)
msgid ""
"<methodname>get_preferred_height_for_width_vfunc()</methodname>: Calculate "
"the minimum and natural height of the container, if it would be given the "
"specified width."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7061(para)
msgid ""
"<methodname>on_size_allocate()</methodname>: Position the child widgets, "
"given the height and width that the container has actually been given."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7062(para)
msgid ""
"<methodname>forall_vfunc()</methodname>: Call the same callback for each of "
"the children."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7063(para)
msgid "<methodname>on_add()</methodname>: Add a child widget to the container."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7064(para)
msgid ""
"<methodname>on_remove()</methodname>: Remove a child widget from the "
"container."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7065(para)
msgid ""
"<methodname>child_type_vfunc()</methodname>: Return what type of child can "
"be added."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7054(para)
msgid ""
"When deriving from <classname>Gtk::Container</classname>, you should "
"override the following virtual methods: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7069(para)
msgid ""
"The <methodname>get_request_mode_vfunc()</methodname>, "
"<methodname>get_preferred_width_vfunc()</methodname>, "
"<methodname>get_preferred_height_vfunc()</methodname>, "
"<methodname>get_preferred_width_for_height_vfunc()</methodname>, "
"<methodname>get_preferred_height_for_width_vfunc()</methodname>, and "
"<methodname>on_size_allocate()</methodname> virtual methods control the "
"layout of the child widgets. For instance, if your container has 2 child "
"widgets, with one below the other, your <methodname>get_request_mode_vfunc()"
"</methodname> might request height-for-width layout. Then your "
"<methodname>get_preferred_width_vfunc()</methodname> might report the "
"maximum of the widths of the child widgets, and "
"<methodname>get_preferred_height_for_width_vfunc()</methodname> might report "
"the sum of their heights. If you want padding between the child widgets then "
"you would add that to the width and height too. Your widget's container will "
"use this result to ensure that your widget gets enough space, and not less. "
"By examining each widget's parent, and its parent, this logic will "
"eventually decide the size of the top-level window."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7089(para)
msgid ""
"You are not guaranteed to get the <literal>Gtk::SizeRequestMode</literal> "
"that you request. Therefore all four of the "
"<methodname>get_preferred_xxx_vfunc()</methodname> methods must return "
"sensible values."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7094(para)
msgid ""
"<methodname>on_size_allocate()</methodname> receives the actual height and "
"width that the parent container has decided to give to your widget. This "
"might be more than the minimum, or even more than the natural size, for "
"instance if the top-level window has been expanded. You might choose to "
"ignore the extra space and leave a blank area, or you might choose to expand "
"your child widgets to fill the space, or you might choose to expand the "
"padding between your widgets. It's your container, so you decide. Don't "
"forget to call <methodname>set_allocation()</methodname> inside your "
"<methodname>on_size_allocate()</methodname> implementation to actually use "
"the allocated space that has been offered by the parent container."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7106(para)
msgid ""
"Unless your container is a top-level window that derives from "
"<classname>Gtk::Window</classname>, you should probably also call "
"<methodname>Gtk::Widget::set_has_window(false)</methodname> in your "
"constructor. This means that your container does not create its own "
"<classname>Gdk::Window</classname>, but uses its parent's window. (Note the "
"difference between <classname>Gtk::Window</classname> and <classname>Gdk::"
"Window</classname>.) If your container does need its own <classname>Gdk::"
"Window</classname>, and does not derive from <classname>Gtk::Window</"
"classname>, you must also override the <methodname>on_realize()</methodname> "
"method as described in the <link linkend=\"sec-custom-widgets\">Custom "
"Widgets</link> section. And unless your container draws directly onto the "
"underlying <classname>Gdk::Window</classname>, you should probably call "
"<methodname>set_redraw_on_allocate(false)</methodname> to improve "
"performance."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7122(para)
msgid ""
"By overriding <methodname>forall_vfunc()</methodname> you can allow "
"applications to operate on all of the container's child widgets. For "
"instance, <methodname>show_all_children()</methodname> uses this to find all "
"the child widgets and show them."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7127(para)
msgid ""
"Although your container might have its own method to set the child widgets, "
"you should still provide an implementation for the virtual <methodname>on_add"
"()</methodname> and <methodname>on_remove()</methodname> methods from the "
"base class, so that the add() and remove() methods will do something "
"appropriate if they are called."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7133(para)
msgid ""
"Your implementation of the <methodname>child_type_vfunc()</methodname> "
"method should report the type of widget that may be added to your container, "
"if it is not yet full. This is usually <methodname>Gtk::Widget::get_type()</"
"methodname> to indicate that the container may contain any class derived "
"from <classname>Gtk::Widget</classname>. If the container may not contain "
"any more widgets, then this method should return <literal>G_TYPE_NONE</"
"literal>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7145(para)
msgid ""
"This example implements a container with two child widgets, one above the "
"other. Of course, in this case it would be far simpler just to use a "
"vertical <classname>Gtk::Box</classname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7150(title)
msgid "Custom Container"
msgstr "Contenedor personalizado"

#: C/gtkmm-tutorial-in.xml:7163(para)
msgid ""
"By deriving directly from <classname>Gtk::Widget</classname> you can do all "
"the drawing for your widget directly, instead of just arranging child "
"widgets. For instance, a <classname>Gtk::Label</classname> draws the text of "
"the label, but does not do this by using other widgets."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7174(para)
msgid ""
"<methodname>get_request_mode_vfunc()</methodname>: (optional) Return what "
"<literal>Gtk::SizeRequestMode</literal> is preferred by the widget."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7175(para)
msgid ""
"<methodname>get_preferred_width_vfunc()</methodname>: Calculate the minimum "
"and natural width of the widget."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7176(para)
msgid ""
"<methodname>get_preferred_height_vfunc()</methodname>: Calculate the minimum "
"and natural height of the widget."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7177(para)
msgid ""
"<methodname>get_preferred_width_for_height_vfunc()</methodname>: Calculate "
"the minimum and natural width of the widget, if it would be given the "
"specified height."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7178(para)
msgid ""
"<methodname>get_preferred_height_for_width_vfunc()</methodname>: Calculate "
"the minimum and natural height of the widget, if it would be given the "
"specified width."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7179(para)
msgid ""
"<methodname>on_size_allocate()</methodname>: Position the widget, given the "
"height and width that it has actually been given."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7180(para)
msgid ""
"<methodname>on_realize()</methodname>: Associate a <classname>Gdk::Window</"
"classname> with the widget."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7181(para)
msgid ""
"<methodname>on_unrealize()</methodname>: (optional) Break the association "
"with the <classname>Gdk::Window</classname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7182(para)
msgid "<methodname>on_map()</methodname>: (optional)"
msgstr "<methodname>on_map()</methodname>: (opcional)"

#: C/gtkmm-tutorial-in.xml:7183(para)
msgid "<methodname>on_unmap()</methodname>: (optional)"
msgstr "<methodname>on_unmap()</methodname>: (opcional)"

#: C/gtkmm-tutorial-in.xml:7184(para)
msgid ""
"<methodname>on_draw()</methodname>: Draw on the supplied <classname>Cairo::"
"Context</classname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7169(para)
msgid ""
"When deriving from <classname>Gtk::Widget</classname>, you should override "
"the following virtual methods. The methods marked (optional) need not be "
"overridden in all custom widgets. The base class's methods may be "
"appropriate. <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7188(para)
msgid ""
"The first 6 methods in the previous table are also overridden in custom "
"containers. They are briefly described in the <link linkend=\"sec-custom-"
"containers\">Custom Containers</link> section."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7193(para)
msgid ""
"Most custom widgets need their own <classname>Gdk::Window</classname> to "
"draw on. Then you can call <methodname>Gtk::Widget::set_has_window(true)</"
"methodname> in your constructor. (This is the default value.) If you do not "
"call <methodname>set_has_window(false)</methodname>, you must override "
"<methodname>on_realize()</methodname> and call <methodname>Gtk::Widget::"
"set_realized()</methodname> and <methodname>Gtk::Widget::set_window()</"
"methodname> from there."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7204(para)
msgid "This example implements a widget which draws a Penrose triangle."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7207(title)
msgid "Custom Widget"
msgstr "Widget personalizado"

#: C/gtkmm-tutorial-in.xml:7223(title)
msgid "Recommended Techniques"
msgstr "Técnicas recomendadas"

#: C/gtkmm-tutorial-in.xml:7225(para)
msgid ""
"This section is simply a gathering of wisdom, general style guidelines and "
"hints for creating <application>gtkmm</application> applications."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7229(para)
msgid ""
"Use GNU <application>autoconf</application> and <application>automake</"
"application>! They are your friends :) <application>Automake</application> "
"examines C files, determines how they depend on each other, and generates a "
"<filename>Makefile</filename> so the files can be compiled in the correct "
"order. <application>Autoconf</application> permits automatic configuration "
"of software installation, handling a large number of system quirks to "
"increase portability.."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7239(para)
msgid ""
"Subclass Widgets to better organize your code. You should probably subclass "
"your main <classname>Window</classname> at least. Then you can make your "
"child Widgets and signal handlers members of that class."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7244(para)
msgid ""
"Create your own signals instead of passing pointers around. Objects can "
"communicate with each other via signals and signal handlers. This is much "
"simpler than objects holding pointers to each other and calling each other's "
"methods. <application>gtkmm</application>'s classes uses special versions of "
"<classname>sigc::signal</classname>, but you should use normal "
"<classname>sigc::signal</classname>s, as described in the "
"<application>libsigc++</application> documentation."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7253(title)
msgid "Application Lifetime"
msgstr "Tiempo de vida de la aplicación"

#: C/gtkmm-tutorial-in.xml:7254(para)
msgid ""
"Most applications will have only one <classname>Window</classname>, or only "
"one main window. These applications can use the <methodname>Gtk::"
"Application::run(Gtk::Window&amp;)</methodname> overload. It shows the "
"window and returns when the window has been hidden. This might happen when "
"the user closes the window, or when your code decides to <methodname>hide()</"
"methodname> the window. You can prevent the user from closing the window "
"(for instance, if there are unsaved changes) by overriding <methodname>Gtk::"
"Window::on_delete_event()</methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7262(para)
msgid "Most of our examples use this technique."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7266(title)
msgid "Using a <application>gtkmm</application> widget"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7268(para)
msgid ""
"Our examples all tend to have the same structure. They follow these steps "
"for using a <classname>Widget</classname>:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7277(para)
msgid ""
"Declare a variable of the type of <classname>Widget</classname> you wish to "
"use, generally as member variable of a derived container class. You could "
"also declare a pointer to the widget type, and then create it with "
"<literal>new</literal> in your code. Even when using the widget via a "
"pointer, it's still probably best to make that pointer a member variable of "
"a container class so that you can access it later."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7288(para)
msgid ""
"Set the attributes of the widget. If the widget has no default constructor, "
"then you will need to initialize the widget in the initalizer list of your "
"container class's constructor."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7294(para)
msgid "Connect any signals you wish to use to the appropriate handlers."
msgstr "Conecte las señales que quiere usar a los manejadores apropiados."

#: C/gtkmm-tutorial-in.xml:7300(para)
msgid ""
"Pack the widget into a container using the appropriate call, e.g. "
"<methodname>Gtk::Container::add()</methodname> or <methodname>pack_start()</"
"methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7308(para)
msgid "Call <methodname>show()</methodname> to display the widget."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7317(para)
msgid ""
"<methodname>Gtk::Widget::show()</methodname> lets <application>gtkmm</"
"application> know that we have finished setting the attributes of the "
"widget, and that it is ready to be displayed. You can use <methodname>Gtk::"
"Widget::hide()</methodname> to make it disappear again. The order in which "
"you show the widgets is not important, but we do suggest that you show the "
"top-level window last; this way, the whole window will appear with its "
"contents already drawn. Otherwise, the user will first see a blank window, "
"into which the widgets will be gradually drawn."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7331(title)
msgid "Contributing"
msgstr "Contribuir"

#: C/gtkmm-tutorial-in.xml:7333(para)
msgid ""
"This document, like so much other great software out there, was created for "
"free by volunteers. If you are at all knowledgeable about any aspect of "
"<application>gtkmm</application> that does not already have documentation, "
"please consider contributing to this document."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7339(para)
msgid ""
"Ideally, we would like you to <ulink url=\"http://www.gtkmm.org/bugs.shtml"
"\">provide a patch</ulink> to the <filename>docs/tutorial/C/gtkmm-tutorial-"
"in.xml</filename> file. This file is currently in the <literal>gtkmm-"
"documentation</literal> module in GNOME git."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7345(para)
msgid ""
"If you do decide to contribute, please post your contribution to the "
"<application>gtkmm</application> mailing list at <ulink url=\"mailto:gtkmm-"
"list@gnome.org\">&lt;gtkmm-list@gnome.org&gt;</ulink>. Also, be aware that "
"the entirety of this document is free, and any addition you provide must "
"also be free. That is, people must be able to use any portion of your "
"examples in their programs, and copies of this document (including your "
"contribution) may be distributed freely."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7357(title)
msgid "The RefPtr smartpointer"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7358(para)
msgid ""
"<classname>Glib::RefPtr</classname> is a smartpointer. Specifically, it is a "
"reference-counting smartpointer. You might be familiar with <literal>std::"
"auto_ptr&lt;&gt;</literal>, which is also a smartpointer, but <literal>Glib::"
"RefPtr&lt;&gt;</literal> is much simpler, and more useful. We expect a "
"future version of the C++ Standard Library to contain a reference-counting "
"shared smartpointer, and a future version of <application>gtkmm</"
"application> might possibly use that instead."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7368(para)
msgid ""
"A smartpointer acts much like a normal pointer. Here are a few examples."
msgstr ""
"Un puntero inteligente actúa como un puntero normal. Aquí hay algunos "
"ejemplos."

#: C/gtkmm-tutorial-in.xml:7371(title)
msgid "Copying"
msgstr "Copiado"

#: C/gtkmm-tutorial-in.xml:7372(para)
msgid ""
"You can copy <classname>RefPtr</classname>s, just like normal pointers. But "
"unlike normal pointers, you don't need to worry about deleting the "
"underlying instance."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7378(programlisting)
#, no-wrap
msgid ""
"\n"
"Glib::RefPtr&lt;Gdk::Pixbuf&gt; refPixbuf = Gdk::Pixbuf::create_from_file(filename);\n"
"Glib::RefPtr&lt;Gdk::Pixbuf&gt; refPixbuf2 = refPixbuf;\n"
msgstr ""
"\n"
"Glib::RefPtr&lt;Gdk::Pixbuf&gt; refPixbuf = Gdk::Pixbuf::create_from_file(filename);\n"
"Glib::RefPtr&lt;Gdk::Pixbuf&gt; refPixbuf2 = refPixbuf;\n"

#: C/gtkmm-tutorial-in.xml:7383(para)
msgid ""
"Of course this means that you can store <classname>RefPtr</classname>s in "
"standard containers, such as <classname>std::vector</classname> or "
"<classname>std::list</classname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7388(programlisting)
#, no-wrap
msgid ""
"\n"
"std::list&lt; Glib::RefPtr&lt;Gdk::Pixbuf&gt; &gt; listPixbufs;\n"
"Glib::RefPtr&lt;Gdk::Pixbuf&gt; refPixbuf = Gdk::Pixbuf::create_from_file(filename);\n"
"listPixbufs.push_back(refPixbuf);\n"
msgstr ""
"\n"
"std::list&lt; Glib::RefPtr&lt;Gdk::Pixbuf&gt; &gt; listPixbufs;\n"
"Glib::RefPtr&lt;Gdk::Pixbuf&gt; refPixbuf = Gdk::Pixbuf::create_from_file(filename);\n"
"listPixbufs.push_back(refPixbuf);\n"

#: C/gtkmm-tutorial-in.xml:7396(title)
msgid "Dereferencing"
msgstr "Eliminar referencia"

#: C/gtkmm-tutorial-in.xml:7397(para)
msgid ""
"You can dereference a smartpointer with the -&gt; operator, to call the "
"methods of the underlying instance, just like a normal pointer."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7401(programlisting)
#, no-wrap
msgid ""
"\n"
"Glib::RefPtr&lt;Gdk::Pixbuf&gt; refPixbuf = Gdk::Pixbuf::create_from_file(filename);\n"
"int width = refPixbuf-&gt;get_width();\n"
msgstr ""
"\n"
"Glib::RefPtr&lt;Gdk::Pixbuf&gt; refPixbuf = Gdk::Pixbuf::create_from_file(filename);\n"
"int width = refPixbuf-&gt;get_width();\n"

#: C/gtkmm-tutorial-in.xml:7406(para)
msgid ""
"But unlike most smartpointers, you can't use the * operator to access the "
"underlying instance."
msgstr ""
"Pero a diferencia de la mayoría de punteros inteligentes, no se puede "
"utilizar el operador * para acceder a la instancia de base."

#: C/gtkmm-tutorial-in.xml:7410(programlisting)
#, no-wrap
msgid ""
"\n"
"Glib::RefPtr&lt;Gdk::Pixbuf&gt; refPixbuf = Gdk::Pixbuf::create_from_file(filename);\n"
"Gdk::Pixbuf&amp; underlying = *refPixbuf; //Syntax error - will not compile.\n"
msgstr ""
"\n"
"Glib::RefPtr&lt;Gdk::Pixbuf&gt; refPixbuf = Gdk::Pixbuf::create_from_file(filename);\n"
"Gdk::Pixbuf&amp; underlying = *refPixbuf; //Syntax error - will not compile.\n"

#: C/gtkmm-tutorial-in.xml:7417(title)
msgid "Casting"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7418(para)
msgid ""
"You can cast <classname>RefPtrs</classname> to base types, just like normal "
"pointers."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7423(programlisting)
#, no-wrap
msgid ""
"\n"
"Glib::RefPtr&lt;Gtk::TreeStore&gt; refStore = Gtk::TreeStore::create(columns);\n"
"Glib::RefPtr&lt;Gtk::TreeModel&gt; refModel = refStore;\n"
msgstr ""
"\n"
"Glib::RefPtr&lt;Gtk::TreeStore&gt; refStore = Gtk::TreeStore::create(columns);\n"
"Glib::RefPtr&lt;Gtk::TreeModel&gt; refModel = refStore;\n"

#: C/gtkmm-tutorial-in.xml:7428(para)
msgid ""
"This means that any method which takes a <type>const Glib::RefPtr&lt;"
"BaseType&gt;</type> argument can also take a <type>const Glib::RefPtr&lt;"
"DerivedType&gt;</type>. The cast is implicit, just as it would be for a "
"normal pointer."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7432(para)
msgid ""
"You can also cast to a derived type, but the syntax is a little different "
"than with a normal pointer."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7436(programlisting)
#, no-wrap
msgid ""
"\n"
"Glib::RefPtr&lt;Gtk::TreeStore&gt; refStore =\n"
"Glib::RefPtr&lt;Gtk::TreeStore&gt;::cast_dynamic(refModel);\n"
"Glib::RefPtr&lt;Gtk::TreeStore&gt; refStore2 =\n"
"Glib::RefPtr&lt;Gtk::TreeStore&gt;::cast_static(refModel);\n"
msgstr ""
"\n"
"Glib::RefPtr&lt;Gtk::TreeStore&gt; refStore =\n"
"Glib::RefPtr&lt;Gtk::TreeStore&gt;::cast_dynamic(refModel);\n"
"Glib::RefPtr&lt;Gtk::TreeStore&gt; refStore2 =\n"
"Glib::RefPtr&lt;Gtk::TreeStore&gt;::cast_static(refModel);\n"

#: C/gtkmm-tutorial-in.xml:7446(title)
msgid "Checking for null"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7447(para)
msgid ""
"Just like normal pointers, you can check whether a <classname>RefPtr</"
"classname> points to anything."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7452(programlisting)
#, no-wrap
msgid ""
"\n"
"Glib::RefPtr&lt;Gtk::TreeModel&gt; refModel = m_TreeView.get_model();\n"
"if(refModel)\n"
"{\n"
"  int cols_count = refModel-&gt;get_n_columns();\n"
"  ...\n"
"}\n"
msgstr ""
"\n"
"Glib::RefPtr&lt;Gtk::TreeModel&gt; refModel = m_TreeView.get_model();\n"
"if(refModel)\n"
"{\n"
"  int cols_count = refModel-&gt;get_n_columns();\n"
"  ...\n"
"}\n"

#: C/gtkmm-tutorial-in.xml:7461(para)
msgid ""
"But unlike normal pointers, <classname>RefPtr</classname>s are automatically "
"initialized to null so you don't need to remember to do that yourself."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7468(title)
msgid "Constness"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7469(para)
msgid ""
"The use of the <literal>const</literal> keyword in C++ is not always clear. "
"You might not realise that <type>const Something*</type> declares a pointer "
"to a <type>const Something</type>, The pointer can be changed, but not the "
"<type>Something</type> that it points to."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7475(para)
msgid ""
"Therefore, the <classname>RefPtr</classname> equivalent of <type>Something*</"
"type> for a method parameter is <type>const Glib::RefPtr&lt;Something&gt;"
"&amp;</type>, and the equivalent of <type>const Something*</type> is "
"<type>const Glib::RefPtr&lt;const Something&gt;&amp;</type>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7482(para)
msgid ""
"The <literal>const ... &amp;</literal> around both is just for efficiency, "
"like using <classname>const std::string&amp;</classname> instead of "
"<classname>std::string</classname> for a method parameter to avoid "
"unnecessary copying."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7497(title)
msgid "Connecting signal handlers"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7498(para)
msgid ""
"<application>gtkmm</application> widget classes have signal accessor "
"methods, such as <methodname>Gtk::Button::signal_clicked()</methodname>, "
"which allow you to connect your signal handler. Thanks to the flexibility of "
"<application>libsigc++</application>, the callback library used by "
"<application>gtkmm</application>, the signal handler can be almost any kind "
"of function, but you will probably want to use a class method. Among "
"<application>GTK+</application> C coders, these signal handlers are often "
"named callbacks."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7508(para)
msgid "Here's an example of a signal handler being connected to a signal:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7513(programlisting)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtkmm/button.h&gt;\n"
"\n"
"void on_button_clicked()\n"
"{\n"
"    std::cout &lt;&lt; \"Hello World\" &lt;&lt; std::endl;\n"
"}\n"
"\n"
"main()\n"
"{\n"
"    Gtk::Button button(\"Hello World\");\n"
"    button.signal_clicked().connect(sigc::ptr_fun(&amp;on_button_clicked));\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtkmm/button.h&gt;\n"
"\n"
"void on_button_clicked()\n"
"{\n"
"    std::cout &lt;&lt; \"Hello World\" &lt;&lt; std::endl;\n"
"}\n"
"\n"
"main()\n"
"{\n"
"    Gtk::Button button(\"Hello World\");\n"
"    button.signal_clicked().connect(sigc::ptr_fun(&amp;on_button_clicked));\n"
"}\n"

#: C/gtkmm-tutorial-in.xml:7529(para)
msgid ""
"There's rather a lot to think about in this (non-functional) code. First "
"let's identify the parties involved:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7537(para)
msgid "The signal handler is <methodname>on_button_clicked()</methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7543(para)
msgid ""
"We're hooking it up to the <classname>Gtk::Button</classname> object called "
"<varname>button</varname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7550(para)
msgid ""
"When the Button emits its <literal>clicked</literal> signal, "
"<methodname>on_button_clicked()</methodname> will be called."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7558(para)
msgid "Now let's look at the connection again:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7563(programlisting)
#, no-wrap
msgid ""
"\n"
"    ...\n"
"    button.signal_clicked().connect(sigc::ptr_fun(&amp;on_button_clicked));\n"
"    ...\n"
msgstr ""
"\n"
"    ...\n"
"    button.signal_clicked().connect(sigc::ptr_fun(&amp;on_button_clicked));\n"
"    ...\n"

#: C/gtkmm-tutorial-in.xml:7570(para)
msgid ""
"Note that we don't pass a pointer to <methodname>on_button_clicked()</"
"methodname> directly to the signal's <methodname>connect()</methodname> "
"method. Instead, we call <function>sigc::ptr_fun()</function>, and pass the "
"result to <methodname>connect()</methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7577(para)
msgid ""
"<function>sigc::ptr_fun()</function> generates a <classname>sigc::slot</"
"classname>. A slot is an object which looks and feels like a function, but "
"is actually an object. These are also known as function objects, or "
"functors. <function>sigc::ptr_fun()</function> generates a slot for a "
"standalone function or static method. <function>sigc::mem_fun()</function> "
"generates a slot for a member method of a particular instance."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7586(para)
msgid "Here's a slightly larger example of slots in action:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7591(programlisting)
#, no-wrap
msgid ""
"\n"
"void on_button_clicked();\n"
"\n"
"class some_class\n"
"{\n"
"    void on_button_clicked();\n"
"};\n"
"\n"
"some_class some_object;\n"
"\n"
"main()\n"
"{\n"
"    Gtk::Button button;\n"
"    button.signal_clicked().connect( sigc::ptr_fun(&amp;on_button_clicked) );\n"
"    button.signal_clicked().connect( sigc::mem_fun(some_object, &amp;some_class::on_button_clicked) );\n"
"}\n"
msgstr ""
"\n"
"void on_button_clicked();\n"
"\n"
"class some_class\n"
"{\n"
"    void on_button_clicked();\n"
"};\n"
"\n"
"some_class some_object;\n"
"\n"
"main()\n"
"{\n"
"    Gtk::Button button;\n"
"    button.signal_clicked().connect( sigc::ptr_fun(&amp;on_button_clicked) );\n"
"    button.signal_clicked().connect( sigc::mem_fun(some_object, &amp;some_class::on_button_clicked) );\n"
"}\n"

#: C/gtkmm-tutorial-in.xml:7610(para)
msgid ""
"The first call to <methodname>connect()</methodname> is just like the one we "
"saw last time; nothing new here."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7613(para)
msgid ""
"The next is more interesting. <function>sigc::mem_fun()</function> is called "
"with two arguments. The first argument is <parameter>some_object</"
"parameter>, which is the object that our new slot will be pointing at. The "
"second argument is a pointer to one of its methods. This particular version "
"of <function>sigc::mem_fun()</function> creates a slot which will, when "
"\"called\", call the pointed-to method of the specified object, in this case "
"<methodname>some_object.on_button_clicked()</methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7623(para)
msgid ""
"Another thing to note about this example is that we made the call to "
"<methodname>connect()</methodname> twice for the same signal object. This is "
"perfectly fine - when the button is clicked, both signal handlers will be "
"called."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7630(para)
msgid ""
"We just told you that the button's <literal>clicked</literal> signal is "
"expecting to call a method with no arguments. All signals have requirements "
"like this - you can't hook a function with two arguments to a signal "
"expecting none (unless you use an adapter, such as <function>sigc::bind()</"
"function>, of course). Therefore, it's important to know what type of signal "
"handler you'll be expected to connect to a given signal."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7642(title)
msgid "Writing signal handlers"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7644(para)
msgid ""
"To find out what type of signal handler you can connect to a signal, you can "
"look it up in the reference documentation or the header file. Here's an "
"example of a signal declaration you might see in the <application>gtkmm</"
"application> headers:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7651(programlisting)
#, no-wrap
msgid ""
"\n"
"Glib::SignalProxy1&lt;bool, Gtk::DirectionType&gt; signal_focus()\n"
msgstr ""
"\n"
"Glib::SignalProxy1&lt;bool, Gtk::DirectionType&gt; signal_focus()\n"

#: C/gtkmm-tutorial-in.xml:7656(para)
msgid ""
"Other than the signal's name (<literal>focus</literal>), two things are "
"important to note here: the number following the word "
"<classname>SignalProxy</classname> at the beginning (1, in this case), and "
"the types in the list (<type>bool</type> and <type>Gtk::DirectionType</"
"type>). The number indicates how many arguments the signal handler should "
"have; the first type, <type>bool</type>, is the type that the signal handler "
"should return; and the next type, <type>Gtk::DirectionType</type>, is the "
"type of this signal's first, and only, argument. By looking at the reference "
"documentation, you can see the names of the arguments too."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7668(para)
msgid ""
"The same principles apply for signals which have more arguments. Here's one "
"with three (taken from <filename>&lt;gtkmm/editable.h&gt;</filename>):"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7674(programlisting)
#, no-wrap
msgid ""
"\n"
"Glib::SignalProxy3&lt;void, const Glib::ustring&amp;, int, int*&gt; signal_insert_text()\n"
"\n"
msgstr ""
"\n"
"Glib::SignalProxy3&lt;void, const Glib::ustring&amp;, int, int*&gt; signal_insert_text()\n"
"\n"

#: C/gtkmm-tutorial-in.xml:7680(para)
msgid ""
"It follows the same form. The number 3 at the end of the type's name "
"indicates that our signal handler will need three arguments. The first type "
"in the type list is <type>void</type>, so that should be our signal "
"handler's return type. The following three types are the argument types, in "
"order. Our signal handler's prototype could look like this:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7689(programlisting)
#, no-wrap
msgid ""
"\n"
"void on_insert_text(const Glib::ustring&amp; text, int length, int* position);\n"
msgstr ""
"\n"
"void on_insert_text(const Glib::ustring&amp; text, int length, int* position);\n"

#: C/gtkmm-tutorial-in.xml:7696(title)
msgid "Disconnecting signal handlers"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7698(para)
msgid ""
"Let's take another look at a Signal's <literal>connect</literal> method:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7703(programlisting)
#, no-wrap
msgid ""
"\n"
"sigc::signal&lt;void,int&gt;::iterator signal&lt;void,int&gt;::connect( const sigc::slot&lt;void,int&gt;&amp; );\n"
msgstr ""
"\n"
"sigc::signal&lt;void,int&gt;::iterator signal&lt;void,int&gt;::connect( const sigc::slot&lt;void,int&gt;&amp; );\n"

#: C/gtkmm-tutorial-in.xml:7708(para)
msgid ""
"Notice that the return value is of type <classname>sigc::signal&lt;void,"
"int&gt;::iterator</classname>. This can be implicitely converted into a "
"<classname>sigc::connection</classname> which in turn can be used to control "
"the connection. By keeping a connection object you can disconnect its "
"associated signal handler using the method <methodname>sigc::connection::"
"disconnect()</methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7719(title)
msgid "Overriding default signal handlers"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7721(para)
msgid ""
"So far we've told you to perform actions in response to button-presses and "
"the like by handling signals. That's certainly a good way to do things, but "
"it's not the only way."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7728(para)
msgid ""
"Instead of laboriously connecting signal handlers to signals, you can simply "
"make a new class which inherits from a widget - say, a Button - and then "
"override the default signal handler, such as Button::on_clicked(). This can "
"be a lot simpler than hooking up signal handlers for everything."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7735(para)
msgid ""
"Subclassing isn't always the best way to accomplish things. It is only "
"useful when you want the widget to handle its own signal by itself. If you "
"want some other class to handle the signal then you'll need to connect a "
"separate handler. This is even more true if you want several objects to "
"handle the same signal, or if you want one signal handler to respond to the "
"same signal from different objects."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7740(para)
msgid ""
"<application>gtkmm</application> classes are designed with overriding in "
"mind; they contain virtual member methods specifically intended to be "
"overridden."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7745(para)
msgid "Let's look at an example of overriding:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7750(programlisting)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtkmm/button.h&gt;\n"
"\n"
"class OverriddenButton : public Gtk::Button\n"
"{\n"
"protected:\n"
"    virtual void on_clicked();\n"
"}\n"
"\n"
"void OverriddenButton::on_clicked()\n"
"{\n"
"    std::cout &lt;&lt; \"Hello World\" &lt;&lt; std::endl;\n"
"\n"
"    // call the base class's version of the method:\n"
"    Gtk::Button::on_clicked();\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtkmm/button.h&gt;\n"
"\n"
"class OverriddenButton : public Gtk::Button\n"
"{\n"
"protected:\n"
"    virtual void on_clicked();\n"
"}\n"
"\n"
"void OverriddenButton::on_clicked()\n"
"{\n"
"    std::cout &lt;&lt; \"Hello World\" &lt;&lt; std::endl;\n"
"\n"
"    // call the base class's version of the method:\n"
"    Gtk::Button::on_clicked();\n"
"}\n"

#: C/gtkmm-tutorial-in.xml:7769(para)
msgid ""
"Here we define a new class called <classname>OverriddenButton</classname>, "
"which inherits from <classname>Gtk::Button</classname>. The only thing we "
"change is the <methodname>on_clicked()</methodname> method, which is called "
"whenever <classname>Gtk::Button</classname> emits the <literal>clicked</"
"literal> signal. This method prints \"Hello World\" to <literal>stdout</"
"literal>, and then calls the original, overridden method, to let "
"<classname>Gtk::Button</classname> do what it would have done had we not "
"overridden."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7780(para)
msgid ""
"You don't always need to call the parent's method; there are times when you "
"might not want to. Note that we called the parent method <emphasis>after</"
"emphasis> writing \"Hello World\", but we could have called it before. In "
"this simple example, it hardly matters much, but there are times when it "
"will. With signals, it's not quite so easy to change details like this, and "
"you can do something here which you can't do at all with connected signal "
"handlers: you can call the parent method in the <emphasis>middle</emphasis> "
"of your custom code."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7794(title)
msgid "Binding extra arguments"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7802(programlisting)
#, no-wrap
msgid ""
"\n"
"m_button1.signal_clicked().connect( sigc::bind&lt;Glib::ustring&gt;( sigc::mem_fun(*this, &amp;HelloWorld::on_button_clicked), \"button 1\") );\n"
msgstr ""
"\n"
"m_button1.signal_clicked().connect( sigc::bind&lt;Glib::ustring&gt;( sigc::mem_fun(*this, &amp;HelloWorld::on_button_clicked), \"button 1\") );\n"

#: C/gtkmm-tutorial-in.xml:7809(programlisting)
#, no-wrap
msgid ""
"\n"
"virtual void on_button_clicked(Glib::ustring data);\n"
msgstr ""
"\n"
"virtual void on_button_clicked(Glib::ustring data);\n"

#: C/gtkmm-tutorial-in.xml:7795(para)
msgid ""
"If you use one signal handler to catch the same signal from several widgets, "
"you might like that signal handler to receive some extra information. For "
"instance, you might want to know which button was clicked. You can do this "
"with <function>sigc::bind()</function>. Here's some code from the <link "
"linkend=\"sec-helloworld2\">helloworld2</link> example, which you will "
"encounter later. <placeholder-1/> This says that we want the signal to send "
"an extra <classname>Glib::ustring</classname> argument to the signal "
"handler, and that the value of that argument should be \"button 1\". Of "
"course we will need to add that extra argument to the declaration of our "
"signal handler: <placeholder-2/> Of course, a normal \"clicked\" signal "
"handler would have no arguments."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7814(para)
msgid ""
"<function>sigc::bind()</function> is not commonly used, but you might find "
"it helpful sometimes. If you are familiar with <application>GTK+</"
"application> programming then you have probably noticed that this is similar "
"to the extra <literal>gpointer data</literal> arguments which all GTK+ "
"callbacks have. This is generally overused in <application>GTK+</"
"application> to pass information that should be stored as member data in a "
"derived widget, but widget derivation is very difficult in C. We have far "
"less need of this hack in <application>gtkmm</application>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7826(title)
msgid "X Event signals"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7827(para)
msgid ""
"The <classname>Widget</classname> class has some special signals which "
"correspond to the underlying X-Windows events. These are suffixed by "
"<literal>_event</literal>; for instance, <methodname>Widget::"
"signal_button_pressed_event()</methodname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7833(para)
msgid ""
"You might occasionally find it useful to handle X events when there's "
"something you can't accomplish with normal signals. <classname>Gtk::Button</"
"classname>, for example, does not send mouse-pointer coordinates with its "
"<literal>clicked</literal> signal, but you could handle "
"<literal>button_pressed_event</literal> if you needed this information. X "
"events are also often used to handle key-presses."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7842(para)
msgid ""
"These signals behave slightly differently. The value returned from the "
"signal handler indicates whether it has fully \"handled\" the event. If the "
"value is <literal>false</literal> then <application>gtkmm</application> will "
"pass the event on to the next signal handler. If the value is <literal>true</"
"literal> then no other signal handlers will need to be called."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7847(para)
msgid ""
"Handling an X event doesn't affect the Widget's other signals. If you handle "
"<literal>button_pressed_event</literal> for <classname>Gtk::Button</"
"classname>, you'll still be able to get the <literal>clicked</literal> "
"signal. They are emitted at (nearly) the same time."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7854(para)
msgid ""
"Note also that not all widgets receive all X events by default. To receive "
"additional X events, you can use <methodname>Gtk::Widget::set_events()</"
"methodname> before showing the widget, or <methodname>Gtk::Widget::add_events"
"()</methodname> after showing the widget. However, some widgets must first "
"be placed inside an <classname>EventBox</classname> widget. See the <link "
"linkend=\"chapter-widgets-without-xwindows\">Widgets Without X-Windows</"
"link> chapter."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7863(programlisting)
#, no-wrap
msgid ""
"\n"
"bool on_button_press(GdkEventButton* event);\n"
"Gtk::Button button(\"label\");\n"
"button.signal_button_press_event().connect( sigc::ptr_fun(&amp;on_button_press) );\n"
msgstr ""
"\n"
"bool on_button_press(GdkEventButton* event);\n"
"Gtk::Button button(\"label\");\n"
"button.signal_button_press_event().connect( sigc::ptr_fun(&amp;on_button_press) );\n"

#: C/gtkmm-tutorial-in.xml:7869(para)
msgid ""
"When the mouse is over the button and a mouse button is pressed, "
"<methodname>on_button_press()</methodname> will be called."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7874(para)
msgid ""
"<type>GdkEventButton</type> is a structure containing the event's "
"parameters, such as the coordinates of the mouse pointer at the time the "
"button was pressed. There are several different types of <type>GdkEvent</"
"type> structures for the various events."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7882(title)
msgid "Signal Handler sequence"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7890(programlisting)
#, no-wrap
msgid ""
"\n"
"button.signal_button_press_event().connect( sigc::ptr_fun(&amp;on_mywindow_button_press), false );\n"
msgstr ""
"\n"
"button.signal_button_press_event().connect( sigc::ptr_fun(&amp;on_mywindow_button_press), false );\n"

#: C/gtkmm-tutorial-in.xml:7883(para)
msgid ""
"By default, your signal handlers are called after any previously-connected "
"signal handlers. However, this can be a problem with the X Event signals. "
"For instance, the existing signal handlers, or the default signal handler, "
"might return <literal>true</literal> to stop other signal handlers from "
"being called. To specify that your signal handler should be called before "
"the other signal handlers, so that it will always be called, you can specify "
"<literal>false</literal> for the optional <literal>after</literal> "
"parameter. For instance, <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7894(para)
msgid ""
"The event is delivered first to the widget the event occurred in. If all "
"signal handlers in that widget return <literal>false</literal> (indicating "
"that the event has not been handled), then the signal will be propagated to "
"the parent widget and emitted there. This continues all the way up to the "
"top-level widget if no one handles the event."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7909(title)
msgid "Creating your own signals"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7910(para)
msgid ""
"Now that you've seen signals and signal handlers in <application>gtkmm</"
"application>, you might like to use the same technique to allow interaction "
"between your own classes. That's actually very simple by using the "
"<application>libsigc++</application> library directly."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7916(para)
msgid ""
"This isn't purely a <application>gtkmm</application> or GUI issue. "
"<application>gtkmm</application> uses <application>libsigc++</application> "
"to implement its proxy wrappers for the <application>GTK+</application> "
"signal system, but for new, non-GTK+ signals, you can create pure C++ "
"signals, using the <classname>sigc::signal&lt;&gt;</classname> template."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7927(programlisting)
#, no-wrap
msgid ""
"\n"
"sigc::signal&lt;void, bool, int&gt; signal_something;\n"
msgstr ""
"\n"
"sigc::signal&lt;void, bool, int&gt; signal_something;\n"

#: C/gtkmm-tutorial-in.xml:7923(para)
msgid ""
"For instance, to create a signal that sends 2 parameters, a <type>bool</"
"type> and an <type>int</type>, just declare a <classname>sigc::signal</"
"classname>, like so: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7935(programlisting)
#, no-wrap
msgid ""
"\n"
"class Server\n"
"{\n"
"public:\n"
"  //signal accessor:\n"
"  typedef sigc::signal&lt;void, bool, int&gt; type_signal_something;\n"
"  type_signal_something signal_something();\n"
"\n"
"protected:\n"
"  type_signal_something m_signal_something;\n"
"};\n"
"\n"
"Server::type_signal_something Server::signal_something()\n"
"{\n"
"  return m_signal_something;\n"
"}\n"
msgstr ""
"\n"
"class Server\n"
"{\n"
"public:\n"
"  //signal accessor:\n"
"  typedef sigc::signal&lt;void, bool, int&gt; type_signal_something;\n"
"  type_signal_something signal_something();\n"
"\n"
"protected:\n"
"  type_signal_something m_signal_something;\n"
"};\n"
"\n"
"Server::type_signal_something Server::signal_something()\n"
"{\n"
"  return m_signal_something;\n"
"}\n"

#: C/gtkmm-tutorial-in.xml:7931(para)
msgid ""
"You could just declare that signal as a public member variable, but some "
"people find that distasteful and prefer to make it available via an accessor "
"method, like so: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7957(programlisting)
#, no-wrap
msgid ""
"\n"
"server.signal_something().connect(\n"
"  sigc::mem_fun(client, &amp;Client::on_server_something) );\n"
msgstr ""
"\n"
"server.signal_something().connect(\n"
"  sigc::mem_fun(client, &amp;Client::on_server_something) );\n"

#: C/gtkmm-tutorial-in.xml:7954(para)
msgid ""
"You can then connect to the signal using the same syntax used when "
"connecting to <application>gtkmm</application> signals. For instance, "
"<placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7965(para)
msgid "This is a full working example that defines and uses custom signal."
msgstr ""

#: C/gtkmm-tutorial-in.xml:7979(title)
msgid "Comparison with other signalling systems"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7980(para)
msgid ""
"(An aside: <application>GTK+</application> calls this scheme \"signalling\"; "
"the sharp-eyed reader with GUI toolkit experience will note that this same "
"design is often seen under the name of \"broadcaster-listener\" (e.g., in "
"Metrowerks' PowerPlant framework for the Macintosh). It works in much the "
"same way: one sets up <literal>broadcasters</literal>, and then connects "
"<literal>listeners</literal> to them; the broadcaster keeps a list of the "
"objects listening to it, and when someone gives the broadcaster a message, "
"it calls all of its objects in its list with the message. In "
"<application>gtkmm</application>, signal objects play the role of "
"broadcasters, and slots play the role of listeners - sort of. More on this "
"later.)"
msgstr ""

#: C/gtkmm-tutorial-in.xml:7994(para)
msgid ""
"<application>gtkmm</application> signal handlers are strongly-typed, whereas "
"<application>GTK+</application> C code allows you to connect a callback with "
"the wrong number and type of arguments, leading to a segfault at runtime. "
"And, unlike <application>Qt</application>, <application>gtkmm</application> "
"achieves this without modifying the C++ language."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8000(para)
msgid ""
"Re. Overriding signal handlers: You can do this in the straight-C world of "
"GTK+ too; that's what GTK's object system is for. But in GTK+, you have to "
"go through some complicated procedures to get object-oriented features like "
"inheritance and overloading. In C++, it's simple, since those features are "
"supported in the language itself; you can let the compiler do the dirty work."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8008(para)
msgid ""
"This is one of the places where the beauty of C++ really comes out. One "
"wouldn't think of subclassing a GTK+ widget simply to override its action "
"method; it's just too much trouble. In GTK+, you almost always use signals "
"to get things done, unless you're writing a new widget. But because "
"overriding methods is so easy in C++, it's entirely practical - and sensible "
"- to subclass a button for that purpose."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8019(title)
msgid "<application>gtkmm</application> and Win32"
msgstr "<application>gtkmm</application> y Win32"

#: C/gtkmm-tutorial-in.xml:8020(para)
msgid ""
"One of the major advantages of <application>gtkmm</application> is that it "
"is crossplatform. <application>gtkmm</application> programs written on other "
"platforms such as GNU/Linux can generally be transferred to Windows (and "
"vice versa) with few modifications to the source."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8025(para)
msgid ""
"<application>gtkmm</application> currently works with the <ulink url="
"\"http://mingw.org/\">MingW/GCC3.4 compiler</ulink> and Microsoft Visual C++ "
"2005 or later (including the freely available express editions) on the "
"Windows platform. There is an <ulink url=\"ftp://ftp.gnome.org/pub/GNOME/"
"binaries/win32/gtkmm\"> installer</ulink> available for gtkmm on Microsoft "
"Windows. Refer to <ulink url=\"http://live.gnome.org/gtkmm/MSWindows/\"> "
"http://live.gnome.org/gtkmm/MSWindows</ulink> for instructions how to use it."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8037(title)
msgid "Building <application>gtkmm</application> on Win32"
msgstr "Construir aplicaciones <application>gtkmm</application> en Win32"

#: C/gtkmm-tutorial-in.xml:8038(para)
msgid ""
"Please see <ulink url=\"http://live.gnome.org/gtkmm/MSWindows/BuildingGtkmm"
"\">http://live.gnome.org/gtkmm/MSWindows/BuildingGtkmm</ulink> for "
"instructions on how to build gtkmm on Windws."
msgstr ""
"Consulte <ulink url=\"http://live.gnome.org/gtkmm/MSWindows/BuildingGtkmm"
"\">http://live.gnome.org/gtkmm/MSWindows/BuildingGtkmm</ulink> para obtener "
"instrucciones sobre cómo construir gtkmm en Windows."

#: C/gtkmm-tutorial-in.xml:8045(title)
msgid "Working with gtkmm's Source Code"
msgstr "Trabajar con el código fuente de gtkmm"

#: C/gtkmm-tutorial-in.xml:8046(para)
msgid ""
"If you are interested in helping out with the development of "
"<application>gtkmm</application>, or fixing a bug in <application>gtkmm</"
"application>, you'll probably need to build the development version of "
"<application>gtkmm</application>. However, you should not install a "
"development version over your stable version. Instead, you should install it "
"alongside your existing <application>gtkmm</application> installation, in a "
"separate path."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8053(para)
msgid ""
"The easiest way to do this is using <ulink url=\"http://developer.gnome.org/"
"jhbuild/unstable/\">jhbuild</ulink>. <application>jhbuild</application> is a "
"program that makes building GNOME software much easier by calculating "
"dependencies and building things in the correct order. This section will "
"give a brief explanation of how to set up <application>jhbuild</application> "
"to build and install <application>gtkmm</application> from the source "
"repository (git). For up-to-date information on <application>jhbuild</"
"application>, please refer to the <ulink url=\"http://developer.gnome.org/"
"jhbuild/unstable/\">jhbuild manual</ulink>. If you need assistance using "
"<application>jhbuild</application>, you should ask for help on the <ulink "
"url=\"http://mail.gnome.org/mailman/listinfo/gnome-love\">gnome-love mailing "
"list</ulink>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8069(para)
msgid ""
"Note that to build <application>gtkmm</application> from git, you'll often "
"need to build all of its dependencies from git as well. "
"<application>jhbuild</application> makes this easier than it would normally "
"be, but it will take quite a while to build and install them all. You will "
"probably encounter build problems, though these will usually be corrected "
"quickly if you report them."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8078(title)
msgid "Setting up jhbuild"
msgstr "Configurar JHBuild"

#: C/gtkmm-tutorial-in.xml:8079(para)
msgid ""
"To set up <application>jhbuild</application>, follow the basic installation "
"instructions from the <ulink url=\"http://developer.gnome.org/jhbuild/"
"unstable/\">jhbuild manual</ulink>. After you have installed "
"<application>jhbuild</application>, you should copy the sample "
"<application>jhbuild</application> configuration file into your home "
"directory by executing the following command from the <application>jhbuild</"
"application> directory: <screen>$ cp examples/sample.jhbuildrc ~/.jhbuildrc</"
"screen>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8094(programlisting)
#, no-wrap
msgid "moduleset = 'gnome-suites-core-deps-3.4'"
msgstr "moduleset = 'gnome-suites-core-deps-3.4'"

#: C/gtkmm-tutorial-in.xml:8089(para)
msgid ""
"The <application>gtkmm</application> module is defined in the "
"<filename>gnome-suites-core-deps-3.x.modules</filename> moduleset, so edit "
"your <filename>.jhbuildrc</filename> file and set your moduleset setting to "
"the latest version e.g. like so: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8101(programlisting)
#, no-wrap
msgid "modules = [ 'gtkmm' ]"
msgstr "modules = [ 'gtkmm' ]"

#: C/gtkmm-tutorial-in.xml:8096(para)
msgid ""
"After setting the correct moduleset, you need to tell <application>jhbuild</"
"application> which module or modules to build. To build <application>gtkmm</"
"application> and all of its dependencies, set <varname>modules</varname> "
"like so: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8103(para)
msgid ""
"You can build several modules by setting the <varname>modules</varname> "
"variable to a meta-package, e.g. <literal>meta-gnome-core</literal>, or "
"listing more than one module name. The <varname>modules</varname> variable "
"specifies which modules that will be built when you don't explicitly specify "
"anything on the command line. You can always build a different moduleset "
"later by specifying it on the commandline (e.g. <command>jhbuild build "
"gtkmm</command>)."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8113(title)
msgid "Setting a prefix"
msgstr "Establecer un prefijo"

#: C/gtkmm-tutorial-in.xml:8114(para)
msgid ""
"By default, <application>jhbuild</application>'s configuration is configured "
"to install all software built with <application>jhbuild</application> under "
"the <filename>/opt/gnome</filename> prefix. You can choose a different "
"prefix, but it is recommended that you keep this prefix different from other "
"software that you've installed (don't set it to <filename>/usr</filename>!) "
"If you've followed the jhbuild instructions then this prefix belongs to your "
"user, so you don't need to run jhbuild as <literal>root</literal>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8126(para)
msgid ""
"When you downloaded <application>jhbuild</application> from the git "
"repository, you got a number of <filename>.modules</filename> files, "
"specifying dependencies between modules. By default <application>jhbuild</"
"application> does not use the downloaded versions of these files, but reads "
"the latest versions in the git repository. This is usually what you want. If "
"you don't want it, use the <varname>use_local_modulesets</varname> variable "
"in <filename>.jhbuildrc</filename>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8137(title)
msgid ""
"Installing and Using the git version of <application>gtkmm</application>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8138(para)
msgid ""
"Once you've configured <application>jhbuild</application> as described "
"above, building <application>gtkmm</application> should be relatively "
"straightforward. The first time you run <application>jhbuild</application>, "
"you should run the following sequence of commands to ensure that "
"<application>jhbuild</application> has the required tools and verify that it "
"is set up correctly: <screen>$ jhbuild bootstrap\n"
"$ jhbuild sanitycheck</screen>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8149(title)
msgid ""
"Installing <application>gtkmm</application> with <application>jhbuild</"
"application>"
msgstr ""
"Instalar <application>gtkmm</application> con <application>jhbuild</"
"application>"

#: C/gtkmm-tutorial-in.xml:8150(para)
msgid ""
"If everything worked correctly, you should be able to build "
"<application>gtkmm</application> and all of its dependencies from git by "
"executing <command>jhbuild build</command> (or, if you didn't specify "
"<application>gtkmm</application> in the <varname>modules</varname> variable, "
"with the command <command>jhbuild build gtkmm</command>)."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8157(para)
msgid ""
"This command will build and install a series of modules and will probably "
"take quite a long time the first time through. After the first time, "
"however, it should go quite a bit faster since it only needs to rebuild "
"files that changed since the last build. Alternatively, after you've built "
"and installed <application>gtkmm</application> the first time, you can "
"rebuild <application>gtkmm</application> by itself (without rebuilding all "
"of its dependencies) with the command <command>jhbuild buildone gtkmm</"
"command>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8168(title)
msgid "Using the git version of <application>gtkmm</application>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8169(para)
msgid ""
"After you've installed the git version of <application>gtkmm</application>, "
"you're ready to start using and experimenting with it. In order to use the "
"new version of <application>gtkmm</application> you've just installed, you "
"need to set some environment variables so that your <filename>configure</"
"filename> script knows where to find the new libraries. Fortunately, "
"<application>jhbuild</application> offers an easy solution to this problem. "
"Executing the command <command>jhbuild shell</command> will start a new "
"shell with all of the correct environment variables set. Now if you re-"
"configure and build your project just as you usually do, it should link "
"against the newly installed libraries. To return to your previous "
"environment, simply exit the <application>jhbuild</application> shell."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8183(para)
msgid ""
"Once you've built your software, you'll need to run your program within the "
"jhbuild environment as well. To do this, you can again use the "
"<command>jhbuild shell</command> command to start a new shell with the "
"<application>jhbuild</application> environment set up. Alternatively, you "
"can execute a one-off command in the <application>jhbuild</application> "
"environment using the following command: <command>jhbuild run command-name</"
"command>. In this case, the command will be run with the correct environment "
"variables set, but will return to your previous environment after the "
"program exits."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8200(title)
msgid "Wrapping C Libraries with gmmproc"
msgstr "Envolver bibliotecas C con gmmproc"

#: C/gtkmm-tutorial-in.xml:8201(para)
msgid ""
"<application>gtkmm</application> uses the <command>gmmproc</command> tool to "
"generate most of its source code, using .defs files that define the APIs of "
"<classname>GObject</classname>-based libraries. So it's quite easy to create "
"additional gtkmm-style wrappers of other glib/GObject-based libraries."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8206(para)
msgid ""
"This involves a variety of tools, some of them crufty, but it does at least "
"work, and has been used successfully by several projects."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8211(title)
msgid "The build structure"
msgstr "La estructura de construcción"

#: C/gtkmm-tutorial-in.xml:8212(para)
msgid ""
"Generation of the source code for a gtkmm-style wrapper API requires use of "
"tools such as <command>gmmproc</command> and <filename>generate_wrap_init."
"pl</filename>. In theory you could write your own build files to use these "
"appropriately, but a much better option is to make use of the build "
"infrastructure provided by the mm-common module. To get started, it helps a "
"lot to pick an existing binding module as an example to look at."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8219(para)
msgid ""
"For instance, let's pretend that we are wrapping a C library called "
"libexample. It provides a <classname>GObject</classname>-based API with "
"types named, for instance, <classname>ExampleThing</classname> and "
"<classname>ExampleStuff</classname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8225(title)
msgid "Copying the skeleton project"
msgstr "Copiar el esqueleto del proyecto"

#: C/gtkmm-tutorial-in.xml:8230(programlisting)
#, no-wrap
msgid ""
"\n"
"  $ git clone git://git.gnome.org/mm-common\n"
"  $ cp -a mm-common/skeletonmm libsomethingmm\n"
msgstr ""
"\n"
"  $ git clone git://git.gnome.org/mm-common\n"
"  $ cp -a mm-common/skeletonmm libsomethingmm\n"

#: C/gtkmm-tutorial-in.xml:8227(para)
msgid ""
"Typically our wrapper library would be called libsomethingmm. We can start "
"by copying the <ulink url=\"http://git.gnome.org/cgit/mm-common/tree/"
"skeletonmm\">skeleton source tree</ulink> from the mm-common module. "
"<placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8240(para)
msgid "<filename>libsomethingmm</filename>: The top-level directory."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8242(para)
msgid ""
"<filename>libsomething</filename>: Contains the main include file and the "
"pkg-config .pc file."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8244(para)
msgid "<filename>src</filename>: Contains .hg and .ccg source files."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8245(para)
msgid ""
"<filename>libsomethingmm</filename>: Contains generated and hand-written .h "
"and .cc files."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8247(para)
msgid ""
"<filename>private</filename>: Contains generated <filename>*_p.h</filename> "
"files."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8235(para)
msgid ""
"This provides a directory structure for the source .hg and .ccg files and "
"the generated .h and .cc files, with <filename>filelist.am</filename> "
"Automake include files that can specify the various files in use, in terms "
"of generic Automake variables. The directory structure usually looks like "
"this, after we have renamed the directories appropriately: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8259(programlisting)
#, no-wrap
msgid ""
"\n"
"$ for f in $(find libsomethingmm -depth -name '*skeleton*'); do \\\n"
"    d=\"${f%/*}\"; b=\"${f##*/}\"; mv \"$f\" \"$d/${b//skeleton/libsomething}\"; \\\n"
"  done\n"
msgstr ""
"\n"
"$ for f in $(find libsomethingmm -depth -name '*skeleton*'); do \\\n"
"    d=\"${f%/*}\"; b=\"${f##*/}\"; mv \"$f\" \"$d/${b//skeleton/libsomething}\"; \\\n"
"  done\n"

#: C/gtkmm-tutorial-in.xml:8257(para)
msgid ""
"As well as renaming the directories, we should rename some of the source "
"files. For instance: <placeholder-1/> A number of the skeleton files must "
"still be filled in with project-specific content later."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8266(para)
msgid ""
"Note that files ending in <filename>.in</filename> will be used to generate "
"files with the same name but without the <filename>.in</filename> suffix, by "
"replacing some variables with actual values during the configure stage."
msgstr ""
"Tenga en cuenta que los archivos que terminan en <filename>.in</filename> se "
"utilizan para generar archivos con el mismo nombre pero sin el sufijo "
"<filename>.in</filename>, mediante la sustitución de algunas variables con "
"valores reales durante la fase de configuración."

#: C/gtkmm-tutorial-in.xml:8272(title)
msgid "Modifying build files"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8274(para)
msgid ""
"Now we edit the files to adapt them to our needs. You might prefer to use a "
"multiple-file search-replace utility for this, such as <command>regexxer</"
"command>. Note that nearly all of the files provided with the skeleton "
"source tree contain placeholder text. Thus, the substitutions should be "
"performed globally, and not be limited to the Automake and Autoconf files."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8278(para)
msgid ""
"All mentions of <varname>skeleton</varname> should be replaced by the "
"correct name of the C library you are wrapping, such as \"something\" or "
"\"libsomething\". In the same manner, all instances of <varname>SKELETON</"
"varname> should be replaced by \"SOMETHING\" or \"LIBSOMETHING\", and all "
"occurrences of <varname>Skeleton</varname> changed to \"Something\"."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8282(para)
msgid ""
"Likewise, replace all instances of <varname>Joe Hacker</varname> by the name "
"of the intended copyright holder, which is probably you. Do the same for the "
"<varname>joe@example.com</varname> email address."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8287(title)
msgid "configure.ac"
msgstr "configure.ac"

#: C/gtkmm-tutorial-in.xml:8290(para)
msgid ""
"The <function>AC_CONFIG_SRCDIR()</function> line must mention a file in our "
"source tree. We can edit this later if we don't yet know the names of any of "
"the files that we will create."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8293(para)
msgid ""
"It is common for binding modules to track the version number of the library "
"they are wrapping. So, for instance, if the C library is at version 1.23.4, "
"then the initial version of the binding module would be 1.23.0. However, "
"avoid starting with an even minor version number as that usually indicates a "
"stable release."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8298(para)
msgid ""
"The <function>AC_CONFIG_HEADERS()</function> line is used to generate two or "
"more configuration header files. The first header file in the list contains "
"all configuration macros which are set during the configure run. The "
"remaining headers in the list contain only a subset of configuration macros "
"and their corresponding <filename>configh.h.in</filename> file will not be "
"autogenerated. The reason for this separation is that the namespaced "
"configuration headers are installed with your library and define publically "
"visible macros."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8306(para)
msgid ""
"The <function>AC_SUBST([SOMETHINGMM_MODULES], ['...'])</function> line may "
"need to be modified to check for the correct dependencies."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8308(para)
msgid ""
"The <function>AC_CONFIG_FILES()</function> block must mention the correct "
"directory names, as described above."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8288(para)
msgid "In <filename>configure.ac</filename>, <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8315(title)
msgid "Makefile.am files"
msgstr "Archivos Makefile.am"

#: C/gtkmm-tutorial-in.xml:8318(para)
msgid ""
"In <filename>skeleton/src/Makefile.am</filename> we must mention the correct "
"values for the generic variables that are used elsewhere in the build system:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8323(varname)
msgid "binding_name"
msgstr "binding_name"

#: C/gtkmm-tutorial-in.xml:8324(para)
msgid "The name of the library, such as libsomethingmm."
msgstr "El nombre de la biblioteca, por ejemplo libalgomm."

#: C/gtkmm-tutorial-in.xml:8328(varname)
msgid "wrap_init_flags"
msgstr "wrap_init_flags"

#: C/gtkmm-tutorial-in.xml:8329(para)
msgid ""
"Additional command-line flags passed to the <filename>generate_wrap_init.pl</"
"filename> script, such as the C++ namespace and the parent directory prefix "
"of include files."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8336(para)
msgid ""
"In <filename>skeleton/skeletonmm/Makefile.am</filename> we must mention the "
"correct values for the generic variables that are used elsewhere in the "
"build system:"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8341(varname)
msgid "lib_LTLIBRARIES"
msgstr "lib_LTLIBRARIES"

#: C/gtkmm-tutorial-in.xml:8342(para)
msgid ""
"This variable must mention the correct library name, and this library name "
"must be used to form the <varname>_SOURCES</varname>, <varname>_LDFLAGS</"
"varname>, and <varname>_LIBADD</varname> variable names. It is permissible "
"to use variables substituted by <filename>configure</filename> like "
"<varname>@SOMETHINGMM_API_VERSION@</varname> as part of the variable names."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8351(varname)
msgid "AM_CPPFLAGS"
msgstr "AM_CPPFLAGS"

#: C/gtkmm-tutorial-in.xml:8352(para)
msgid "The command line options passed to the C preprocessor."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8356(varname)
msgid "AM_CXXFLAGS"
msgstr "AM_CXXFLAGS"

#: C/gtkmm-tutorial-in.xml:8357(para)
msgid "The command line options passed to the C++ compiler."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8316(para)
msgid ""
"Next we must adapt the various <filename>Makefile.am</filename> files: "
"<placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8367(title)
msgid "Creating .hg and .ccg files"
msgstr "Crear archivos .hg y .ccg"

#: C/gtkmm-tutorial-in.xml:8368(para)
msgid ""
"We should now create our first <filename>.hg</filename> and <filename>.ccg</"
"filename> files, to wrap one of the objects in the C library. One pair of "
"example source files already exists: <filename>skeleton.ccg</filename> and "
"<filename>skeleton.hg</filename>. Create copies of these files as necessary."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8372(para)
msgid ""
"We must mention all of our <filename>.hg</filename> and <filename>.ccg</"
"filename> files in the <filename>skeleton/src/filelist.am</filename> file, "
"typically in the <varname>files_hg</varname> variable."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8376(para)
msgid ""
"Any additional non-generated <filename>.h</filename> and <filename>.cc</"
"filename> source files may be placed in <filename>skeleton/skeletonmm/</"
"filename> and listed in <filename>skeleton/skeletonmm/filelist.am</"
"filename>, typically in the <varname>files_extra_h</varname> and "
"<varname>files_extra_cc</varname> variables."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8382(para)
msgid ""
"In the <link linkend=\"sec-wrapping-hg-files\">.hg and .ccg files</link> "
"section you can learn about the syntax used in these files."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8389(title)
msgid "Generating the .defs files."
msgstr "Generar los archivos .defs."

#: C/gtkmm-tutorial-in.xml:8393(para)
msgid "objects (GObjects, widgets, interfaces, boxed-types and plain structs)"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8394(para)
msgid "functions"
msgstr "funciones"

#: C/gtkmm-tutorial-in.xml:8395(para)
msgid "enums"
msgstr "enums"

#: C/gtkmm-tutorial-in.xml:8396(para)
msgid "signals"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8397(para)
msgid "properties"
msgstr "propiedades"

#: C/gtkmm-tutorial-in.xml:8398(para)
msgid "vfuncs"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8390(para)
msgid ""
"The <filename>.defs</filename> files are text files, in a lisp format, that "
"describe the API of a C library, including its <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8407(filename)
msgid "gtk.defs"
msgstr "gtk.defs"

#: C/gtkmm-tutorial-in.xml:8408(para)
msgid "Includes the other files."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8411(filename)
msgid "gtk_methods.defs"
msgstr "gtk_methods.defs"

#: C/gtkmm-tutorial-in.xml:8412(para)
msgid "Objects and functions."
msgstr "Objetos y funciones."

#: C/gtkmm-tutorial-in.xml:8415(filename)
msgid "gtk_enums.defs"
msgstr "gtk_enums.defs"

#: C/gtkmm-tutorial-in.xml:8416(para)
msgid "Enumerations."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8419(filename)
msgid "gtk_signals.defs"
msgstr "gtk_signals.defs"

#: C/gtkmm-tutorial-in.xml:8420(para)
msgid "Signals and properties."
msgstr "Señales y propiedades."

#: C/gtkmm-tutorial-in.xml:8423(filename)
msgid "gtk_vfuncs.defs"
msgstr "gtk_vfuncs.defs"

#: C/gtkmm-tutorial-in.xml:8424(para)
msgid "vfuncs (function pointer member fields in structs), written by hand."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8401(para)
msgid ""
"At the moment, we have separate tools for generating different parts of "
"these <filename>.defs</filename>, so we split them up into separate files. "
"For instance, in the <filename>gtk/src</filename> directory of the "
"<application>gtkmm</application> sources, you will find these files: "
"<placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8430(title)
msgid "Generating the methods .defs"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8434(programlisting)
#, no-wrap
msgid ""
"\n"
"$ ./h2def.py /usr/include/gtk-3.0/gtk/*.h &gt; gtk_methods.defs\n"
msgstr ""
"\n"
"$ ./h2def.py /usr/include/gtk-3.0/gtk/*.h &gt; gtk_methods.defs\n"

#: C/gtkmm-tutorial-in.xml:8431(para)
msgid ""
"This <filename>.defs</filename> file describes objects and their functions. "
"It is generated by the <command>h2def.py</command> script which you can find "
"in glibmm's <filename>tools/defs_gen</filename> directory. For instance, "
"<placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8441(title)
msgid "Generating the enums .defs"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8445(programlisting)
#, no-wrap
msgid ""
"\n"
"$ ./enum.pl /usr/include/gtk-3.0/gtk/*.h &gt; gtk_enums.defs\n"
msgstr ""
"\n"
"$ ./enum.pl /usr/include/gtk-3.0/gtk/*.h &gt; gtk_enums.defs\n"

#: C/gtkmm-tutorial-in.xml:8442(para)
msgid ""
"This <filename>.defs</filename> file describes enum types and their possible "
"values. It is generated by the <filename>enum.pl</filename> script which you "
"can find in glibmm's <filename>tools</filename> directory. For instance, "
"<placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8452(title)
msgid "Generating the signals and properties .defs"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8457(programlisting)
#, no-wrap
msgid ""
"\n"
"$ cd tools/extra_defs_gen\n"
"$ ./generate_extra_defs &gt; gtk_signals.defs\n"
msgstr ""
"\n"
"$ cd tools/extra_defs_gen\n"
"$ ./generate_extra_defs &gt; gtk_signals.defs\n"

#: C/gtkmm-tutorial-in.xml:8453(para)
msgid ""
"This <filename>.defs</filename> file describes signals and properties. It is "
"generated by the special <filename>extra_defs</filename> utility that is in "
"every wrapping project, such as <filename>gtkmm/tools/extra_defs_gen/</"
"filename>. For instance <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8462(para)
msgid ""
"You must edit the source code of your own <filename>generate_extra_defs</"
"filename> tool in order to generate the <filename>.defs</filename> for the "
"GObject C types that you wish to wrap. In the skeleton source tree, the "
"source file is named <filename>codegen/extradefs/"
"generate_extra_defs_skeleton.cc</filename>. If not done so already, the file "
"should be renamed, with the basename of your new binding substituted for the "
"<varname>skeleton</varname> placeholder. The <filename>codegen/Makefile.am</"
"filename> file should also mention the new source filename."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8471(programlisting)
#, no-wrap
msgid ""
"\n"
"#include &lt;libsomething.h&gt;\n"
"\n"
"int main(int, char**)\n"
"{\n"
"  something_init();\n"
"\n"
"  std::cout &lt;&lt; get_defs(EXAMPLE_TYPE_SOMETHING)\n"
"            &lt;&lt; get_defs(EXAMPLE_TYPE_THING);\n"
"  return 0;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;libsomething.h&gt;\n"
"\n"
"int main(int, char**)\n"
"{\n"
"  something_init();\n"
"\n"
"  std::cout &lt;&lt; get_defs(EXAMPLE_TYPE_SOMETHING)\n"
"            &lt;&lt; get_defs(EXAMPLE_TYPE_THING);\n"
"  return 0;\n"
"}\n"

#: C/gtkmm-tutorial-in.xml:8469(para)
msgid ""
"Then edit the <filename>.cc</filename> file to specify the correct types. "
"For instance, your <function>main()</function> function might look like "
"this: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8487(title)
msgid "Writing the vfuncs .defs"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8488(para)
msgid ""
"This <filename>.defs</filename> file describes virtual functions (vfuncs). "
"It must be written by hand. There is no skeleton to start from. You can look "
"at <application>gtkmm</application>'s <filename>gtk/src/gtk_vfuncs.defs</"
"filename> file."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8498(title)
msgid "The .hg and .ccg files"
msgstr "Los archivos .hg y .ccg"

#: C/gtkmm-tutorial-in.xml:8499(para)
msgid ""
"The .hg and .ccg source files are very much like .h and .cc C++ source "
"files, but they contain extra macros, such as <function>_CLASS_GOBJECT()</"
"function> and <function>_WRAP_METHOD()</function>, from which "
"<command>gmmproc</command> generates appropriate C++ source code, usually at "
"the same position in the header. Any additional C++ source code will be "
"copied verbatim into the corresponding .h or .cc file."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8512(programlisting)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtkmm/bin.h&gt;\n"
"#include &lt;gtkmm/activatable.h&gt;\n"
"#include &lt;gtkmm/stockid.h&gt;\n"
"_DEFS(gtkmm,gtk)\n"
"_PINCLUDE(gtkmm/private/bin_p.h)\n"
"\n"
"namespace Gtk\n"
"{\n"
"\n"
"class Button\n"
"  : public Bin,\n"
"    public Activatable\n"
"{\n"
"  _CLASS_GTKOBJECT(Button,GtkButton,GTK_BUTTON,Gtk::Bin,GtkBin)\n"
"  _IMPLEMENTS_INTERFACE(Activatable)\n"
"public:\n"
"\n"
"  _CTOR_DEFAULT\n"
"  explicit Button(const Glib::ustring&amp; label, bool mnemonic = false);\n"
"  explicit Button(const StockID&amp; stock_id);\n"
"\n"
"  _WRAP_METHOD(void set_label(const Glib::ustring&amp; label), gtk_button_set_label)\n"
"\n"
"  ...\n"
"\n"
"  _WRAP_SIGNAL(void clicked(), \"clicked\")\n"
"\n"
"  ...\n"
"\n"
"  _WRAP_PROPERTY(\"label\", Glib::ustring)\n"
"};\n"
"\n"
"} // namespace Gtk\n"
msgstr ""
"\n"
"#include &lt;gtkmm/bin.h&gt;\n"
"#include &lt;gtkmm/activatable.h&gt;\n"
"#include &lt;gtkmm/stockid.h&gt;\n"
"_DEFS(gtkmm,gtk)\n"
"_PINCLUDE(gtkmm/private/bin_p.h)\n"
"\n"
"namespace Gtk\n"
"{\n"
"\n"
"class Button\n"
"  : public Bin,\n"
"    public Activatable\n"
"{\n"
"  _CLASS_GTKOBJECT(Button,GtkButton,GTK_BUTTON,Gtk::Bin,GtkBin)\n"
"  _IMPLEMENTS_INTERFACE(Activatable)\n"
"public:\n"
"\n"
"  _CTOR_DEFAULT\n"
"  explicit Button(const Glib::ustring&amp; label, bool mnemonic = false);\n"
"  explicit Button(const StockID&amp; stock_id);\n"
"\n"
"  _WRAP_METHOD(void set_label(const Glib::ustring&amp; label), gtk_button_set_label)\n"
"\n"
"  ...\n"
"\n"
"  _WRAP_SIGNAL(void clicked(), \"clicked\")\n"
"\n"
"  ...\n"
"\n"
"  _WRAP_PROPERTY(\"label\", Glib::ustring)\n"
"};\n"
"\n"
"} // namespace Gtk\n"

#: C/gtkmm-tutorial-in.xml:8507(para)
msgid ""
"A .hg file will typically include some headers and then declare a class, "
"using some macros to add API or behaviour to this class. For instance, "
"gtkmm's <filename>button.hg</filename> looks roughly like this: "
"<placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8551(function)
msgid "_DEFS()"
msgstr "_DEFS()"

#: C/gtkmm-tutorial-in.xml:8552(para)
msgid ""
"Specifies the destination directory for generated sources, and the name of "
"the main .defs file that <command>gmmproc</command> should parse."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8555(function)
msgid "_PINCLUDE()"
msgstr "_PINCLUDE()"

#: C/gtkmm-tutorial-in.xml:8556(para)
msgid ""
"Tells <command>gmmproc</command> to include a header from the generated "
"private/button_p.h file."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8559(function)
msgid "_CLASS_GTKOBJECT()"
msgstr "_CLASS_GTKOBJECT()"

#: C/gtkmm-tutorial-in.xml:8560(para)
msgid ""
"Tells <command>gmmproc</command> to add some typedefs, constructors, and "
"standard methods to this class, as appropriate when wrapping a widget."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8563(function)
msgid "_IMPLEMENTS_INTERFACE()"
msgstr "_IMPLEMENTS_INTERFACE()"

#: C/gtkmm-tutorial-in.xml:8564(para)
msgid ""
"Tells <command>gmmproc</command> to add initialization code for the "
"interface."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8567(function) C/gtkmm-tutorial-in.xml:8813(title)
msgid "_CTOR_DEFAULT"
msgstr "_CTOR_DEFAULT"

#: C/gtkmm-tutorial-in.xml:8568(para)
msgid "Add a default constructor."
msgstr "Añadir un constructor predeterminado."

#: C/gtkmm-tutorial-in.xml:8571(term)
msgid ""
"<function>_WRAP_METHOD()</function>, <function>_WRAP_SIGNAL()</function>, "
"and <function>_WRAP_PROPERTY()</function>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8574(para)
msgid "Add methods to wrap parts of the C API."
msgstr "Añadir métodos para envolver las partes de la API de C."

#: C/gtkmm-tutorial-in.xml:8548(para)
msgid "The macros in this example do the following: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8581(programlisting)
#, no-wrap
msgid ""
"\n"
"$ cd gtk/src\n"
"$ /usr/lib/glibmm-2.4/proc/gmmproc -I ../../tools/m4 --defs . button . ./../gtkmm\n"
msgstr ""
"\n"
"$ cd gtk/src\n"
"$ /usr/lib/glibmm-2.4/proc/gmmproc -I ../../tools/m4 --defs . button . ./../gtkmm\n"

#: C/gtkmm-tutorial-in.xml:8578(para)
msgid ""
"The .h and .cc files will be generated from the .hg and .ccg files by "
"processing them with <command>gmmproc</command> like so, though this happens "
"automatically when using the above build structure: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8586(para)
msgid ""
"Notice that we provided <command>gmmproc</command> with the path to the .m4 "
"convert files, the path to the .defs file, the name of a .hg file, the "
"source directory, and the destination directory."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8589(para)
msgid ""
"You should avoid including the C header from your C++ header, to avoid "
"polluting the global namespace, and to avoid exporting unnecessary public "
"API. But you will need to include the necessary C headers from your .ccg "
"file."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8594(para)
msgid "The macros are explained in more detail in the following sections."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8597(title)
msgid "m4 Conversions"
msgstr "Conversiones m4"

#: C/gtkmm-tutorial-in.xml:8604(programlisting)
#, no-wrap
msgid ""
"\n"
"_CONVERSION(`GtkTreeView*',`TreeView*',`Glib::wrap($3)')\n"
msgstr ""
"\n"
"_CONVERSION(`GtkTreeView*',`TreeView*',`Glib::wrap($3)')\n"

#: C/gtkmm-tutorial-in.xml:8598(para)
msgid ""
"The macros that you use in the .hg and .ccg files often need to know how to "
"convert a C++ type to a C type, or vice-versa. gmmproc takes this "
"information from an .m4 file in your <literal>tools/m4/</literal> directory. "
"This allows it to call a C function in the implementation of your C++ "
"method, passing the appropriate parameters to that C functon. For instance, "
"this tells gmmproc how to convert a GtkTreeView pointer to a Gtk::TreeView "
"pointer: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8609(para)
msgid ""
"<literal>$3</literal> will be replaced by the parameter name when this "
"conversion is used by gmmproc."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8616(programlisting)
#, no-wrap
msgid ""
"\n"
"_CONVERSION(`PrintSettings&amp;',`GtkPrintSettings*',__FR2P)\n"
"_CONVERSION(`const PrintSettings&amp;',`GtkPrintSettings*',__FCR2P)\n"
"_CONVERSION(`const Glib::RefPtr&lt;Printer&gt;&amp;',`GtkPrinter*',__CONVERT_REFPTR_TO_P($3))\n"
msgstr ""
"\n"
"_CONVERSION(`PrintSettings&amp;',`GtkPrintSettings*',__FR2P)\n"
"_CONVERSION(`const PrintSettings&amp;',`GtkPrintSettings*',__FCR2P)\n"
"_CONVERSION(`const Glib::RefPtr&lt;Printer&gt;&amp;',`GtkPrinter*',__CONVERT_REFPTR_TO_P($3))\n"

#: C/gtkmm-tutorial-in.xml:8613(para)
msgid ""
"Some extra macros make this easier and consistent. Look in gtkmm's .m4 files "
"for examples. For instance: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8625(title)
msgid "m4 Initializations"
msgstr "inicializaciones de m4"

#: C/gtkmm-tutorial-in.xml:8626(para)
msgid ""
"Often when wrapping methods, it is desirable to store the return of the C "
"function in what is called an output parameter. In this case, the C++ method "
"returns <type>void</type> but an output parameter in which to store the "
"value of the C function is included in the argument list of the C++ method. "
"gmmproc allows such functionality, but appropriate inizialization macros "
"must be included to tell gmmproc how to initialize the C++ parameter from "
"the return of the C function."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8641(programlisting)
#, no-wrap
msgid ""
"\n"
"_INITIALIZATION(`Gtk::Widget&amp;',`GtkWidget*',`$3 = Glib::wrap($4)')\n"
msgstr ""
"\n"
"_INITIALIZATION(`Gtk::Widget&amp;',`GtkWidget*',`$3 = Glib::wrap($4)')\n"

#: C/gtkmm-tutorial-in.xml:8635(para)
msgid ""
"For example, if there was a C function that returned a <type>GtkWidget*</"
"type> and for some reason, instead of having the C++ method also return the "
"widget, it was desirable to have the C++ method place the widget in a "
"specified output parameter, an initialization macro such as the following "
"would be necessary: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8646(para)
msgid ""
"<literal>$3</literal> will be replaced by the output parameter name of the C+"
"+ method and <literal>$4</literal> will be replaced by the return of the C "
"function when this initialization is used by gmmproc. For convenience, "
"<literal>$1</literal> will also be replaced by the C++ type without the "
"ampersand (&amp;) and <literal>$2</literal> will be replaced by the C type."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8657(title)
msgid "Class macros"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8658(para)
msgid ""
"The class macro declares the class itself and its relationship with the "
"underlying C type. It generates some internal constructors, the member "
"<varname>gobject_</varname>, typedefs, the <function>gobj()</function> "
"accessors, type registration, and the <function>Glib::wrap()</function> "
"method, among other things."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8663(para)
msgid ""
"Other macros, such as <function>_WRAP_METHOD()</function> and "
"<function>_WRAP_SIGNAL()</function> may only be used after a call to a "
"<function>_CLASS_*</function> macro."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8668(title)
msgid "_CLASS_GOBJECT"
msgstr "_CLASS_GOBJECT"

#: C/gtkmm-tutorial-in.xml:8669(para)
msgid ""
"This macro declares a wrapper for a type that is derived from "
"<classname>GObject</classname>, but whose wrapper is not derived from "
"<classname>Gtk::Object</classname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8672(function)
msgid ""
"_CLASS_GOBJECT( C++ class, C class, C casting macro, C++ base class, C base "
"class )"
msgstr ""
"_CLASS_GOBJECT( C++ class, C class, C casting macro, C++ base class, C base "
"class )"

#: C/gtkmm-tutorial-in.xml:8674(programlisting)
#, no-wrap
msgid ""
"\n"
"_CLASS_GOBJECT(AccelGroup, GtkAccelGroup, GTK_ACCEL_GROUP, Glib::Object, GObject)\n"
msgstr ""
"\n"
"_CLASS_GOBJECT(AccelGroup, GtkAccelGroup, GTK_ACCEL_GROUP, Glib::Object, GObject)\n"

#: C/gtkmm-tutorial-in.xml:8673(para)
msgid "For instance, from <filename>accelgroup.hg</filename>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8681(title)
msgid "_CLASS_GTKOBJECT"
msgstr "_CLASS_GTKOBJECT"

#: C/gtkmm-tutorial-in.xml:8682(para)
msgid ""
"This macro declares a wrapper for a type whose wrapper is derived from "
"<classname>Gtk::Object</classname>, such as a widget or dialog."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8684(function)
msgid ""
"_CLASS_GTKOBJECT( C++ class, C class, C casting macro, C++ base class, C "
"base class )"
msgstr ""
"_CLASS_GTKOBJECT( C++ class, C class, C casting macro, C++ base class, C "
"base class )"

#: C/gtkmm-tutorial-in.xml:8686(programlisting)
#, no-wrap
msgid ""
"\n"
"_CLASS_GTKOBJECT(Button, GtkButton, GTK_BUTTON, Gtk::Bin, GtkBin)\n"
msgstr ""
"\n"
"_CLASS_GTKOBJECT(Button, GtkButton, GTK_BUTTON, Gtk::Bin, GtkBin)\n"

#: C/gtkmm-tutorial-in.xml:8685(para) C/gtkmm-tutorial-in.xml:9086(para)
#: C/gtkmm-tutorial-in.xml:9147(para) C/gtkmm-tutorial-in.xml:9225(para)
msgid "For instance, from <filename>button.hg</filename>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8690(para)
msgid ""
"You will typically use this macro when the class already derives from Gtk::"
"Object. For instance, you will use it when wrapping a GTK+ Widget, because "
"Gtk::Widget derives from Gtk::Object."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8691(para)
msgid ""
"You might also derive non-widget classes from Gtk::Object so they can be "
"used without <classname>Glib::RefPtr</classname>. For isntance, they could "
"then be instantiated with <function>Gtk::manage()</function> or on the stack "
"as a member variable. This is convenient, but you should use this only when "
"you are sure that true reference-counting is not needed. We consider it "
"useful for widgets."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8695(title)
msgid "_CLASS_BOXEDTYPE"
msgstr "_CLASS_BOXEDTYPE"

#: C/gtkmm-tutorial-in.xml:8696(para)
msgid ""
"This macro declares a wrapper for a non-<classname>GObject</classname> "
"struct, registered with <function>g_boxed_type_register_static()</function>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8699(function)
msgid ""
"_CLASS_BOXEDTYPE( C++ class, C class, new function, copy function, free "
"function )"
msgstr ""
"_CLASS_BOXEDTYPE( C++ class, C class, new function, copy function, free "
"function )"

#: C/gtkmm-tutorial-in.xml:8701(programlisting)
#, no-wrap
msgid ""
"\n"
"_CLASS_BOXEDTYPE(Color, GdkColor, NONE, gdk_color_copy, gdk_color_free)\n"
msgstr ""
"\n"
"_CLASS_BOXEDTYPE(Color, GdkColor, NONE, gdk_color_copy, gdk_color_free)\n"

#: C/gtkmm-tutorial-in.xml:8700(para)
msgid "For instance, for <classname>Gdk::Color</classname>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8708(title)
msgid "_CLASS_BOXEDTYPE_STATIC"
msgstr "_CLASS_BOXEDTYPE_STATIC"

#: C/gtkmm-tutorial-in.xml:8709(para)
msgid ""
"This macro declares a wrapper for a simple assignable struct such as "
"<classname>GdkRectangle</classname>. It is similar to "
"<function>_CLASS_BOXEDTYPE</function>, but the C struct is not allocated "
"dynamically."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8713(function)
msgid "_CLASS_BOXEDTYPE_STATIC( C++ class, C class )"
msgstr "_CLASS_BOXEDTYPE_STATIC( C++ class, C class )"

#: C/gtkmm-tutorial-in.xml:8715(programlisting)
#, no-wrap
msgid ""
"\n"
"_CLASS_BOXEDTYPE_STATIC(Rectangle, GdkRectangle)\n"
msgstr ""
"\n"
"_CLASS_BOXEDTYPE_STATIC(Rectangle, GdkRectangle)\n"

#: C/gtkmm-tutorial-in.xml:8714(para)
msgid ""
"For instance, for <classname>Gdk::Rectangle</classname>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8722(title)
msgid "_CLASS_OPAQUE_COPYABLE"
msgstr "_CLASS_OPAQUE_COPYABLE"

#: C/gtkmm-tutorial-in.xml:8723(para)
msgid ""
"This macro declares a wrapper for an opaque struct that has copy and free "
"functions. The new, copy and free functions will be used to instantiate the "
"default constructor, copy constructor and destructor."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8726(function)
msgid ""
"_CLASS_OPAQUE_COPYABLE( C++ class, C class, new function, copy function, "
"free function )"
msgstr ""
"_CLASS_OPAQUE_COPYABLE( C++ class, C class, new function, copy function, "
"free function )"

#: C/gtkmm-tutorial-in.xml:8728(programlisting)
#, no-wrap
msgid ""
"\n"
"_CLASS_OPAQUE_COPYABLE(StockItem, GtkStockItem, NONE, gtk_stock_item_copy, gtk_stock_item_free)\n"
msgstr ""
"\n"
"_CLASS_OPAQUE_COPYABLE(StockItem, GtkStockItem, NONE, gtk_stock_item_copy, gtk_stock_item_free)\n"

#: C/gtkmm-tutorial-in.xml:8727(para)
msgid "For instance, from <filename>stockitem.hg</filename>: <placeholder-1/>"
msgstr "Por ejemplo, desde <filename>stockitem.hg</filename>: <placeholder-1/>"

#: C/gtkmm-tutorial-in.xml:8735(title)
msgid "_CLASS_OPAQUE_REFCOUNTED"
msgstr "_CLASS_OPAQUE_REFCOUNTED"

#: C/gtkmm-tutorial-in.xml:8736(para)
msgid ""
"This macro declares a wrapper for a reference-counted opaque struct. The C++ "
"wrapper cannot be directly instantiated and can only be used with "
"<classname>Glib::RefPtr</classname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8739(function)
msgid ""
"_CLASS_OPAQUE_REFCOUNTED( C++ class, C class, new function, ref function, "
"unref function )"
msgstr ""
"_CLASS_OPAQUE_REFCOUNTED( C++ class, C class, new function, ref function, "
"unref function )"

#: C/gtkmm-tutorial-in.xml:8741(programlisting)
#, no-wrap
msgid ""
"\n"
"_CLASS_OPAQUE_REFCOUNTED(Coverage, PangoCoverage, pango_coverage_new, pango_coverage_ref, pango_coverage_unref)\n"
msgstr ""
"\n"
"_CLASS_OPAQUE_REFCOUNTED(Coverage, PangoCoverage, pango_coverage_new, pango_coverage_ref, pango_coverage_unref)\n"

#: C/gtkmm-tutorial-in.xml:8740(para)
msgid ""
"For instance, for <classname>Pango::Coverage</classname>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8748(title)
msgid "_CLASS_GENERIC"
msgstr "_CLASS_GENERIC"

#: C/gtkmm-tutorial-in.xml:8749(para)
msgid ""
"This macro can be used to wrap structs which don't fit into any specialized "
"category."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8751(function)
msgid "_CLASS_GENERIC( C++ class, C class )"
msgstr "_CLASS_GENERIC( C++ class, C class )"

#: C/gtkmm-tutorial-in.xml:8753(programlisting)
#, no-wrap
msgid ""
"\n"
"_CLASS_GENERIC(AttrIter, PangoAttrIterator)\n"
msgstr ""
"\n"
"_CLASS_GENERIC(AttrIter, PangoAttrIterator)\n"

#: C/gtkmm-tutorial-in.xml:8752(para)
msgid ""
"For instance, for <classname>Pango::AttrIter</classname>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8760(title)
msgid "_CLASS_INTERFACE"
msgstr "_CLASS_INTERFACE"

#: C/gtkmm-tutorial-in.xml:8761(para)
msgid ""
"This macro declares a wrapper for a type that is derived from "
"<classname>GTypeInterface</classname>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8764(function)
msgid ""
"_CLASS_INTERFACE( C++ class, C class, C casting macro, C interface struct, "
"Base C++ class (optional), Base C class (optional) )"
msgstr ""
"_CLASS_INTERFACE( C++ class, C class, C casting macro, C interface struct, "
"Base C++ class (optional), Base C class (optional) )"

#: C/gtkmm-tutorial-in.xml:8767(programlisting)
#, no-wrap
msgid ""
"\n"
"_CLASS_INTERFACE(CellEditable, GtkCellEditable, GTK_CELL_EDITABLE, GtkCellEditableIface)\n"
msgstr ""
"\n"
"_CLASS_INTERFACE(CellEditable, GtkCellEditable, GTK_CELL_EDITABLE, GtkCellEditableIface)\n"

#: C/gtkmm-tutorial-in.xml:8765(para)
msgid ""
"For instance, from <filename>celleditable.hg</filename>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8774(programlisting)
#, no-wrap
msgid ""
"\n"
"_CLASS_INTERFACE(LoadableIcon, GLoadableIcon, G_LOADABLE_ICON, GLoadableIconIface, Icon, GIcon)\n"
msgstr ""
"\n"
"_CLASS_INTERFACE(LoadableIcon, GLoadableIcon, G_LOADABLE_ICON, GLoadableIconIface, Icon, GIcon)\n"

#: C/gtkmm-tutorial-in.xml:8771(para)
msgid ""
"Two extra parameters are optional, for the case that the interface derives "
"from another interface, which should be the case when the GInterface has "
"another GInterface as a prerequisitite. For instance, from "
"<filename>loadableicon.hg</filename>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8783(title)
msgid "Constructor macros"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8784(para)
msgid ""
"The <function>_CTOR_DEFAULT()</function> and <function>_WRAP_CTOR()</"
"function> macros add constructors, wrapping the specified <function>*_new()</"
"function> C functions. These macros assume that the C object has properties "
"with the same names as the function parameters, as is usually the case, so "
"that it can supply the parameters directly to a <function>g_object_new()</"
"function> call. These constructors never actually call the <function>*_new()"
"</function> C functions, because gtkmm must actually instantiate derived "
"GTypes, and the <function>*_new()</function> C functions are meant only as "
"convenience functions for C programmers."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8799(programlisting)
#, no-wrap
msgid ""
"\n"
"class ActionGroup : public Glib::Object\n"
"{\n"
"  _CLASS_GOBJECT(ActionGroup, GtkActionGroup, GTK_ACTION_GROUP, Glib::Object, GObject)\n"
"\n"
"protected:\n"
"  _WRAP_CTOR(ActionGroup(const Glib::ustring&amp; name = Glib::ustring()), gtk_action_group_new)\n"
"\n"
"public:\n"
"  _WRAP_CREATE(const Glib::ustring&amp; name = Glib::ustring())\n"
msgstr ""
"\n"
"class ActionGroup : public Glib::Object\n"
"{\n"
"  _CLASS_GOBJECT(ActionGroup, GtkActionGroup, GTK_ACTION_GROUP, Glib::Object, GObject)\n"
"\n"
"protected:\n"
"  _WRAP_CTOR(ActionGroup(const Glib::ustring&amp; name = Glib::ustring()), gtk_action_group_new)\n"
"\n"
"public:\n"
"  _WRAP_CREATE(const Glib::ustring&amp; name = Glib::ustring())\n"

#: C/gtkmm-tutorial-in.xml:8794(para)
msgid ""
"When using <function>_CLASS_GOBJECT()</function>, the constructors should be "
"protected (rather than public) and each constructor should have a "
"corresponding <function>_WRAP_CREATE()</function> in the public section. "
"This prevents the class from being instantiated without using a "
"<classname>RefPtr</classname>. For instance: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8814(para)
msgid "This macro creates a default constructor with no arguments."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8819(title)
msgid "_WRAP_CTOR"
msgstr "_WRAP_CTOR"

#: C/gtkmm-tutorial-in.xml:8820(para)
msgid ""
"This macro creates a constructor with arguments, equivalent to a "
"<function>*_new()</function> C function. It won't actually call the "
"<function>*_new()</function> function, but will simply create an equivalent "
"constructor with the same argument types. It takes a C++ constructor "
"signature, and a C function name."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8833(programlisting)
#, no-wrap
msgid ""
"\n"
"_WRAP_CTOR(ToolButton(Widget&amp; icon_widget, const Glib::ustring&amp; label{?}), gtk_tool_button_new)\n"
msgstr ""
"\n"
"_WRAP_CTOR(ToolButton(Widget&amp; icon_widget, const Glib::ustring&amp; label{?}), gtk_tool_button_new)\n"

#: C/gtkmm-tutorial-in.xml:8826(para)
msgid ""
"When wrapping constructors, it is possible for gmmproc to generate "
"convenience overloads of the wrapped constructors if the C function has "
"parameters that are optional (ie. the C API allows null for those "
"parameters). For instance, to specify if a parameter is optional, the "
"<function>_WRAP_CTOR()</function> macro would look something like the "
"following: <placeholder-1/> The <literal>{?}</literal> following the name of "
"the <parameter>label</parameter> parameter means that that parameter is "
"optional. In this case, gmmproc will generate an extra constructor without "
"that parameter."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8848(programlisting)
#, no-wrap
msgid ""
"\n"
"GtkToolItem* gtk_tool_button_new(GtkWidget* icon_widget, const gchar* label);\n"
msgstr ""
"\n"
"GtkToolItem* gtk_tool_button_new(GtkWidget* icon_widget, const gchar* label);\n"

#: C/gtkmm-tutorial-in.xml:8853(programlisting)
#, no-wrap
msgid ""
"\n"
"_WRAP_CTOR(ToolButton(const Glib::ustring&amp; label{label}, Widget&amp; icon_widget{icon_widget}), gtk_tool_button_new)\n"
msgstr ""
"\n"
"_WRAP_CTOR(ToolButton(const Glib::ustring&amp; label{label}, Widget&amp; icon_widget{icon_widget}), gtk_tool_button_new)\n"

#: C/gtkmm-tutorial-in.xml:8860(programlisting)
#, no-wrap
msgid ""
"\n"
"_WRAP_CTOR(ToolButton(const Glib::ustring&amp; label{.}, Widget&amp; icon_widget{.}), gtk_tool_button_new)\n"
msgstr ""
"\n"
"_WRAP_CTOR(ToolButton(const Glib::ustring&amp; label{.}, Widget&amp; icon_widget{.}), gtk_tool_button_new)\n"

#: C/gtkmm-tutorial-in.xml:8841(para)
msgid ""
"It is also possible to have the order of the parameters of the constructor "
"different from that of the C function by using gmmproc's C++ to C parameter "
"mapping functionality. Using this functionality, it is possible to map a C++ "
"parameter to a C parameter by specifying the C parameter name. For instance, "
"assuming that the declaration of the <function>gtk_tool_button_new()</"
"function> function is the following: <placeholder-1/> The parameters of the "
"wrapped constructor could be reordered using the following: <placeholder-2/> "
"The <literal>{param_name}</literal> following each of the names of the "
"parameters tells gmmproc to map those C++ parameters to the C parameters "
"with the given names. Since the C++ parameter names correspond to the C "
"ones, the above could be re-written as: <placeholder-3/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8864(para)
msgid ""
"This same optional parameter syntax and parameter reordering is available "
"for <function>_WRAP_CREATE()</function>. Additional <function>create()</"
"function> overloads would be generated by gmmproc without the specified "
"optional parameters."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8873(title)
msgid "Hand-coding constructors"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8882(programlisting)
#, no-wrap
msgid ""
"\n"
"Button::Button(const Glib::ustring&amp; label, bool mnemonic)\n"
":\n"
"  _CONSTRUCT(\"label\", label.c_str(), \"use_underline\", gboolean(mnemonic))\n"
"{}\n"
msgstr ""
"\n"
"Button::Button(const Glib::ustring&amp; label, bool mnemonic)\n"
":\n"
"  _CONSTRUCT(\"label\", label.c_str(), \"use_underline\", gboolean(mnemonic))\n"
"{}\n"

#: C/gtkmm-tutorial-in.xml:8874(para)
msgid ""
"When a constructor must be partly hand written because, for instance, the "
"<function>*_new()</function> C function's parameters do not correspond "
"directly to object properties, or because the <function>*_new()</function> C "
"function does more than call <function>g_object_new()</function>, the "
"<function>_CONSTRUCT()</function> macro may be used in the .ccg file to save "
"some work. The <function>_CONSTRUCT</function> macro takes a series of "
"property names and values. For instance, from <filename>button.ccg</"
"filename>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8894(title)
msgid "Method macros"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8897(title)
msgid "_WRAP_METHOD"
msgstr "_WRAP_METHOD"

#: C/gtkmm-tutorial-in.xml:8898(para)
msgid "This macro generates the C++ method to wrap a C function."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8899(function)
msgid "_WRAP_METHOD( C++ method signature, C function name)"
msgstr "_WRAP_METHOD( C++ method signature, C function name)"

#: C/gtkmm-tutorial-in.xml:8901(programlisting)
#, no-wrap
msgid ""
"\n"
"_WRAP_METHOD(void set_text(const Glib::ustring&amp; text), gtk_entry_set_text)\n"
msgstr ""
"\n"
"_WRAP_METHOD(void set_text(const Glib::ustring&amp; text), gtk_entry_set_text)\n"

#: C/gtkmm-tutorial-in.xml:8900(para)
msgid "For instance, from <filename>entry.hg</filename>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8905(para)
msgid ""
"The C function (e.g. <function>gtk_entry_set_text</function>) is described "
"more fully in the .defs file, and the <filename>convert*.m4</filename> files "
"contain the necessary conversion from the C++ parameter type to the C "
"parameter type. This macro also generates doxygen documentation comments "
"based on the <filename>*_docs.xml</filename> and <filename>*_docs_override."
"xml</filename> files."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8914(term) C/gtkmm-tutorial-in.xml:9123(term)
#: C/gtkmm-tutorial-in.xml:9170(term)
msgid "refreturn"
msgstr "refreturn"

#: C/gtkmm-tutorial-in.xml:8916(para)
msgid ""
"Do an extra <function>reference()</function> on the return value, in case "
"the C function does not provide a reference."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8921(term)
msgid "errthrow"
msgstr "errthrow"

#: C/gtkmm-tutorial-in.xml:8923(para)
msgid "Use the last GError* parameter of the C function to throw an exception."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8928(term)
msgid "deprecated"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8930(para)
msgid ""
"Puts the generated code in #ifdef blocks. Text about the deprecation can be "
"specified as an optional parameter."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8936(term)
msgid "constversion"
msgstr "constversion"

#: C/gtkmm-tutorial-in.xml:8938(para)
msgid ""
"Just call the non-const version of the same function, instead of generating "
"almost duplicate code."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8943(term) C/gtkmm-tutorial-in.xml:9131(term)
#: C/gtkmm-tutorial-in.xml:9202(term) C/gtkmm-tutorial-in.xml:9233(term)
msgid "ifdef"
msgstr "ifdef"

#: C/gtkmm-tutorial-in.xml:8945(para) C/gtkmm-tutorial-in.xml:9133(para)
#: C/gtkmm-tutorial-in.xml:9204(para) C/gtkmm-tutorial-in.xml:9235(para)
msgid "Puts the generated code in #ifdef blocks."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8911(para) C/gtkmm-tutorial-in.xml:9094(para)
#: C/gtkmm-tutorial-in.xml:9167(para)
msgid "There are some optional extra arguments: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8954(programlisting)
#, no-wrap
msgid ""
"\n"
"_WRAP_METHOD(void get_preferred_size(Requisition&amp; minimum_size, Requisition&amp; natural_size{?}) const, gtk_widget_get_preferred_size)\n"
msgstr ""
"\n"
"_WRAP_METHOD(void get_preferred_size(Requisition&amp; minimum_size, Requisition&amp; natural_size{?}) const, gtk_widget_get_preferred_size)\n"

#: C/gtkmm-tutorial-in.xml:8950(para)
msgid ""
"As with <function>_WRAP_CTOR()</function> it is possible to specify if there "
"are any optional parameters. If that is the case, gmmproc will generate "
"convenience overload methods without those parameters. For example: "
"<placeholder-1/> Would indicate that the <parameter>natural_size</parameter> "
"parameter is optional because its name ends with <literal>{?}</literal>. In "
"this case, gmmproc would generate a method overload without that parameter."
msgstr ""

#: C/gtkmm-tutorial-in.xml:8968(programlisting)
#, no-wrap
msgid ""
"\n"
"void gtk_widget_set_device_events(GtkWidget* widget, GdkDevice* device, GdkEventMask events);\n"
msgstr ""
"\n"
"void gtk_widget_set_device_events(GtkWidget* widget, GdkDevice* device, GdkEventMask events);\n"

#: C/gtkmm-tutorial-in.xml:8973(programlisting)
#, no-wrap
msgid ""
"\n"
"_WRAP_METHOD(void set_device_events(Gdk::EventMask events{events}, const Glib::RefPtr&lt;const Gdk::Device&gt;&amp; device{device}), gtk_widget_set_device_events)\n"
msgstr ""
"\n"
"_WRAP_METHOD(void set_device_events(Gdk::EventMask events{events}, const Glib::RefPtr&lt;const Gdk::Device&gt;&amp; device{device}), gtk_widget_set_device_events)\n"

#: C/gtkmm-tutorial-in.xml:8980(programlisting)
#, no-wrap
msgid ""
"\n"
"_WRAP_METHOD(void set_device_events(Gdk::EventMask events{.}, const Glib::RefPtr&lt;const Gdk::Device&gt;&amp; device{.}), gtk_widget_set_device_events)\n"
msgstr ""
"\n"
"_WRAP_METHOD(void set_device_events(Gdk::EventMask events{.}, const Glib::RefPtr&lt;const Gdk::Device&gt;&amp; device{.}), gtk_widget_set_device_events)\n"

#: C/gtkmm-tutorial-in.xml:8961(para)
msgid ""
"Also, as with <function>_WRAP_CTOR()</function>, it is possible to reorder "
"the parameters of the C++ method by using gmmproc's C++ to C parameter "
"mapping functionality. Using this functionality, it is possible to map a C++ "
"parameter to a C parameter by specifying the C parameter name. For example, "
"if the <function>gtk_widget_set_device_events()</function> declaration is "
"the following: <placeholder-1/> Something like the following would change "
"the order of the parameters in the C++ method: <placeholder-2/> The <literal>"
"{param_name}</literal> following each of the names of the parameters tells "
"gmmproc to map those C++ parameters to the C parameters with the given "
"names. Since the C++ parameter names correspond to the C ones, the above "
"could be re-written as: <placeholder-3/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:8992(programlisting)
#, no-wrap
msgid ""
"\n"
"GtkSizeRequestMode gtk_widget_get_request_mode(GtkWidget* widget);\n"
msgstr ""
"\n"
"GtkSizeRequestMode gtk_widget_get_request_mode(GtkWidget* widget);\n"

#: C/gtkmm-tutorial-in.xml:8998(programlisting)
#, no-wrap
msgid ""
"\n"
"_WRAP_METHOD(void get_request_mode(SizeRequestMode&amp; mode{OUT}) const, gtk_widget_get_request_mode)\n"
msgstr ""
"\n"
"_WRAP_METHOD(void get_request_mode(SizeRequestMode&amp; mode{OUT}) const, gtk_widget_get_request_mode)\n"

#: C/gtkmm-tutorial-in.xml:9006(programlisting)
#, no-wrap
msgid ""
"\n"
"_INITIALIZATION(`SizeRequestMode&amp;',`GtkSizeRequestMode',`$3 = (SizeRequestMode)($4)')\n"
msgstr ""
"\n"
"_INITIALIZATION(`SizeRequestMode&amp;',`GtkSizeRequestMode',`$3 = (SizeRequestMode)($4)')\n"

#: C/gtkmm-tutorial-in.xml:9010(programlisting)
#, no-wrap
msgid ""
"\n"
"_INITIALIZATION(`SizeRequestMode&amp;',`GtkSizeRequestMode',`$3 = ($1)($4)')\n"
msgstr ""
"\n"
"_INITIALIZATION(`SizeRequestMode&amp;',`GtkSizeRequestMode',`$3 = ($1)($4)')\n"

#: C/gtkmm-tutorial-in.xml:8984(para)
msgid ""
"With <function>_WRAP_METHOD()</function> it is also possible to include an "
"output parameter in the C++ method declaration in which the return of the C "
"function would be placed and to have the C++ method return <type>void</"
"type>. To do that, simply include the output parameter declaration in the C+"
"+ method declaration appending a <literal>{OUT}</literal> to the output "
"parameter name. For example, if <function>gtk_widget_get_request_mode()</"
"function> is declared as the following: <placeholder-1/> And having the C++ "
"method set an output parameter is desired instead of returning a "
"<type>SizeRequestMode</type>, something like the following could be used: "
"<placeholder-2/> the <literal>{OUT}</literal> appended to the name of the "
"<parameter>mode</parameter> output parameter tells gmmproc to place the "
"return of the C function in that output parameter. In this case, however, a "
"necessary initialization macro like the following would also have to be "
"specified: <placeholder-3/> Which could also be written as: <placeholder-4/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:9016(para)
msgid ""
"Objects used via <classname>RefPtr</classname>: Pass the <classname>RefPtr</"
"classname> as a const reference. For instance, <code>const Glib::RefPtr&lt;"
"Gtk::Action&gt;&amp; action</code>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9020(para)
msgid ""
"Const Objects used via <classname>RefPtr</classname>: If the object should "
"not be changed by the function, then make sure that the object is const, "
"even if the <classname>RefPtr</classname> is already const. For instance, "
"<code>const Glib::RefPtr&lt;const Gtk::Action&gt;&amp; action</code>."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9025(para)
msgid ""
"Wrapping <classname>GList*</classname> and <classname>GSList*</classname> "
"parameters: First, you need to discover what objects are contained in the "
"list's data field for each item, usually by reading the documentation for "
"the C function. The list can then be wrapped by a <classname>std::vector</"
"classname> type. For instance, <code>std::vector&lt; Glib::RefPtr&lt;"
"Action&gt; &gt;</code>. You may need to define a Traits type to specify how "
"the C and C++ types should be converted."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9042(programlisting)
#, no-wrap
msgid "#m4 _CONVERSION(`GSList*',`std::vector&lt;Widget*&gt;',`Glib::SListHandler&lt;Widget*&gt;::slist_to_vector($3, Glib::OWNERSHIP_SHALLOW)')"
msgstr "#m4 _CONVERSION(`GSList*',`std::vector&lt;Widget*&gt;',`Glib::SListHandler&lt;Widget*&gt;::slist_to_vector($3, Glib::OWNERSHIP_SHALLOW)')"

#: C/gtkmm-tutorial-in.xml:9034(para)
msgid ""
"Wrapping <classname>GList*</classname> and <classname>GSList*</classname> "
"return types: You must discover whether the caller should free the list and "
"whether it should release the items in the list, again by reading the "
"documentation of the C function. With this information you can choose the "
"ownership (none, shallow or deep) for the m4 conversion rule, which you "
"should probably put directly into the .hg file because the ownership depends "
"on the function rather than the type. For instance: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:9014(para)
msgid ""
"Though it's usually obvious what C++ types should be used in the C++ method, "
"here are some hints: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:9048(title)
msgid "_WRAP_METHOD_DOCS_ONLY"
msgstr "_WRAP_METHOD_DOCS_ONLY"

#: C/gtkmm-tutorial-in.xml:9049(para)
msgid ""
"This macro is like <function>_WRAP_METHOD()</function>, but it generates "
"only the documentation for a C++ method that wraps a C function. Use this "
"when you must hand-code the method, but you want to use the documentation "
"that would be generated if the method was generated."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9053(function)
msgid "_WRAP_METHOD_DOCS_ONLY(C function name)"
msgstr "_WRAP_METHOD_DOCS_ONLY(C function name)"

#: C/gtkmm-tutorial-in.xml:9055(programlisting)
#, no-wrap
msgid ""
"\n"
"_WRAP_METHOD_DOCS_ONLY(gtk_container_remove)\n"
msgstr ""
"\n"
"_WRAP_METHOD_DOCS_ONLY(gtk_container_remove)\n"

#: C/gtkmm-tutorial-in.xml:9054(para)
msgid "For instance, from <filename>container.hg</filename>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:9062(title)
msgid "_IGNORE / _IGNORE_SIGNAL"
msgstr "_IGNORE / _IGNORE_SIGNAL"

#: C/gtkmm-tutorial-in.xml:9063(para)
msgid ""
"<command>gmmproc</command> will warn you on stdout about functions and "
"signals that you have forgotten to wrap, helping to ensure that you are "
"wrapping the complete API. But if you don't want to wrap some functions or "
"signals, or if you chose to hand-code some methods then you can use the "
"_IGNORE() or _IGNORE_SIGNAL() macro to make <command>gmmproc</command> stop "
"complaining."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9068(function)
msgid "_IGNORE(C function name 1, C function name2, etc)"
msgstr "_IGNORE(C function name 1, C function name2, etc)"

#: C/gtkmm-tutorial-in.xml:9069(function)
msgid "_IGNORE_SIGNAL(C signal name 1, C signal name2, etc)"
msgstr "_IGNORE_SIGNAL(C signal name 1, C signal name2, etc)"

#: C/gtkmm-tutorial-in.xml:9071(programlisting)
#, no-wrap
msgid ""
"\n"
"_IGNORE(gtk_button_box_set_spacing, gtk_button_box_get_spacing)\n"
msgstr ""
"\n"
"_IGNORE(gtk_button_box_set_spacing, gtk_button_box_get_spacing)\n"

#: C/gtkmm-tutorial-in.xml:9070(para)
msgid "For instance, from <filename>buttonbox.hg</filename>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:9078(title)
msgid "_WRAP_SIGNAL"
msgstr "_WRAP_SIGNAL"

#: C/gtkmm-tutorial-in.xml:9079(para)
msgid ""
"This macro generates the C++ libsigc++-style signal to wrap a C GObject "
"signal. It actually generates a public accessor method, such as "
"<function>signal_clicked()</function>, which returns a proxy object. "
"<command>gmmproc</command> uses the .defs file to discover the C parameter "
"types and the .m4 convert files to discover appropriate type conversions."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9085(function)
msgid "_WRAP_SIGNAL( C++ signal handler signature, C signal name)"
msgstr "_WRAP_SIGNAL( C++ signal handler signature, C signal name)"

#: C/gtkmm-tutorial-in.xml:9087(programlisting)
#, no-wrap
msgid ""
"\n"
"_WRAP_SIGNAL(void clicked(),\"clicked\")\n"
msgstr ""
"\n"
"_WRAP_SIGNAL(void clicked(),\"clicked\")\n"

#: C/gtkmm-tutorial-in.xml:9091(para)
msgid ""
"Signals usually have function pointers in the GTK struct, with a "
"corresponding enum value. and a <function>g_signal_new()</function> in the ."
"c file."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9097(term)
msgid "no_default_handler"
msgstr "no_default_handler"

#: C/gtkmm-tutorial-in.xml:9099(para)
msgid ""
"Do not generate an <function>on_something()</function> virtual method to "
"allow easy overriding of the default signal handler. Use this when adding a "
"signal with a default signal handler would break the ABI by increasing the "
"size of the class's virtual function table."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9107(term)
msgid "custom_default_handler"
msgstr "custom_default_handler"

#: C/gtkmm-tutorial-in.xml:9109(para)
msgid ""
"Generate a declaration of the <function>on_something()</function> virtual "
"method in the <filename>.h</filename> file, but do not generate a definition "
"in the <filename>.cc</filename> file. Use this when you must generate the "
"definition by hand."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9116(term)
msgid "custom_c_callback"
msgstr "custom_c_callback"

#: C/gtkmm-tutorial-in.xml:9118(para)
msgid ""
"Do not generate a C callback function for the signal. Use this when you must "
"generate the callback function by hand."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9125(para)
msgid ""
"Do an extra <function>reference()</function> on the return value of the "
"<function>on_something()</function> virtual method, in case the C function "
"does not provide a reference."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9141(title)
msgid "_WRAP_PROPERTY"
msgstr "_WRAP_PROPERTY"

#: C/gtkmm-tutorial-in.xml:9142(para)
msgid ""
"This macro generates the C++ method to wrap a C GObject property. You must "
"specify the property name and the wanted C++ type for the property. "
"<command>gmmproc</command> uses the .defs file to discover the C type and "
"the .m4 convert files to discover appropriate type conversions."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9146(function)
msgid "_WRAP_PROPERTY(C property name, C++ type)"
msgstr "_WRAP_PROPERTY(C property name, C++ type)"

#: C/gtkmm-tutorial-in.xml:9148(programlisting)
#, no-wrap
msgid ""
"\n"
"_WRAP_PROPERTY(\"label\", Glib::ustring)\n"
msgstr ""
"\n"
"_WRAP_PROPERTY(\"label\", Glib::ustring)\n"

#: C/gtkmm-tutorial-in.xml:9155(title)
msgid "_WRAP_VFUNC"
msgstr "_WRAP_VFUNC"

#: C/gtkmm-tutorial-in.xml:9156(para)
msgid "This macro generates the C++ method to wrap a virtual C function."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9157(function)
msgid "_WRAP_VFUNC( C++ method signature, C function name)"
msgstr "_WRAP_VFUNC( C++ method signature, C function name)"

#: C/gtkmm-tutorial-in.xml:9159(programlisting)
#, no-wrap
msgid ""
"\n"
"_WRAP_VFUNC(SizeRequestMode get_request_mode() const, get_request_mode)\n"
msgstr ""
"\n"
"_WRAP_VFUNC(SizeRequestMode get_request_mode() const, get_request_mode)\n"

#: C/gtkmm-tutorial-in.xml:9158(para) C/gtkmm-tutorial-in.xml:9246(para)
msgid "For instance, from <filename>widget.hg</filename>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:9163(para)
msgid ""
"The C function (e.g. <function>get_request_mode</function>) is described "
"more fully in the <filename>*_vfuncs.defs</filename> file, and the "
"<filename>convert*.m4</filename> files contain the necessary conversion from "
"the C++ parameter type to the C parameter type."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9172(para)
msgid ""
"Do an extra <function>reference()</function> on the return value of the "
"<function>something_vfunc()</function> function, in case the virtual C "
"function does not provide a reference."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9178(term)
msgid "refreturn_ctype"
msgstr "refreturn_ctype"

#: C/gtkmm-tutorial-in.xml:9180(para)
msgid ""
"Do an extra <function>reference()</function> on the return value of an "
"overridden <function>something_vfunc()</function> function in the C callback "
"function, in case the calling C function expects it to provide a reference."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9187(term)
msgid "custom_vfunc"
msgstr "custom_vfunc"

#: C/gtkmm-tutorial-in.xml:9189(para)
msgid ""
"Do not generate a definition of the vfunc in the <filename>.cc</filename> "
"file. Use this when you must generate the vfunc by hand."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9195(term)
msgid "custom_vfunc_callback"
msgstr "custom_vfunc_callback"

#: C/gtkmm-tutorial-in.xml:9197(para)
msgid ""
"Do not generate a C callback function for the vfunc. Use this when you must "
"generate the callback function by hand."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9209(para)
msgid ""
"A rule to which there may be exceptions: If the virtual C function returns a "
"pointer to an object derived from <classname>GObject</classname>, i.e. a "
"reference-counted object, then the virtual C++ function shall return a "
"<classname>Glib::RefPtr&lt;&gt;</classname> object. One of the extra "
"arguments <parameter>refreturn</parameter> or <parameter>refreturn_ctype</"
"parameter> is required."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9220(title)
msgid "Other macros"
msgstr "Otras macros"

#: C/gtkmm-tutorial-in.xml:9222(title)
msgid "_IMPLEMENTS_INTERFACE"
msgstr "_IMPLEMENTS_INTERFACE"

#: C/gtkmm-tutorial-in.xml:9223(para)
msgid "This macro generates initialization code for the interface."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9224(function)
msgid "_IMPLEMENTS_INTERFACE(C++ interface name)"
msgstr "_IMPLEMENTS_INTERFACE(C++ interface name)"

#: C/gtkmm-tutorial-in.xml:9226(programlisting)
#, no-wrap
msgid ""
"\n"
"_IMPLEMENTS_INTERFACE(Activatable)\n"
msgstr ""
"\n"
"_IMPLEMENTS_INTERFACE(Activatable)\n"

#: C/gtkmm-tutorial-in.xml:9230(para)
msgid "There is one optional extra argument: <placeholder-1/>"
msgstr "Hay un argumento opcional adicional: <placeholder-1/>"

#: C/gtkmm-tutorial-in.xml:9243(title)
msgid "_WRAP_ENUM"
msgstr "_WRAP_ENUM"

#: C/gtkmm-tutorial-in.xml:9244(para)
msgid ""
"This macro generates a C++ enum to wrap a C enum. You must specify the "
"desired C++ name and the name of the underlying C enum."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9247(programlisting)
#, no-wrap
msgid ""
"\n"
"_WRAP_ENUM(WindowType, GdkWindowType)\n"
msgstr ""
"\n"
"_WRAP_ENUM(WindowType, GdkWindowType)\n"

#: C/gtkmm-tutorial-in.xml:9251(para)
msgid ""
"If the enum is not a <classname>GType</classname>, you must pass a third "
"parameter NO_GTYPE. This is the case when there is no <function>*_get_type()"
"</function> function for the C enum, but be careful that you don't just need "
"to include an extra header for that function. You should also file a bug "
"against the C API, because all enums should be registered as GTypes."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9256(programlisting)
#, no-wrap
msgid ""
"\n"
"_WRAP_ENUM(IconLookupFlags, GtkIconLookupFlags, NO_GTYPE)\n"
msgstr ""
"\n"
"_WRAP_ENUM(IconLookupFlags, GtkIconLookupFlags, NO_GTYPE)\n"

#: C/gtkmm-tutorial-in.xml:9255(para)
msgid "For example, from <filename>icontheme.hg</filename>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:9263(title)
msgid "_WRAP_GERROR"
msgstr "_WRAP_GERROR"

#: C/gtkmm-tutorial-in.xml:9264(para)
msgid ""
"This macro generates a C++ exception class, derived from Glib::Error, with a "
"Code enum and a code() method. You must specify the desired C++ name, the "
"name of the corresponding C enum, and the prefix for the C enum values."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9267(para)
msgid ""
"This exception can then be thrown by methods which are generated from "
"_WRAP_METHOD() with the errthrow option."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9269(programlisting)
#, no-wrap
msgid ""
"\n"
"_WRAP_GERROR(PixbufError, GdkPixbufError, GDK_PIXBUF_ERROR)\n"
msgstr ""
"\n"
"_WRAP_GERROR(PixbufError, GdkPixbufError, GDK_PIXBUF_ERROR)\n"

#: C/gtkmm-tutorial-in.xml:9268(para)
msgid "For instance, from <filename>pixbuf.hg</filename>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:9276(title)
msgid "_MEMBER_GET / _MEMBER_SET"
msgstr "_MEMBER_GET / _MEMBER_SET"

#: C/gtkmm-tutorial-in.xml:9277(para)
msgid ""
"Use these macros if you're wrapping a simple struct or boxed type that "
"provides direct access to its data members, to create getters and setters "
"for the data members."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9281(function)
msgid "_MEMBER_GET(C++ name, C name, C++ type, C type)"
msgstr "_MEMBER_GET(C++ name, C name, C++ type, C type)"

#: C/gtkmm-tutorial-in.xml:9282(function)
msgid "_MEMBER_SET(C++ name, C name, C++ type, C type)"
msgstr "_MEMBER_SET(C++ name, C name, C++ type, C type)"

#: C/gtkmm-tutorial-in.xml:9285(programlisting)
#, no-wrap
msgid "_MEMBER_GET(x, x, int, int)"
msgstr "_MEMBER_GET(x, x, int, int)"

#: C/gtkmm-tutorial-in.xml:9283(para)
msgid "For example, in <filename>rectangle.hg</filename>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:9289(title)
msgid "_MEMBER_GET_PTR / _MEMBER_SET_PTR"
msgstr "_MEMBER_GET_PTR / _MEMBER_SET_PTR"

#: C/gtkmm-tutorial-in.xml:9290(para)
msgid ""
"Use these macros to automatically provide getters and setters for a data "
"member that is a pointer type. For the getter function, it will create two "
"methods, one const and one non-const."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9295(function)
msgid "_MEMBER_GET_PTR(C++ name, C name, C++ type, C type)"
msgstr "_MEMBER_GET_PTR(C++ name, C name, C++ type, C type)"

#: C/gtkmm-tutorial-in.xml:9296(function)
msgid "_MEMBER_SET_PTR(C++ name, C name, C++ type, C type)"
msgstr "_MEMBER_SET_PTR(C++ name, C name, C++ type, C type)"

#: C/gtkmm-tutorial-in.xml:9298(programlisting)
#, no-wrap
msgid ""
"\n"
"// _MEMBER_GET_PTR(engine_lang, lang_engine, EngineLang*, PangoEngineLang*)\n"
"// It's just a comment. It's difficult to find a real-world example.\n"
msgstr ""
"\n"
"// _MEMBER_GET_PTR(engine_lang, lang_engine, EngineLang*, PangoEngineLang*)\n"
"// It's just a comment. It's difficult to find a real-world example.\n"

#: C/gtkmm-tutorial-in.xml:9297(para)
msgid ""
"For example, for <classname>Pango::Analysis</classname> in <filename>item."
"hg</filename>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:9305(title)
msgid "_MEMBER_GET_GOBJECT / _MEMBER_SET_GOBJECT"
msgstr "_MEMBER_GET_GOBJECT / _MEMBER_SET_GOBJECT"

#: C/gtkmm-tutorial-in.xml:9306(para)
msgid ""
"Use these macros to provide getters and setters for a data member that is a "
"<classname>GObject</classname> type that must be referenced before being "
"returned."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9311(function)
msgid "_MEMBER_GET_GOBJECT(C++ name, C name, C++ type, C type)"
msgstr "_MEMBER_GET_GOBJECT(C++ name, C name, C++ type, C type)"

#: C/gtkmm-tutorial-in.xml:9312(function)
msgid "_MEMBER_SET_GOBJECT(C++ name, C name, C++ type, C type)"
msgstr "_MEMBER_SET_GOBJECT(C++ name, C name, C++ type, C type)"

#: C/gtkmm-tutorial-in.xml:9314(programlisting)
#, no-wrap
msgid ""
"\n"
"_MEMBER_GET_GOBJECT(layout, layout, Pango::Layout, PangoLayout*)\n"
msgstr ""
"\n"
"_MEMBER_GET_GOBJECT(layout, layout, Pango::Layout, PangoLayout*)\n"

#: C/gtkmm-tutorial-in.xml:9313(para)
msgid ""
"For example, in Pangomm, <filename>layoutline.hg</filename>: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:9321(title)
msgid "Basic Types"
msgstr "Tipos básicos"

#: C/gtkmm-tutorial-in.xml:9322(para)
msgid ""
"Some of the basic types that are used in C APIs have better alternatives in C"
"++. For example, there's no need for a <type>gboolean</type> type since C++ "
"has <type>bool</type>. The following list shows some commonly-used types in "
"C APIs and what you might convert them to in a C++ wrapper library."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9327(title)
msgid "Basic Type equivalents"
msgstr "Tipos básicos equivalentes"

#: C/gtkmm-tutorial-in.xml:9329(segtitle)
msgid "C type"
msgstr "Tipo C"

#: C/gtkmm-tutorial-in.xml:9330(segtitle)
msgid "C++ type"
msgstr "Tipo C++"

#: C/gtkmm-tutorial-in.xml:9331(type)
msgid "gboolean"
msgstr "gboolean"

#: C/gtkmm-tutorial-in.xml:9331(type)
msgid "bool"
msgstr "bool"

#: C/gtkmm-tutorial-in.xml:9332(type)
msgid "gint"
msgstr "gint"

#: C/gtkmm-tutorial-in.xml:9332(type)
msgid "int"
msgstr "int"

#: C/gtkmm-tutorial-in.xml:9333(type)
msgid "guint"
msgstr "guint"

#: C/gtkmm-tutorial-in.xml:9334(type)
msgid "gdouble"
msgstr "gdouble"

#: C/gtkmm-tutorial-in.xml:9334(type)
msgid "double"
msgstr "doble"

#: C/gtkmm-tutorial-in.xml:9335(type)
msgid "gunichar"
msgstr "gunichar"

#: C/gtkmm-tutorial-in.xml:9336(type)
msgid "gchar*"
msgstr "gchar*"

#: C/gtkmm-tutorial-in.xml:9336(classname)
msgid "std::string"
msgstr "std::string"

#: C/gtkmm-tutorial-in.xml:9336(seg)
msgid "<placeholder-1/> (or <placeholder-2/> for filenames)"
msgstr "<placeholder-1/> (o <placeholder-2/> para nombres de archivos)"

#: C/gtkmm-tutorial-in.xml:9343(title)
msgid "Hand-coded source files"
msgstr "Archivos de código fuente programados a mano"

#: C/gtkmm-tutorial-in.xml:9344(para)
msgid ""
"You might want to include additional source files that will not be generated "
"by <command>gmmproc</command> from <filename>.hg</filename> and <filename>."
"ccg</filename> files. You can simply place these in your "
"<filename>libsomething/libsomethingmm</filename> directory and mention them "
"in the <filename>Makefile.am</filename> in the <varname>files_extra_h</"
"varname> and <varname>files_extra_cc</varname> variables."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9354(title)
msgid "Initialization"
msgstr "Inicialización"

#: C/gtkmm-tutorial-in.xml:9363(programlisting)
#, no-wrap
msgid ""
"\n"
"void init()\n"
"{\n"
"  Gtk::Main::init_gtkmm_internals(); //Sets up the g type system and the Glib::wrap() table.\n"
"  wrap_init(); //Tells the Glib::wrap() table about the libsomethingmm classes.\n"
"}\n"
msgstr ""
"\n"
"void init()\n"
"{\n"
"  Gtk::Main::init_gtkmm_internals(); //Sets up the g type system and the Glib::wrap() table.\n"
"  wrap_init(); //Tells the Glib::wrap() table about the libsomethingmm classes.\n"
"}\n"

#: C/gtkmm-tutorial-in.xml:9355(para)
msgid ""
"Your library must be initialized before it can be used, to register the new "
"types that it makes available. Also, the C library that you are wrapping "
"might have its own initialization function that you should call. You can do "
"this in an <function>init()</function> function that you can place in hand-"
"coded <filename>init.h</filename> and <filename>init.cc</filename> files. "
"This function should initialize your dependencies (such as the C function, "
"and <application>gtkmm</application>) and call your generated "
"<function>wrap_init()</function> function. For instance: <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:9371(para)
msgid ""
"The implementation of the <function>wrap_init()</function> method in "
"<filename>wrap_init.cc</filename> is generated by "
"<filename>generate_wrap_init.pl</filename>, but the declaration in "
"<filename>wrap_init.h</filename> is hand-coded, so you will need to adjust "
"<filename>wrap_init.h</filename> so that the <function>init()</function> "
"function appears in the correct C++ namespace."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9380(title)
msgid "Problems in the C API."
msgstr "Problemas en la API de C."

#: C/gtkmm-tutorial-in.xml:9381(para)
msgid ""
"You are likely to encounter some problems in the library that you are "
"wrapping, particularly if it is a new project. Here are some common "
"problems, with solutions."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9383(title)
msgid "Unable to predeclare structs"
msgstr "No se pueden predeclarar estructuras"

#: C/gtkmm-tutorial-in.xml:9385(programlisting)
#, no-wrap
msgid ""
"\n"
"typedef struct _ExampleWidget ExampleWidget;\n"
"\n"
"struct _ExampleWidget\n"
"{\n"
"  ...\n"
"};\n"
msgstr ""
"\n"
"typedef struct _ExampleWidget ExampleWidget;\n"
"\n"
"struct _ExampleWidget\n"
"{\n"
"  ...\n"
"};\n"

#: C/gtkmm-tutorial-in.xml:9384(para)
msgid ""
"By convention, structs are declared in glib/GTK+-style headers like so: "
"<placeholder-1/>"
msgstr ""
"Por convenio, las estructuras se declaran en los encabezados de Glib/GTK+ "
"igual que en: <placeholder-1/>"

#: C/gtkmm-tutorial-in.xml:9394(para)
msgid ""
"The extra typedef allows the struct to be used in a header without including "
"its full definition, simply by predeclaring it, by repeating that typedef. "
"This means that you don't have to include the C library's header in your C++ "
"header, thus keeping it out of your public API. <command>gmmproc</command> "
"assumes that this technique was used, so you will see compiler errors if "
"that is not the case."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9401(programlisting)
#, no-wrap
msgid ""
"\n"
"example-widget.h:56: error: using typedef-name 'ExampleWidget' after 'struct'\n"
"../../libexample/libexamplemm/example-widget.h:34: error: 'ExampleWidget' has a previous declaration here\n"
"make[4]: *** [example-widget.lo] Error 1\n"
msgstr ""
"\n"
"example-widget.h:56: error: using typedef-name 'ExampleWidget' after 'struct'\n"
"../../libexample/libexamplemm/example-widget.h:34: error: 'ExampleWidget' has a previous declaration here\n"
"make[4]: *** [example-widget.lo] Error 1\n"

#: C/gtkmm-tutorial-in.xml:9407(programlisting)
#, no-wrap
msgid ""
"\n"
"example-widget.h:60: error: '_ExampleWidget ExampleWidget' redeclared as different kind of symbol\n"
"../../libexample/libexamplemm/example-widget.h:34: error: previous declaration of 'typedef struct _ExampleWidget ExampleWidget'\n"
msgstr ""
"\n"
"example-widget.h:60: error: '_ExampleWidget ExampleWidget' redeclared as different kind of symbol\n"
"../../libexample/libexamplemm/example-widget.h:34: error: previous declaration of 'typedef struct _ExampleWidget ExampleWidget'\n"

#: C/gtkmm-tutorial-in.xml:9399(para)
msgid ""
"This compiler error might look like this: <placeholder-1/> or this: "
"<placeholder-2/>"
msgstr ""
"Este error del compilador podría tener este aspecto: <placeholder-1/> o "
"este: <placeholder-2/>"

#: C/gtkmm-tutorial-in.xml:9412(para)
msgid ""
"This is easy to correct in the C library, so do send a patch to the relevant "
"maintainer."
msgstr ""
"Esto es fácil de corregir en la biblioteca de C, así que envíe un parche al "
"mantenedor pertinentes."

#: C/gtkmm-tutorial-in.xml:9416(title)
msgid "Lack of properties"
msgstr "Falta de propiedades"

#: C/gtkmm-tutorial-in.xml:9423(programlisting)
#, no-wrap
msgid ""
"\n"
"GtkWidget* example_widget_new(int something, const char* thing)\n"
"{\n"
"        return g_object_new (EXAMPLE_TYPE_WIDGET, \"something\", something, \"thing\", thing, NULL);\n"
"}\n"
msgstr ""
"\n"
"GtkWidget* example_widget_new(int something, const char* thing)\n"
"{\n"
"        return g_object_new (EXAMPLE_TYPE_WIDGET, \"something\", something, \"thing\", thing, NULL);\n"
"}\n"

#: C/gtkmm-tutorial-in.xml:9417(para)
msgid ""
"By convention, glib/GTK+-style objects have <function>*_new()</function> "
"functions, such as <function>example_widget_new()</function> that do nothing "
"more than call <function>g_object_new()</function> and return the result. "
"The input parameters are supplied to <function>g_object_new()</function> "
"along with the names of the properties for which they are values. For "
"instance, <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:9430(para)
msgid ""
"This allows language bindings to implement their own equivalents (such as C+"
"+ constructors), without using the <function>*_new()</function> function. "
"This is often necessary so that they can actually instantiate a derived "
"GType, to add their own hooks for signal handlers and vfuncs."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9434(para)
msgid ""
"At the least, the <function>_new()</function> function should not use any "
"private API (functions that are only in a .c file). Even when there are no "
"functions, we can sometimes reimplement 2 or 3 lines of code in a "
"<function>_new()</function> function as long as those lines of code use API "
"that is available to us."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9442(programlisting)
#, no-wrap
msgid ""
"\n"
"GtkWidget* example_widget_new(int something, const char* thing)\n"
"{\n"
"        ExampleWidget* widget;\n"
"        widget = g_object_new (EXAMPLE_TYPE_WIDGET, NULL);\n"
"        example_widget_construct(widget, \"something\", something, \"thing\", thing);\n"
"}\n"
"\n"
"void example_widget_construct(ExampleWidget* widget, int something, const char* thing)\n"
"{\n"
"        //Do stuff that uses private API:\n"
"        widget-&gt;priv-&gt;thing = thing;\n"
"        do_something(something);\n"
"}\n"
msgstr ""
"\n"
"GtkWidget* example_widget_new(int something, const char* thing)\n"
"{\n"
"        ExampleWidget* widget;\n"
"        widget = g_object_new (EXAMPLE_TYPE_WIDGET, NULL);\n"
"        example_widget_construct(widget, \"something\", something, \"thing\", thing);\n"
"}\n"
"\n"
"void example_widget_construct(ExampleWidget* widget, int something, const char* thing)\n"
"{\n"
"        //Do stuff that uses private API:\n"
"        widget-&gt;priv-&gt;thing = thing;\n"
"        do_something(something);\n"
"}\n"

#: C/gtkmm-tutorial-in.xml:9439(para)
msgid ""
"Another workaround is to add a <function>*_construct()</function> function "
"that the C++ constructor can call after instantiating its own type. For "
"instance, <placeholder-1/>"
msgstr ""

#: C/gtkmm-tutorial-in.xml:9458(para)
msgid ""
"Adding properties, and ensuring that they interact properly with each other, "
"is relatively difficult to correct in the C library, but it is possible, so "
"do file a bug and try to send a patch to the relevant maintainer."
msgstr ""
"Incorporar propiedades, y asegurar que interactúan con otras propiedades "
"correctamente, es relativamente difícil de corregir en la biblioteca de C, "
"pero es posible, por lo que rellene un informe de error e intente enviar un "
"parche al mantenedor correspondiente."

#: C/gtkmm-tutorial-in.xml:9466(title)
msgid "Documentation"
msgstr "Documentación"

#: C/gtkmm-tutorial-in.xml:9467(para)
msgid ""
"In general, gtkmm-style projects use Doxygen, which reads specially "
"formatted C++ comments and generates HTML documentation. You may write these "
"doxygen comments directly in the header files."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9470(title)
msgid "Reusing C documentation"
msgstr "Reutilizar la documentación de C"

#: C/gtkmm-tutorial-in.xml:9471(para)
msgid ""
"You might wish to reuse documentation that exists for the C library that you "
"are wrapping. GTK-style C libraries typically use gtk-doc and therefore have "
"source code comments formatted for gtk-doc and some extra documentation in ."
"sgml and .xml files. The docextract_to_xml.py script, from glibmm's "
"<filename>tools/defs_gen</filename> directory, can read these files and "
"generate an .xml file that <command>gmmproc</command> can use to generate "
"doxygen comments. <command>gmmproc</command> will even try to transform the "
"documentation to make it more appropriate for a C++ API."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9481(programlisting)
#, no-wrap
msgid "./docextract_to_xml.py -s ~/checkout/gnome/gtk+/gtk/ -s ~/checkout/gnome/gtk+/docs/reference/gtk/ &gt; gtk_docs.xml\n"
msgstr "./docextract_to_xml.py -s ~/checkout/gnome/gtk+/gtk/ -s ~/checkout/gnome/gtk+/docs/reference/gtk/ &gt; gtk_docs.xml\n"

#: C/gtkmm-tutorial-in.xml:9484(para)
msgid ""
"Because this automatic transformation is not always appropriate, you might "
"want to provide hand-written text for a particular method. You can do this "
"by copying the XML node for the function from your <filename>something_docs."
"xml</filename> file to the <filename>something_docs_override.xml</filename> "
"file and changing the contents."
msgstr ""

#: C/gtkmm-tutorial-in.xml:9493(title)
msgid "Documentation build structure"
msgstr "Estructura de construcción de la documentación"

#: C/gtkmm-tutorial-in.xml:9494(para)
msgid ""
"If you copied the skeleton source tree in mm-common and substituted the "
"placeholder text, then you will already have suitable <filename>Makefile.am</"
"filename> and <filename>Doxyfile.in</filename> files. With the mm-common "
"build setup, the list of Doxygen input files is not defined in the Doxygen "
"configuration file, but passed along from <command>make</command> to the "
"standard input of <command>doxygen</command>. The input file list is defined "
"by the <varname>doc_input</varname> variable in the <filename>Makefile.am</"
"filename> file."
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: C/gtkmm-tutorial-in.xml:0(None)
msgid "translator-credits"
msgstr ""
"Nicolás Satragno <nsatragno@gmail.com>, 2012\n"
"José Zambrano <jozaol@gmail.com>, 2011\n"
"Daniel Mustieles <daniel.mustieles@gmail.com>, 2011\n"
"Jorge González <jorgegonz@svn.gnome.org>, 2010"

#~ msgid "ComboBoxEntry"
#~ msgstr "ComboBoxEntry"

#~ msgid "Gtk::Main kit(argc, argv);"
#~ msgstr "Gtk::Main kit(argc, argv);"

#~ msgid "Gtk::Main::run(window);"
#~ msgstr "Gtk::Main::run(window);"

#~ msgid "ColorSelectionDialog"
#~ msgstr "ColorSelectionDialog"

#~ msgid "Constructor"
#~ msgstr "Constructor"

#~ msgid "Gtk::Table(int rows = 1, int columns = 1, bool homogeneous = false);"
#~ msgstr ""
#~ "Gtk::Table(int rows = 1, int columns = 1, bool homogeneous = false);"

#~ msgid ""
#~ "\n"
#~ " 0          1          2\n"
#~ "0+----------+----------+\n"
#~ " |          |          |\n"
#~ "1+----------+----------+\n"
#~ " |          |          |\n"
#~ "2+----------+----------+\n"
#~ msgstr ""
#~ "\n"
#~ " 0          1          2\n"
#~ "0+----------+----------+\n"
#~ " |          |          |\n"
#~ "1+----------+----------+\n"
#~ " |          |          |\n"
#~ "2+----------+----------+\n"

#~ msgid ""
#~ "Note that the coordinate system starts in the upper left hand corner."
#~ msgstr ""
#~ "Tenga en cuenta que el sistema de coordenadas empieza en la esquina "
#~ "superior izquierda."

#~ msgid ""
#~ "void Gtk::Table::attach(Gtk::Widget&amp; child,\n"
#~ "                        guint left_attach, guint right_attach,\n"
#~ "                        guint top_attach, guint bottom_attach,\n"
#~ "                        guint xoptions = Gtk::FILL | Gtk::EXPAND,\n"
#~ "                        guint yoptions = Gtk::FILL | Gtk::EXPAND,\n"
#~ "                        guint xpadding = 0, guint ypadding = 0);"
#~ msgstr ""
#~ "void Gtk::Table::attach(Gtk::Widget&amp; child,\n"
#~ "                        guint left_attach, guint right_attach,\n"
#~ "                        guint top_attach, guint bottom_attach,\n"
#~ "                        guint xoptions = Gtk::FILL | Gtk::EXPAND,\n"
#~ "                        guint yoptions = Gtk::FILL | Gtk::EXPAND,\n"
#~ "                        guint xpadding = 0, guint ypadding = 0);"

#~ msgid "Gtk::FILL"
#~ msgstr "Gtk::FILL"

#~ msgid "Gtk::SHRINK"
#~ msgstr "Gtk::SHRINK"

#~ msgid "Gtk::EXPAND"
#~ msgstr "Gtk::EXPAND"

#~ msgid "Other methods"
#~ msgstr "Otros métodos"

#~ msgid "Gene"
#~ msgstr "Gene"

#~ msgid "Ruebsamen"
#~ msgstr "Ruebsamen"

#~ msgid "Chapter on \"Win32 Installation\"."
#~ msgstr "Capítulo acerca de «Instalación en Win32»."

#~ msgid "Cedric"
#~ msgstr "Cedric"

#~ msgid "Gustin"
#~ msgstr "Gustin"

#~ msgid ""
#~ "\n"
#~ "_CLASS_OPAQUE_COPYABLE(Region, GdkRegion, gdk_region_new, "
#~ "gdk_region_copy, gdk_region_destroy)\n"
#~ msgstr ""
#~ "\n"
#~ "_CLASS_OPAQUE_COPYABLE(Region, GdkRegion, gdk_region_new, "
#~ "gdk_region_copy, gdk_region_destroy)\n"

#~ msgid "_IGNORE()"
#~ msgstr "_IGNORE()"

#~ msgid ""
#~ "\n"
#~ "_MEMBER_GET_PTR(vbox, vbox, VBox*, GtkWidget*)\n"
#~ msgstr ""
#~ "\n"
#~ "_MEMBER_GET_PTR(vbox, vbox, VBox*, GtkWidget*)\n"

#~ msgid ""
#~ "Gtk::RecentInfo info = recent_manager-&gt;lookup_item(uri);\n"
#~ "if (info)\n"
#~ "{\n"
#~ "  // item was found\n"
#~ "}"
#~ msgstr ""
#~ "Gtk::RecentInfo info = recent_manager-&gt;lookup_item(uri);\n"
#~ "if (info)\n"
#~ "{\n"
#~ "  // se encontró el elemento\n"
#~ "}"

#~ msgid "FontSelectionDialog"
#~ msgstr "FontSelectionDialog"

#~ msgid ""
#~ "bool myarea::on_expose_event(GdkEventExpose* ev)\n"
#~ "{\n"
#~ "Glib::RefPtr&lt;Gdk::Pixbuf&gt; image = Gdk::Pixbuf::create_from_file"
#~ "(\"myimage.png\");\n"
#~ "image-&gt;render_to_drawable(get_window(), get_style()-&gt;get_black_gc"
#~ "(),\n"
#~ "0, 0, 100, 80, image-&gt;get_width(), image-&gt;get_height(), // draw the "
#~ "whole image (from 0,0 to the full width,height) at 100,80 in the window\n"
#~ "Gdk::RGB_DITHER_NONE, 0, 0);\n"
#~ "return true;\n"
#~ "}"
#~ msgstr ""
#~ "bool myarea::on_expose_event(GdkEventExpose* ev)\n"
#~ "{\n"
#~ "Glib::RefPtr&lt;Gdk::Pixbuf&gt; image = Gdk::Pixbuf::create_from_file"
#~ "(\"myimage.png\");\n"
#~ "image-&gt;render_to_drawable(get_window(), get_style()-&gt;get_black_gc"
#~ "(),\n"
#~ "0, 0, 100, 80, image-&gt;get_width(), image-&gt;get_height(), // draw the "
#~ "whole image (from 0,0 to the full width,height) at 100,80 in the window\n"
#~ "Gdk::RGB_DITHER_NONE, 0, 0);\n"
#~ "return true;\n"
#~ "}"

#~ msgid ""
#~ "\n"
#~ "Glib::RefPtr&lt;Gdk::Bitmap&gt; bitmap = Gdk::Bitmap::create(window, "
#~ "data, width, height);\n"
#~ msgstr ""
#~ "\n"
#~ "Glib::RefPtr&lt;Gdk::Bitmap&gt; bitmap = Gdk::Bitmap::create(window, "
#~ "data, width, height);\n"

#~ msgid ""
#~ "\n"
#~ "_MEMBER_GET_GOBJECT(offscreen_pixmap, offscreen_pixmap, Gdk::Pixmap, "
#~ "GdkPixmap*)\n"
#~ msgstr ""
#~ "\n"
#~ "_MEMBER_GET_GOBJECT(offscreen_pixmap, offscreen_pixmap, Gdk::Pixmap, "
#~ "GdkPixmap*)\n"

#~ msgid "Jason"
#~ msgstr "Jason"

#~ msgid "M'Sadoques"
#~ msgstr "M'Sadoques"

#~ msgid "Chapter on \"Drawing Area\"."
#~ msgstr "Capítulo acerca de «Área de dibujo»."

#~ msgid "Alan"
#~ msgstr "Alan"

#~ msgid "Ott"
#~ msgstr "Ott"

#~ msgid "Appendix on \"Visual Studio 2005\"."
#~ msgstr "Apéndice acerca de «Visual Studio 2005»."

#~ msgid "TODO: gtkmm2: markup."
#~ msgstr "Por-hacer: gtkmm2; marcado."

#~ msgid "size()"
#~ msgstr "size()"

#~ msgid "max_size()"
#~ msgstr "max_size()"

#~ msgid "empty()"
#~ msgstr "empty()"

#~ msgid "insert()"
#~ msgstr "insert()"

#~ msgid "push_front()"
#~ msgstr "push_front()"

#~ msgid "push_back()"
#~ msgstr "push_back()"

#~ msgid "pop_front()"
#~ msgstr "pop_front()"

#~ msgid "pop_back()"
#~ msgstr "pop_back()"

#~ msgid "clear()"
#~ msgstr "clear()"

#~ msgid "erase()"
#~ msgstr "erase()"

#~ msgid "remove()"
#~ msgstr "remove()"

#~ msgid "find()"
#~ msgstr "find()"

#~ msgid "front()"
#~ msgstr "front()"

#~ msgid "back()"
#~ msgstr "back()"

#~ msgid ""
#~ "namespace Notebook_Helpers\n"
#~ "{\n"
#~ "    class PageList\n"
#~ "    {\n"
#~ "    public:\n"
#~ "             . . .\n"
#~ "        void push_back(const Element&amp; e);\n"
#~ "             . . .\n"
#~ "        Page* operator[](size_type l);\n"
#~ "    };\n"
#~ "};"
#~ msgstr ""
#~ "namespace Notebook_Helpers\n"
#~ "{\n"
#~ "    class PageList\n"
#~ "    {\n"
#~ "    public:\n"
#~ "             . . .\n"
#~ "        void push_back(const Element&amp; e);\n"
#~ "             . . .\n"
#~ "        Page* operator[](size_type l);\n"
#~ "    };\n"
#~ "};"

#~ msgid ""
#~ "MenuElem* m = new MenuElem(\"hello\");\n"
#~ "m-&gt;right_justify();\n"
#~ "items().push_back(*m);"
#~ msgstr ""
#~ "MenuElem* m = new MenuElem(\"hola\");\n"
#~ "m-&gt;right_justify();\n"
#~ "items().push_back(*m);"

#~ msgid ""
#~ "items().push_back(MenuElem(\"hello\"));\n"
#~ "items().back()-&gt;right_justify();"
#~ msgstr ""
#~ "items().push_back(MenuElem(\"hola\"));\n"
#~ "items().back()-&gt;right_justify();"

#~ msgid "Link"
#~ msgstr "Enlace"

#~ msgid "2002-2006"
#~ msgstr "2002-2006"
